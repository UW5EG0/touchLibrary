
touchLibrary.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ff8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b04  08008188  08008188  00018188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c8c  08008c8c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008c8c  08008c8c  00018c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c94  08008c94  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c94  08008c94  00018c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c98  08008c98  00018c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000003fc  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e8  200005e8  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001123b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224c  00000000  00000000  00031457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  000336a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a1b  00000000  00000000  000341c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001053a  00000000  00000000  00055bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ecd  00000000  00000000  00066115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cfe2  2**0
                  CONTENTS, READONLY
 20 .debug_loc    000091e8  00000000  00000000  0012d035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000ab8  00000000  00000000  00136220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000035d0  00000000  00000000  00136cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008170 	.word	0x08008170

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008170 	.word	0x08008170

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	9405      	str	r4, [sp, #20]
 8000ff4:	9406      	str	r4, [sp, #24]
 8000ff6:	9407      	str	r4, [sp, #28]
 8000ff8:	9408      	str	r4, [sp, #32]
 8000ffa:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	9400      	str	r4, [sp, #0]
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <MX_GPIO_Init+0x114>)
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f042 0210 	orr.w	r2, r2, #16
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f002 0210 	and.w	r2, r2, #16
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	9401      	str	r4, [sp, #4]
 8001014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001016:	f042 0204 	orr.w	r2, r2, #4
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
 800101c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101e:	f002 0204 	and.w	r2, r2, #4
 8001022:	9201      	str	r2, [sp, #4]
 8001024:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	9402      	str	r4, [sp, #8]
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	9403      	str	r4, [sp, #12]
 800103c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001046:	f002 0201 	and.w	r2, r2, #1
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	9404      	str	r4, [sp, #16]
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001052:	f042 0202 	orr.w	r2, r2, #2
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	9304      	str	r3, [sp, #16]
 8001060:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin, GPIO_PIN_SET);
 8001062:	4f28      	ldr	r7, [pc, #160]	; (8001104 <MX_GPIO_Init+0x118>)
 8001064:	2201      	movs	r2, #1
 8001066:	21c0      	movs	r1, #192	; 0xc0
 8001068:	4638      	mov	r0, r7
 800106a:	f001 fa1a 	bl	80024a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 800106e:	4e26      	ldr	r6, [pc, #152]	; (8001108 <MX_GPIO_Init+0x11c>)
 8001070:	4622      	mov	r2, r4
 8001072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001076:	4630      	mov	r0, r6
 8001078:	f001 fa13 	bl	80024a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_0_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin;
 800107c:	2318      	movs	r3, #24
 800107e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001080:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001084:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2501      	movs	r5, #1
 8001088:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	a905      	add	r1, sp, #20
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <MX_GPIO_Init+0x120>)
 800108e:	f001 f917 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	a905      	add	r1, sp, #20
 800109e:	4638      	mov	r0, r7
 80010a0:	f001 f90e 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_PENIRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 80010a4:	2320      	movs	r3, #32
 80010a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010a8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 80010b0:	a905      	add	r1, sp, #20
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <MX_GPIO_Init+0x124>)
 80010b4:	f001 f904 	bl	80022c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_CS_Pin */
  GPIO_InitStruct.Pin = XPT2046_CS_Pin;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(XPT2046_CS_GPIO_Port, &GPIO_InitStruct);
 80010c4:	a905      	add	r1, sp, #20
 80010c6:	4630      	mov	r0, r6
 80010c8:	f001 f8fa 	bl	80022c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010cc:	4622      	mov	r2, r4
 80010ce:	4621      	mov	r1, r4
 80010d0:	2009      	movs	r0, #9
 80010d2:	f001 f88b 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010d6:	2009      	movs	r0, #9
 80010d8:	f001 f8bc 	bl	8002254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010dc:	4622      	mov	r2, r4
 80010de:	4621      	mov	r1, r4
 80010e0:	200a      	movs	r0, #10
 80010e2:	f001 f883 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f001 f8b4 	bl	8002254 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ec:	4622      	mov	r2, r4
 80010ee:	4621      	mov	r1, r4
 80010f0:	2017      	movs	r0, #23
 80010f2:	f001 f87b 	bl	80021ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010f6:	2017      	movs	r0, #23
 80010f8:	f001 f8ac 	bl	8002254 <HAL_NVIC_EnableIRQ>

}
 80010fc:	b00b      	add	sp, #44	; 0x2c
 80010fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40021000 	.word	0x40021000
 8001110:	40020800 	.word	0x40020800

08001114 <XPT2046_clearCalibrationData>:
}

/**
 * Сброс калибровки тача на условно заводские настройки - в зависимости от предзаводских испытаний - менять по усмотрению
 **/
void XPT2046_clearCalibrationData(){
 8001114:	b470      	push	{r4, r5, r6}
	_referencePoints[POINT_CENTER].xADC = 2048;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <XPT2046_clearCalibrationData+0x5c>)
 8001118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111c:	609a      	str	r2, [r3, #8]
	_referencePoints[POINT_CENTER].yADC = 2048;
 800111e:	60da      	str	r2, [r3, #12]
	_referencePoints[POINT_CENTER].xDisplay = _displayLeft+_displayWidth/2;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <XPT2046_clearCalibrationData+0x60>)
 8001122:	f9b2 6000 	ldrsh.w	r6, [r2]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <XPT2046_clearCalibrationData+0x64>)
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	eb06 0152 	add.w	r1, r6, r2, lsr #1
 800112e:	6019      	str	r1, [r3, #0]
	_referencePoints[POINT_CENTER].yDisplay = _displayBottom+_displayHeight/2;
 8001130:	4912      	ldr	r1, [pc, #72]	; (800117c <XPT2046_clearCalibrationData+0x68>)
 8001132:	f9b1 0000 	ldrsh.w	r0, [r1]
 8001136:	4912      	ldr	r1, [pc, #72]	; (8001180 <XPT2046_clearCalibrationData+0x6c>)
 8001138:	8809      	ldrh	r1, [r1, #0]
 800113a:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 800113e:	605c      	str	r4, [r3, #4]

	_referencePoints[POINT_TOPLEFT].xADC = 0;
 8001140:	2400      	movs	r4, #0
 8001142:	619c      	str	r4, [r3, #24]
	_referencePoints[POINT_TOPLEFT].yADC = 4095;
 8001144:	f640 75ff 	movw	r5, #4095	; 0xfff
 8001148:	61dd      	str	r5, [r3, #28]
	_referencePoints[POINT_TOPLEFT].xDisplay = _displayLeft;
 800114a:	611e      	str	r6, [r3, #16]
	_referencePoints[POINT_TOPLEFT].yDisplay = _displayBottom+_displayHeight;
 800114c:	4401      	add	r1, r0
 800114e:	6159      	str	r1, [r3, #20]

	_referencePoints[POINT_TOPRIGHT].xADC = 4095;
 8001150:	629d      	str	r5, [r3, #40]	; 0x28
	_referencePoints[POINT_TOPRIGHT].yADC = 4095;
 8001152:	62dd      	str	r5, [r3, #44]	; 0x2c
	_referencePoints[POINT_TOPRIGHT].xDisplay = _displayLeft+_displayWidth;
 8001154:	4432      	add	r2, r6
 8001156:	621a      	str	r2, [r3, #32]
	_referencePoints[POINT_TOPRIGHT].yDisplay = _displayBottom+_displayHeight;
 8001158:	6259      	str	r1, [r3, #36]	; 0x24

	_referencePoints[POINT_BOTTOMLEFT].xADC = 0;
 800115a:	639c      	str	r4, [r3, #56]	; 0x38
	_referencePoints[POINT_BOTTOMLEFT].yADC = 0;
 800115c:	63dc      	str	r4, [r3, #60]	; 0x3c
	_referencePoints[POINT_BOTTOMLEFT].xDisplay = _displayLeft;
 800115e:	631e      	str	r6, [r3, #48]	; 0x30
	_referencePoints[POINT_BOTTOMLEFT].yDisplay = _displayBottom;
 8001160:	6358      	str	r0, [r3, #52]	; 0x34

	_referencePoints[POINT_BOTTOMRIGHT].xADC = 4095;
 8001162:	649d      	str	r5, [r3, #72]	; 0x48
	_referencePoints[POINT_BOTTOMRIGHT].yADC = 0;
 8001164:	64dc      	str	r4, [r3, #76]	; 0x4c
	_referencePoints[POINT_BOTTOMRIGHT].xDisplay = _displayLeft+_displayWidth;
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
	_referencePoints[POINT_BOTTOMRIGHT].yDisplay = _displayBottom;
 8001168:	6458      	str	r0, [r3, #68]	; 0x44

}
 800116a:	bc70      	pop	{r4, r5, r6}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000500 	.word	0x20000500
 8001174:	20000570 	.word	0x20000570
 8001178:	20000558 	.word	0x20000558
 800117c:	20000578 	.word	0x20000578
 8001180:	20000572 	.word	0x20000572

08001184 <XPT2046_pointToScreen>:
    	XPT2046_Wait(100);
    }
}
/*Пересчет координат */
void XPT2046_pointToScreen(){
	_xDisplay = _displayLeft + (_xRawFiltered-_xRawOnZeroPoint)/_xStep;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <XPT2046_pointToScreen+0x84>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	ee07 3a10 	vmov	s14, r3
 800118e:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <XPT2046_pointToScreen+0x88>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <XPT2046_pointToScreen+0x8c>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <XPT2046_pointToScreen+0x90>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <XPT2046_pointToScreen+0x94>)
 80011be:	ee17 2a90 	vmov	r2, s15
 80011c2:	801a      	strh	r2, [r3, #0]
	_yDisplay = _displayBottom + (_yRawFiltered-_yRawOnZeroPoint)/_yStep;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <XPT2046_pointToScreen+0x98>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	ee07 3a10 	vmov	s14, r3
 80011ce:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <XPT2046_pointToScreen+0x9c>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <XPT2046_pointToScreen+0xa0>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <XPT2046_pointToScreen+0xa4>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <XPT2046_pointToScreen+0xa8>)
 80011fe:	ee17 2a90 	vmov	r2, s15
 8001202:	801a      	strh	r2, [r3, #0]
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000580 	.word	0x20000580
 800120c:	200004ec 	.word	0x200004ec
 8001210:	20000584 	.word	0x20000584
 8001214:	20000570 	.word	0x20000570
 8001218:	200004e0 	.word	0x200004e0
 800121c:	200004fa 	.word	0x200004fa
 8001220:	200004f4 	.word	0x200004f4
 8001224:	2000058c 	.word	0x2000058c
 8001228:	20000578 	.word	0x20000578
 800122c:	2000057a 	.word	0x2000057a

08001230 <XPT2046_updateCalibrationParameters>:
		_referencePoints[pointIndex].yADC = yADC;
	}
}
/*На основании данных калибровочных точек определяем коэфициенты*/
uint8_t XPT2046_updateCalibrationParameters(){
	_xStep = (float)((_XBRT -_XTLT)+(_XTRT - _XBLT))/ (float)((_XBRS - _XTLS)+(_XTRS - _XBLS));
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <XPT2046_updateCalibrationParameters+0xd0>)
 8001232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001234:	6999      	ldr	r1, [r3, #24]
 8001236:	1a52      	subs	r2, r2, r1
 8001238:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800123a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800123c:	1a09      	subs	r1, r1, r0
 800123e:	440a      	add	r2, r1
 8001240:	ee07 2a90 	vmov	s15, r2
 8001244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124a:	6919      	ldr	r1, [r3, #16]
 800124c:	1a52      	subs	r2, r2, r1
 800124e:	6a19      	ldr	r1, [r3, #32]
 8001250:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001252:	1a09      	subs	r1, r1, r0
 8001254:	440a      	add	r2, r1
 8001256:	ee07 2a90 	vmov	s15, r2
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <XPT2046_updateCalibrationParameters+0xd4>)
 8001264:	ed82 6a00 	vstr	s12, [r2]
	_yStep = (float)((_YTLT - _YBRT)+(_YTRT - _YBLT))/ (float)((_YTLS - _YBRS)+(_YTRS - _YBLS));
 8001268:	69da      	ldr	r2, [r3, #28]
 800126a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800126c:	1a52      	subs	r2, r2, r1
 800126e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001270:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001272:	1a09      	subs	r1, r1, r0
 8001274:	440a      	add	r2, r1
 8001276:	ee07 2a90 	vmov	s15, r2
 800127a:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001282:	1a52      	subs	r2, r2, r1
 8001284:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001286:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001288:	1a09      	subs	r1, r1, r0
 800128a:	440a      	add	r2, r1
 800128c:	ee07 2a90 	vmov	s15, r2
 8001290:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001294:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <XPT2046_updateCalibrationParameters+0xd8>)
 800129a:	edc2 4a00 	vstr	s9, [r2]
	_xRawOnZeroPoint = (_XCT-(_xStep * (_XCS-_displayLeft)));
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	491a      	ldr	r1, [pc, #104]	; (800130c <XPT2046_updateCalibrationParameters+0xdc>)
 80012a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012a6:	1a52      	subs	r2, r2, r1
 80012a8:	ee06 2a90 	vmov	s13, r2
 80012ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80012b0:	ee26 6a86 	vmul.f32	s12, s13, s12
 80012b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80012c0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <XPT2046_updateCalibrationParameters+0xe0>)
 80012c6:	ee16 1a90 	vmov	r1, s13
 80012ca:	8011      	strh	r1, [r2, #0]
	_yRawOnZeroPoint = (_YCT-(_yStep * (_YCS-_displayBottom)));
 80012cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <XPT2046_updateCalibrationParameters+0xe4>)
 80012d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	ee07 3a10 	vmov	s14, r3
 80012de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012e2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <XPT2046_updateCalibrationParameters+0xe8>)
 80012f4:	ee17 2a90 	vmov	r2, s15
 80012f8:	801a      	strh	r2, [r3, #0]

	return XPT2046_OK;
}
 80012fa:	2000      	movs	r0, #0
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000500 	.word	0x20000500
 8001304:	20000584 	.word	0x20000584
 8001308:	2000058c 	.word	0x2000058c
 800130c:	20000570 	.word	0x20000570
 8001310:	20000580 	.word	0x20000580
 8001314:	20000578 	.word	0x20000578
 8001318:	200004fa 	.word	0x200004fa

0800131c <XPT2046_Select>:
void XPT2046_Select(){
 800131c:	b508      	push	{r3, lr}
HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4801      	ldr	r0, [pc, #4]	; (800132c <XPT2046_Select+0x10>)
 8001326:	f001 f8bc 	bl	80024a2 <HAL_GPIO_WritePin>
}
 800132a:	bd08      	pop	{r3, pc}
 800132c:	40020400 	.word	0x40020400

08001330 <XPT2046_Deselect>:
void XPT2046_Deselect(){
 8001330:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4801      	ldr	r0, [pc, #4]	; (8001340 <XPT2046_Deselect+0x10>)
 800133a:	f001 f8b2 	bl	80024a2 <HAL_GPIO_WritePin>
}
 800133e:	bd08      	pop	{r3, pc}
 8001340:	40020400 	.word	0x40020400

08001344 <XPT2046_SPI_send>:
void XPT2046_SPI_send(uint8_t data) {
 8001344:	b500      	push	{lr}
 8001346:	b083      	sub	sp, #12
 8001348:	f88d 0007 	strb.w	r0, [sp, #7]
	 	 HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001350:	2201      	movs	r2, #1
 8001352:	f10d 0107 	add.w	r1, sp, #7
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <XPT2046_SPI_send+0x20>)
 8001358:	f002 f8c1 	bl	80034de <HAL_SPI_Transmit>
}
 800135c:	b003      	add	sp, #12
 800135e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001362:	bf00      	nop
 8001364:	20000424 	.word	0x20000424

08001368 <XPT2046_SPI_Transmit_Receive>:
void XPT2046_SPI_Transmit_Receive(uint8_t data_in, uint16_t *data_out) {
 8001368:	b530      	push	{r4, r5, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	460c      	mov	r4, r1
 800136e:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t data[2] = {0,0};
 8001372:	2300      	movs	r3, #0
 8001374:	f8ad 3014 	strh.w	r3, [sp, #20]
	HAL_SPI_Transmit(&hspi2, &data_in, 1, HAL_MAX_DELAY);
 8001378:	4d0d      	ldr	r5, [pc, #52]	; (80013b0 <XPT2046_SPI_Transmit_Receive+0x48>)
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	2201      	movs	r2, #1
 8001380:	f10d 010f 	add.w	r1, sp, #15
 8001384:	4628      	mov	r0, r5
 8001386:	f002 f8aa 	bl	80034de <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)zeroes_tx, data, 2, 1000);
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	aa05      	add	r2, sp, #20
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <XPT2046_SPI_Transmit_Receive+0x4c>)
 8001396:	4628      	mov	r0, r5
 8001398:	f002 f978 	bl	800368c <HAL_SPI_TransmitReceive>
	datatmp =  data[0] * 256 + data[1];
 800139c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80013a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80013a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	*data_out = datatmp;
 80013a8:	8023      	strh	r3, [r4, #0]
}
 80013aa:	b007      	add	sp, #28
 80013ac:	bd30      	pop	{r4, r5, pc}
 80013ae:	bf00      	nop
 80013b0:	20000424 	.word	0x20000424
 80013b4:	080087b8 	.word	0x080087b8

080013b8 <XPT2046_SingleScan>:
uint16_t XPT2046_SingleScan(uint8_t coord){
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	4604      	mov	r4, r0
	XPT2046_Select();
 80013be:	f7ff ffad 	bl	800131c <XPT2046_Select>
	XPT2046_SPI_Transmit_Receive(CONTROL_STARTBIT |coord, &res);
 80013c2:	f10d 0106 	add.w	r1, sp, #6
 80013c6:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80013ca:	f7ff ffcd 	bl	8001368 <XPT2046_SPI_Transmit_Receive>
	XPT2046_Deselect();
 80013ce:	f7ff ffaf 	bl	8001330 <XPT2046_Deselect>
	res >>= 3;
 80013d2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80013d6:	08c0      	lsrs	r0, r0, #3
 80013d8:	b002      	add	sp, #8
 80013da:	bd10      	pop	{r4, pc}

080013dc <XPT2046_Wait>:
void XPT2046_Wait(uint32_t timeout){
 80013dc:	b508      	push	{r3, lr}
	HAL_Delay(timeout);
 80013de:	f000 fedf 	bl	80021a0 <HAL_Delay>
}
 80013e2:	bd08      	pop	{r3, pc}

080013e4 <XPT2046_GetTick>:
uint32_t XPT2046_GetTick(){
 80013e4:	b508      	push	{r3, lr}
 return	HAL_GetTick();
 80013e6:	f000 fed5 	bl	8002194 <HAL_GetTick>
}
 80013ea:	bd08      	pop	{r3, pc}

080013ec <XPT2046_PEN_STILL_Interrupt_Callback>:
void XPT2046_PEN_STILL_Interrupt_Callback() {
 80013ec:	b508      	push	{r3, lr}
	_endTouchTickMS = XPT2046_GetTick();
 80013ee:	f7ff fff9 	bl	80013e4 <XPT2046_GetTick>
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <XPT2046_PEN_STILL_Interrupt_Callback+0x18>)
 80013f4:	6018      	str	r0, [r3, #0]
	_lastTouchDuration = _endTouchTickMS - _startTouchTickMS;
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <XPT2046_PEN_STILL_Interrupt_Callback+0x1c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <XPT2046_PEN_STILL_Interrupt_Callback+0x20>)
 80013fe:	6018      	str	r0, [r3, #0]
}
 8001400:	bd08      	pop	{r3, pc}
 8001402:	bf00      	nop
 8001404:	200004fc 	.word	0x200004fc
 8001408:	200004e8 	.word	0x200004e8
 800140c:	2000057c 	.word	0x2000057c

08001410 <XPT2046_GetIRQPinState>:
{
 8001410:	b508      	push	{r3, lr}
	return HAL_GPIO_ReadPin(TOUCH_PENIRQ_GPIO_Port, TOUCH_PENIRQ_Pin);
 8001412:	2120      	movs	r1, #32
 8001414:	4801      	ldr	r0, [pc, #4]	; (800141c <XPT2046_GetIRQPinState+0xc>)
 8001416:	f001 f83d 	bl	8002494 <HAL_GPIO_ReadPin>
}
 800141a:	bd08      	pop	{r3, pc}
 800141c:	40020800 	.word	0x40020800

08001420 <XPT2046_Enable_Interrupt>:
void XPT2046_Enable_Interrupt() {
 8001420:	b508      	push	{r3, lr}
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001422:	2017      	movs	r0, #23
 8001424:	f000 ff16 	bl	8002254 <HAL_NVIC_EnableIRQ>
}
 8001428:	bd08      	pop	{r3, pc}
	...

0800142c <XPT2046_init>:
void XPT2046_init(uint16_t displayWidth, uint16_t displayHeight, int16_t displayLeft, int16_t displayBottom) {
 800142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142e:	4605      	mov	r5, r0
 8001430:	460c      	mov	r4, r1
 8001432:	4616      	mov	r6, r2
 8001434:	461f      	mov	r7, r3
	XPT2046_Wait(100);
 8001436:	2064      	movs	r0, #100	; 0x64
 8001438:	f7ff ffd0 	bl	80013dc <XPT2046_Wait>
	_displayBottom = displayBottom;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <XPT2046_init+0x54>)
 800143e:	801f      	strh	r7, [r3, #0]
	_displayLeft = displayLeft;
 8001440:	4b10      	ldr	r3, [pc, #64]	; (8001484 <XPT2046_init+0x58>)
 8001442:	801e      	strh	r6, [r3, #0]
	_displayWidth = displayWidth;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <XPT2046_init+0x5c>)
 8001446:	801d      	strh	r5, [r3, #0]
	_displayHeight = displayHeight;
 8001448:	4b10      	ldr	r3, [pc, #64]	; (800148c <XPT2046_init+0x60>)
 800144a:	801c      	strh	r4, [r3, #0]
	_typeOfPoint = -1;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <XPT2046_init+0x64>)
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	701a      	strb	r2, [r3, #0]
	_isWaiting = 0;
 8001452:	2400      	movs	r4, #0
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <XPT2046_init+0x68>)
 8001456:	701c      	strb	r4, [r3, #0]
	XPT2046_Select();
 8001458:	f7ff ff60 	bl	800131c <XPT2046_Select>
	XPT2046_SPI_send(CONTROL_STARTBIT);
 800145c:	2080      	movs	r0, #128	; 0x80
 800145e:	f7ff ff71 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_SPI_send(0);
 8001462:	4620      	mov	r0, r4
 8001464:	f7ff ff6e 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_SPI_send(0x00);
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff ff6b 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_Deselect();
 800146e:	f7ff ff5f 	bl	8001330 <XPT2046_Deselect>
	XPT2046_Wait(1000);
 8001472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001476:	f7ff ffb1 	bl	80013dc <XPT2046_Wait>
	XPT2046_Enable_Interrupt();
 800147a:	f7ff ffd1 	bl	8001420 <XPT2046_Enable_Interrupt>
}
 800147e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001480:	20000578 	.word	0x20000578
 8001484:	20000570 	.word	0x20000570
 8001488:	20000558 	.word	0x20000558
 800148c:	20000572 	.word	0x20000572
 8001490:	20000480 	.word	0x20000480
 8001494:	20000208 	.word	0x20000208

08001498 <XPT2046_Disable_Interrupt>:
void XPT2046_Disable_Interrupt() {
 8001498:	b508      	push	{r3, lr}
   HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800149a:	2017      	movs	r0, #23
 800149c:	f000 fee8 	bl	8002270 <HAL_NVIC_DisableIRQ>
}
 80014a0:	bd08      	pop	{r3, pc}
	...

080014a4 <touch_Pressed>:
void touch_Pressed(uint16_t x, uint16_t y) {
 80014a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014a8:	b083      	sub	sp, #12
 80014aa:	4607      	mov	r7, r0
 80014ac:	460e      	mov	r6, r1
	ssd1306_Clear();
 80014ae:	f000 fc2b 	bl	8001d08 <ssd1306_Clear>
	ssd1306_SetColor(White);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 fb4c 	bl	8001b50 <ssd1306_SetColor>
	ssd1306_SetCursor(0, 0);
 80014b8:	2100      	movs	r1, #0
 80014ba:	4608      	mov	r0, r1
 80014bc:	f000 fc16 	bl	8001cec <ssd1306_SetCursor>
	sprintf(status,"%f;%f",_z1RawFiltered,_pressure); // Замеры координаты X в пикселях экрана и усредненный результат замера
 80014c0:	4b25      	ldr	r3, [pc, #148]	; (8001558 <touch_Pressed+0xb4>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	4680      	mov	r8, r0
 80014ca:	4689      	mov	r9, r1
 80014cc:	4c23      	ldr	r4, [pc, #140]	; (800155c <touch_Pressed+0xb8>)
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <touch_Pressed+0xbc>)
 80014d0:	6818      	ldr	r0, [r3, #0]
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	e9cd 0100 	strd	r0, r1, [sp]
 80014da:	4642      	mov	r2, r8
 80014dc:	464b      	mov	r3, r9
 80014de:	4921      	ldr	r1, [pc, #132]	; (8001564 <touch_Pressed+0xc0>)
 80014e0:	4620      	mov	r0, r4
 80014e2:	f003 f8a1 	bl	8004628 <siprintf>
	ssd1306_WriteString(status, Font_7x8);
 80014e6:	4d20      	ldr	r5, [pc, #128]	; (8001568 <touch_Pressed+0xc4>)
 80014e8:	e895 0006 	ldmia.w	r5, {r1, r2}
 80014ec:	4620      	mov	r0, r4
 80014ee:	f000 fbe7 	bl	8001cc0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 9);
 80014f2:	2109      	movs	r1, #9
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 fbf9 	bl	8001cec <ssd1306_SetCursor>
	sprintf(status,"X %4i (%f)",x,_xRawFiltered); // Замеры координаты X в пикселях экрана и усредненный результат замера
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <touch_Pressed+0xc8>)
 80014fc:	6818      	ldr	r0, [r3, #0]
 80014fe:	f7ff f823 	bl	8000548 <__aeabi_f2d>
 8001502:	e9cd 0100 	strd	r0, r1, [sp]
 8001506:	463a      	mov	r2, r7
 8001508:	4919      	ldr	r1, [pc, #100]	; (8001570 <touch_Pressed+0xcc>)
 800150a:	4620      	mov	r0, r4
 800150c:	f003 f88c 	bl	8004628 <siprintf>
	ssd1306_WriteString(status, Font_7x8);
 8001510:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001514:	4620      	mov	r0, r4
 8001516:	f000 fbd3 	bl	8001cc0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 800151a:	2112      	movs	r1, #18
 800151c:	2000      	movs	r0, #0
 800151e:	f000 fbe5 	bl	8001cec <ssd1306_SetCursor>
    sprintf(status,"Y %4i (%f)",y,_yRawFiltered); // Замеры координаты Y в пикселях экрана и усредненный результат замера
 8001522:	4b14      	ldr	r3, [pc, #80]	; (8001574 <touch_Pressed+0xd0>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f7ff f80f 	bl	8000548 <__aeabi_f2d>
 800152a:	e9cd 0100 	strd	r0, r1, [sp]
 800152e:	4632      	mov	r2, r6
 8001530:	4911      	ldr	r1, [pc, #68]	; (8001578 <touch_Pressed+0xd4>)
 8001532:	4620      	mov	r0, r4
 8001534:	f003 f878 	bl	8004628 <siprintf>
    ssd1306_WriteString(status, Font_7x8);
 8001538:	e895 0006 	ldmia.w	r5, {r1, r2}
 800153c:	4620      	mov	r0, r4
 800153e:	f000 fbbf 	bl	8001cc0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001542:	f000 fb0b 	bl	8001b5c <ssd1306_UpdateScreen>
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET); //Зажигаем контрольный светодиод
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <touch_Pressed+0xd8>)
 800154c:	f000 ffa9 	bl	80024a2 <HAL_GPIO_WritePin>
}
 8001550:	b003      	add	sp, #12
 8001552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001556:	bf00      	nop
 8001558:	20000574 	.word	0x20000574
 800155c:	20000590 	.word	0x20000590
 8001560:	20000568 	.word	0x20000568
 8001564:	08008778 	.word	0x08008778
 8001568:	20000000 	.word	0x20000000
 800156c:	200004ec 	.word	0x200004ec
 8001570:	08008780 	.word	0x08008780
 8001574:	200004f4 	.word	0x200004f4
 8001578:	0800878c 	.word	0x0800878c
 800157c:	40020000 	.word	0x40020000

08001580 <XPT2046_PEN_DOWN_Interrupt_Callback>:
void XPT2046_PEN_DOWN_Interrupt_Callback(){
 8001580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001584:	ed2d 8b04 	vpush	{d8-d9}
	XPT2046_Disable_Interrupt();
 8001588:	f7ff ff86 	bl	8001498 <XPT2046_Disable_Interrupt>
	_startTouchTickMS = XPT2046_GetTick();
 800158c:	f7ff ff2a 	bl	80013e4 <XPT2046_GetTick>
 8001590:	4ba3      	ldr	r3, [pc, #652]	; (8001820 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2a0>)
 8001592:	6018      	str	r0, [r3, #0]
	_isWaiting = 0;
 8001594:	4ba3      	ldr	r3, [pc, #652]	; (8001824 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2a4>)
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
	_xRawFiltered = 0.0;
 800159a:	2300      	movs	r3, #0
 800159c:	4aa2      	ldr	r2, [pc, #648]	; (8001828 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2a8>)
 800159e:	6013      	str	r3, [r2, #0]
	_yRawFiltered = 0.0;
 80015a0:	4aa2      	ldr	r2, [pc, #648]	; (800182c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2ac>)
 80015a2:	6013      	str	r3, [r2, #0]
	_z1RawFiltered = 0.0;
 80015a4:	4aa2      	ldr	r2, [pc, #648]	; (8001830 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b0>)
 80015a6:	6013      	str	r3, [r2, #0]
	_z2RawFiltered = 0.0;
 80015a8:	4aa2      	ldr	r2, [pc, #648]	; (8001834 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b4>)
 80015aa:	6013      	str	r3, [r2, #0]
	uint16_t maxScans = 140;
 80015ac:	248c      	movs	r4, #140	; 0x8c
	while(maxScans > 0){
 80015ae:	2c00      	cmp	r4, #0
 80015b0:	f000 80d4 	beq.w	800175c <XPT2046_PEN_DOWN_Interrupt_Callback+0x1dc>
	maxScans--;
 80015b4:	3c01      	subs	r4, #1
 80015b6:	b2a4      	uxth	r4, r4
	_xRaw =  XPT2046_SingleScan(CONTROL_CHANNEL_X);
 80015b8:	2050      	movs	r0, #80	; 0x50
 80015ba:	f7ff fefd 	bl	80013b8 <XPT2046_SingleScan>
 80015be:	4e9e      	ldr	r6, [pc, #632]	; (8001838 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b8>)
 80015c0:	8030      	strh	r0, [r6, #0]
	_yRaw =  XPT2046_SingleScan(CONTROL_CHANNEL_Y);
 80015c2:	2010      	movs	r0, #16
 80015c4:	f7ff fef8 	bl	80013b8 <XPT2046_SingleScan>
 80015c8:	4b9c      	ldr	r3, [pc, #624]	; (800183c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2bc>)
 80015ca:	8018      	strh	r0, [r3, #0]
	_z1Raw = XPT2046_SingleScan(CONTROL_CHANNEL_Z1);
 80015cc:	2030      	movs	r0, #48	; 0x30
 80015ce:	f7ff fef3 	bl	80013b8 <XPT2046_SingleScan>
 80015d2:	4b9b      	ldr	r3, [pc, #620]	; (8001840 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2c0>)
 80015d4:	8018      	strh	r0, [r3, #0]
	_z2Raw = XPT2046_SingleScan(CONTROL_CHANNEL_Z2);
 80015d6:	2040      	movs	r0, #64	; 0x40
 80015d8:	f7ff feee 	bl	80013b8 <XPT2046_SingleScan>
 80015dc:	4605      	mov	r5, r0
 80015de:	4b99      	ldr	r3, [pc, #612]	; (8001844 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2c4>)
 80015e0:	8018      	strh	r0, [r3, #0]
	if (_xRaw > 0 && _yRaw > 0 && _xRaw < 4096 && _yRaw < 4096)
 80015e2:	8836      	ldrh	r6, [r6, #0]
 80015e4:	2e00      	cmp	r6, #0
 80015e6:	d0e2      	beq.n	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015e8:	4b94      	ldr	r3, [pc, #592]	; (800183c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2bc>)
 80015ea:	881f      	ldrh	r7, [r3, #0]
 80015ec:	2f00      	cmp	r7, #0
 80015ee:	d0de      	beq.n	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015f0:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80015f4:	d2db      	bcs.n	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015f6:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80015fa:	d2d8      	bcs.n	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
	_xRawFiltered = _xRawFiltered*0.98 + _xRaw	*0.02;
 80015fc:	f8df a228 	ldr.w	sl, [pc, #552]	; 8001828 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2a8>
 8001600:	f8da 0000 	ldr.w	r0, [sl]
 8001604:	f7fe ffa0 	bl	8000548 <__aeabi_f2d>
 8001608:	a381      	add	r3, pc, #516	; (adr r3, 8001810 <XPT2046_PEN_DOWN_Interrupt_Callback+0x290>)
 800160a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160e:	f7fe fff3 	bl	80005f8 <__aeabi_dmul>
 8001612:	4680      	mov	r8, r0
 8001614:	4689      	mov	r9, r1
 8001616:	4630      	mov	r0, r6
 8001618:	f7fe ff84 	bl	8000524 <__aeabi_i2d>
 800161c:	a37e      	add	r3, pc, #504	; (adr r3, 8001818 <XPT2046_PEN_DOWN_Interrupt_Callback+0x298>)
 800161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001622:	f7fe ffe9 	bl	80005f8 <__aeabi_dmul>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4640      	mov	r0, r8
 800162c:	4649      	mov	r1, r9
 800162e:	f7fe fe2d 	bl	800028c <__adddf3>
 8001632:	f7ff fad9 	bl	8000be8 <__aeabi_d2f>
 8001636:	ee08 0a10 	vmov	s16, r0
 800163a:	f8ca 0000 	str.w	r0, [sl]
	_yRawFiltered = _yRawFiltered*0.98 + _yRaw	*0.02;
 800163e:	4e7b      	ldr	r6, [pc, #492]	; (800182c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2ac>)
 8001640:	6830      	ldr	r0, [r6, #0]
 8001642:	f7fe ff81 	bl	8000548 <__aeabi_f2d>
 8001646:	a372      	add	r3, pc, #456	; (adr r3, 8001810 <XPT2046_PEN_DOWN_Interrupt_Callback+0x290>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe ffd4 	bl	80005f8 <__aeabi_dmul>
 8001650:	4680      	mov	r8, r0
 8001652:	4689      	mov	r9, r1
 8001654:	4638      	mov	r0, r7
 8001656:	f7fe ff65 	bl	8000524 <__aeabi_i2d>
 800165a:	a36f      	add	r3, pc, #444	; (adr r3, 8001818 <XPT2046_PEN_DOWN_Interrupt_Callback+0x298>)
 800165c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001660:	f7fe ffca 	bl	80005f8 <__aeabi_dmul>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	4640      	mov	r0, r8
 800166a:	4649      	mov	r1, r9
 800166c:	f7fe fe0e 	bl	800028c <__adddf3>
 8001670:	f7ff faba 	bl	8000be8 <__aeabi_d2f>
 8001674:	ee08 0a90 	vmov	s17, r0
 8001678:	6030      	str	r0, [r6, #0]
	_z1RawFiltered = _z1RawFiltered*0.98 + _z1Raw*0.02;
 800167a:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8001830 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b0>
 800167e:	f8d8 0000 	ldr.w	r0, [r8]
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	a362      	add	r3, pc, #392	; (adr r3, 8001810 <XPT2046_PEN_DOWN_Interrupt_Callback+0x290>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffb4 	bl	80005f8 <__aeabi_dmul>
 8001690:	4606      	mov	r6, r0
 8001692:	460f      	mov	r7, r1
 8001694:	4b6a      	ldr	r3, [pc, #424]	; (8001840 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2c0>)
 8001696:	8818      	ldrh	r0, [r3, #0]
 8001698:	f7fe ff44 	bl	8000524 <__aeabi_i2d>
 800169c:	a35e      	add	r3, pc, #376	; (adr r3, 8001818 <XPT2046_PEN_DOWN_Interrupt_Callback+0x298>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe ffa9 	bl	80005f8 <__aeabi_dmul>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4630      	mov	r0, r6
 80016ac:	4639      	mov	r1, r7
 80016ae:	f7fe fded 	bl	800028c <__adddf3>
 80016b2:	f7ff fa99 	bl	8000be8 <__aeabi_d2f>
 80016b6:	ee09 0a10 	vmov	s18, r0
 80016ba:	f8c8 0000 	str.w	r0, [r8]
	_z2RawFiltered = _z2RawFiltered*0.98 + _z2Raw*0.02;
 80016be:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001834 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b4>
 80016c2:	f8d8 0000 	ldr.w	r0, [r8]
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	a351      	add	r3, pc, #324	; (adr r3, 8001810 <XPT2046_PEN_DOWN_Interrupt_Callback+0x290>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ff92 	bl	80005f8 <__aeabi_dmul>
 80016d4:	4606      	mov	r6, r0
 80016d6:	460f      	mov	r7, r1
 80016d8:	4628      	mov	r0, r5
 80016da:	f7fe ff23 	bl	8000524 <__aeabi_i2d>
 80016de:	a34e      	add	r3, pc, #312	; (adr r3, 8001818 <XPT2046_PEN_DOWN_Interrupt_Callback+0x298>)
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	f7fe ff88 	bl	80005f8 <__aeabi_dmul>
 80016e8:	4602      	mov	r2, r0
 80016ea:	460b      	mov	r3, r1
 80016ec:	4630      	mov	r0, r6
 80016ee:	4639      	mov	r1, r7
 80016f0:	f7fe fdcc 	bl	800028c <__adddf3>
 80016f4:	f7ff fa78 	bl	8000be8 <__aeabi_d2f>
 80016f8:	ee07 0a90 	vmov	s15, r0
 80016fc:	f8c8 0000 	str.w	r0, [r8]
	_deltaX=_xRawFiltered - _xRawFilteredOld;
 8001700:	4b51      	ldr	r3, [pc, #324]	; (8001848 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2c8>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	ee38 8a47 	vsub.f32	s16, s16, s14
 800170a:	4b50      	ldr	r3, [pc, #320]	; (800184c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2cc>)
 800170c:	ed83 8a00 	vstr	s16, [r3]
	_deltaY=_yRawFiltered - _yRawFilteredOld;
 8001710:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2d0>)
 8001712:	ed93 7a00 	vldr	s14, [r3]
 8001716:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2d4>)
 800171c:	edc3 8a00 	vstr	s17, [r3]
	_deltaZ1=_z1RawFiltered - _z1RawFilteredOld;
 8001720:	4b4d      	ldr	r3, [pc, #308]	; (8001858 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2d8>)
 8001722:	ed93 7a00 	vldr	s14, [r3]
 8001726:	ee39 9a47 	vsub.f32	s18, s18, s14
 800172a:	4b4c      	ldr	r3, [pc, #304]	; (800185c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2dc>)
 800172c:	ed83 9a00 	vstr	s18, [r3]
	_deltaZ2=_z2RawFiltered - _z2RawFilteredOld;
 8001730:	4b4b      	ldr	r3, [pc, #300]	; (8001860 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e0>)
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800173a:	4b4a      	ldr	r3, [pc, #296]	; (8001864 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e4>)
 800173c:	edc3 7a00 	vstr	s15, [r3]
	if (_deltaX < 1.0 && _deltaY < 1.0) // pointFix
 8001740:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001744:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174c:	f57f af2f 	bpl.w	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 8001750:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001758:	f57f af29 	bpl.w	80015ae <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
	_pressure = (_xRawFiltered/4096.0)*(_z2RawFiltered/_z1RawFiltered -1);
 800175c:	4b32      	ldr	r3, [pc, #200]	; (8001828 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2a8>)
 800175e:	681e      	ldr	r6, [r3, #0]
 8001760:	4630      	mov	r0, r6
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	2200      	movs	r2, #0
 8001768:	4b3f      	ldr	r3, [pc, #252]	; (8001868 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e8>)
 800176a:	f7fe ff45 	bl	80005f8 <__aeabi_dmul>
 800176e:	4604      	mov	r4, r0
 8001770:	460d      	mov	r5, r1
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b4>)
 8001774:	edd3 6a00 	vldr	s13, [r3]
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2b0>)
 800177a:	edd3 7a00 	vldr	s15, [r3]
 800177e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001782:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	ee17 0a90 	vmov	r0, s15
 800178e:	f7fe fedb 	bl	8000548 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7fe ff2d 	bl	80005f8 <__aeabi_dmul>
 800179e:	f7ff fa23 	bl	8000be8 <__aeabi_d2f>
 80017a2:	ee07 0a90 	vmov	s15, r0
 80017a6:	4b31      	ldr	r3, [pc, #196]	; (800186c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2ec>)
 80017a8:	6018      	str	r0, [r3, #0]
	if ((_pressure < 2.5)
 80017aa:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	d519      	bpl.n	80017ec <XPT2046_PEN_DOWN_Interrupt_Callback+0x26c>
		if (_typeOfPoint == POINT_USER){
 80017b8:	4b2d      	ldr	r3, [pc, #180]	; (8001870 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2f0>)
 80017ba:	f993 1000 	ldrsb.w	r1, [r3]
 80017be:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 80017c2:	d019      	beq.n	80017f8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x278>
			_referencePoints[_typeOfPoint].xADC = (uint16_t) _xRawFiltered;
 80017c4:	ee07 6a90 	vmov	s15, r6
 80017c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017cc:	ee17 3a90 	vmov	r3, s15
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4a28      	ldr	r2, [pc, #160]	; (8001874 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2f4>)
 80017d4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80017d8:	6093      	str	r3, [r2, #8]
			_referencePoints[_typeOfPoint].yADC = (uint16_t) _yRawFiltered;
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2ac>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e4:	ee17 3a90 	vmov	r3, s15
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	60d3      	str	r3, [r2, #12]
	XPT2046_Enable_Interrupt();
 80017ec:	f7ff fe18 	bl	8001420 <XPT2046_Enable_Interrupt>
}
 80017f0:	ecbd 8b04 	vpop	{d8-d9}
 80017f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			XPT2046_pointToScreen();
 80017f8:	f7ff fcc4 	bl	8001184 <XPT2046_pointToScreen>
			touch_Pressed(_xDisplay, _yDisplay);
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2f8>)
 80017fe:	8819      	ldrh	r1, [r3, #0]
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <XPT2046_PEN_DOWN_Interrupt_Callback+0x2fc>)
 8001802:	8818      	ldrh	r0, [r3, #0]
 8001804:	f7ff fe4e 	bl	80014a4 <touch_Pressed>
 8001808:	e7f0      	b.n	80017ec <XPT2046_PEN_DOWN_Interrupt_Callback+0x26c>
 800180a:	bf00      	nop
 800180c:	f3af 8000 	nop.w
 8001810:	f5c28f5c 	.word	0xf5c28f5c
 8001814:	3fef5c28 	.word	0x3fef5c28
 8001818:	47ae147b 	.word	0x47ae147b
 800181c:	3f947ae1 	.word	0x3f947ae1
 8001820:	200004e8 	.word	0x200004e8
 8001824:	20000208 	.word	0x20000208
 8001828:	200004ec 	.word	0x200004ec
 800182c:	200004f4 	.word	0x200004f4
 8001830:	20000574 	.word	0x20000574
 8001834:	20000550 	.word	0x20000550
 8001838:	20000420 	.word	0x20000420
 800183c:	200004f8 	.word	0x200004f8
 8001840:	20000588 	.word	0x20000588
 8001844:	200004f0 	.word	0x200004f0
 8001848:	20000564 	.word	0x20000564
 800184c:	200005d0 	.word	0x200005d0
 8001850:	2000055c 	.word	0x2000055c
 8001854:	2000056c 	.word	0x2000056c
 8001858:	2000047c 	.word	0x2000047c
 800185c:	20000484 	.word	0x20000484
 8001860:	200004e4 	.word	0x200004e4
 8001864:	20000554 	.word	0x20000554
 8001868:	3f300000 	.word	0x3f300000
 800186c:	20000568 	.word	0x20000568
 8001870:	20000480 	.word	0x20000480
 8001874:	20000500 	.word	0x20000500
 8001878:	2000057a 	.word	0x2000057a
 800187c:	200004e0 	.word	0x200004e0

08001880 <touch_Released>:
void touch_Released(uint32_t duration) {
 8001880:	b510      	push	{r4, lr}
 8001882:	4602      	mov	r2, r0
	sprintf(status,"released, %08ld\n", duration);
 8001884:	4c0d      	ldr	r4, [pc, #52]	; (80018bc <touch_Released+0x3c>)
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <touch_Released+0x40>)
 8001888:	4620      	mov	r0, r4
 800188a:	f002 fecd 	bl	8004628 <siprintf>
	ssd1306_Clear();
 800188e:	f000 fa3b 	bl	8001d08 <ssd1306_Clear>
	ssd1306_SetColor(White);
 8001892:	2001      	movs	r0, #1
 8001894:	f000 f95c 	bl	8001b50 <ssd1306_SetColor>
    ssd1306_SetCursor(0, 0);
 8001898:	2100      	movs	r1, #0
 800189a:	4608      	mov	r0, r1
 800189c:	f000 fa26 	bl	8001cec <ssd1306_SetCursor>
    ssd1306_WriteString(status, Font_7x8);
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <touch_Released+0x44>)
 80018a2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80018a6:	4620      	mov	r0, r4
 80018a8:	f000 fa0a 	bl	8001cc0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80018ac:	f000 f956 	bl	8001b5c <ssd1306_UpdateScreen>
	HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET); //Гасим контрольный светодиод
 80018b0:	2201      	movs	r2, #1
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	4804      	ldr	r0, [pc, #16]	; (80018c8 <touch_Released+0x48>)
 80018b6:	f000 fdf4 	bl	80024a2 <HAL_GPIO_WritePin>
}
 80018ba:	bd10      	pop	{r4, pc}
 80018bc:	20000590 	.word	0x20000590
 80018c0:	08008798 	.word	0x08008798
 80018c4:	20000000 	.word	0x20000000
 80018c8:	40020000 	.word	0x40020000

080018cc <XPT2046_PEN_UP_Interrupt_Callback>:
void XPT2046_PEN_UP_Interrupt_Callback(){
 80018cc:	b508      	push	{r3, lr}
	_endTouchTickMS = XPT2046_GetTick();
 80018ce:	f7ff fd89 	bl	80013e4 <XPT2046_GetTick>
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <XPT2046_PEN_UP_Interrupt_Callback+0x1c>)
 80018d4:	6018      	str	r0, [r3, #0]
	_lastTouchDuration = _endTouchTickMS - _startTouchTickMS;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <XPT2046_PEN_UP_Interrupt_Callback+0x20>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	1ac0      	subs	r0, r0, r3
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <XPT2046_PEN_UP_Interrupt_Callback+0x24>)
 80018de:	6018      	str	r0, [r3, #0]
	touch_Released(_lastTouchDuration);
 80018e0:	f7ff ffce 	bl	8001880 <touch_Released>
}
 80018e4:	bd08      	pop	{r3, pc}
 80018e6:	bf00      	nop
 80018e8:	200004fc 	.word	0x200004fc
 80018ec:	200004e8 	.word	0x200004e8
 80018f0:	2000057c 	.word	0x2000057c

080018f4 <XPT2046_unified_Interrupt_Callback>:
uint32_t XPT2046_GetTouchPressDuration(){
  return XPT2046_GetTick() - _startTouchTickMS;
}

void XPT2046_unified_Interrupt_Callback(GPIO_PinState IRQPinStatus, uint32_t IRQMomentTick){
 80018f4:	b508      	push	{r3, lr}
	if (IRQPinStatus) {
 80018f6:	b948      	cbnz	r0, 800190c <XPT2046_unified_Interrupt_Callback+0x18>
			if (!XPT2046_GetIRQPinState()) {
				XPT2046_PEN_UP_Interrupt_Callback();
			}
		}
	} else {
		_fallTick = IRQMomentTick;
 80018f8:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <XPT2046_unified_Interrupt_Callback+0x30>)
 80018fa:	6019      	str	r1, [r3, #0]
		if (_fallTick - _riseTick > 50){
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <XPT2046_unified_Interrupt_Callback+0x34>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	1ac9      	subs	r1, r1, r3
 8001902:	2932      	cmp	r1, #50	; 0x32
 8001904:	d90b      	bls.n	800191e <XPT2046_unified_Interrupt_Callback+0x2a>
			XPT2046_PEN_DOWN_Interrupt_Callback();
 8001906:	f7ff fe3b 	bl	8001580 <XPT2046_PEN_DOWN_Interrupt_Callback>
		} else {
			XPT2046_PEN_STILL_Interrupt_Callback();
		}
	}
}
 800190a:	bd08      	pop	{r3, pc}
		_riseTick = IRQMomentTick;
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <XPT2046_unified_Interrupt_Callback+0x34>)
 800190e:	6019      	str	r1, [r3, #0]
			if (!XPT2046_GetIRQPinState()) {
 8001910:	f7ff fd7e 	bl	8001410 <XPT2046_GetIRQPinState>
 8001914:	2800      	cmp	r0, #0
 8001916:	d1f8      	bne.n	800190a <XPT2046_unified_Interrupt_Callback+0x16>
				XPT2046_PEN_UP_Interrupt_Callback();
 8001918:	f7ff ffd8 	bl	80018cc <XPT2046_PEN_UP_Interrupt_Callback>
 800191c:	e7f5      	b.n	800190a <XPT2046_unified_Interrupt_Callback+0x16>
			XPT2046_PEN_STILL_Interrupt_Callback();
 800191e:	f7ff fd65 	bl	80013ec <XPT2046_PEN_STILL_Interrupt_Callback>
}
 8001922:	e7f2      	b.n	800190a <XPT2046_unified_Interrupt_Callback+0x16>
 8001924:	200004dc 	.word	0x200004dc
 8001928:	20000560 	.word	0x20000560

0800192c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192e:	e7fe      	b.n	800192e <Error_Handler+0x2>

08001930 <MX_SPI2_Init>:
{
 8001930:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001932:	480d      	ldr	r0, [pc, #52]	; (8001968 <MX_SPI2_Init+0x38>)
 8001934:	4b0d      	ldr	r3, [pc, #52]	; (800196c <MX_SPI2_Init+0x3c>)
 8001936:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001938:	f44f 7382 	mov.w	r3, #260	; 0x104
 800193c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800193e:	2300      	movs	r3, #0
 8001940:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001942:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001944:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001946:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001948:	f44f 7200 	mov.w	r2, #512	; 0x200
 800194c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800194e:	2228      	movs	r2, #40	; 0x28
 8001950:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001952:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001954:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001956:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001958:	230a      	movs	r3, #10
 800195a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800195c:	f001 fd60 	bl	8003420 <HAL_SPI_Init>
 8001960:	b900      	cbnz	r0, 8001964 <MX_SPI2_Init+0x34>
}
 8001962:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001964:	f7ff ffe2 	bl	800192c <Error_Handler>
 8001968:	20000424 	.word	0x20000424
 800196c:	40003800 	.word	0x40003800

08001970 <MX_I2C2_Init>:
{
 8001970:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <MX_I2C2_Init+0x30>)
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_I2C2_Init+0x34>)
 8001976:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001978:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_I2C2_Init+0x38>)
 800197a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800197c:	2300      	movs	r3, #0
 800197e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 120;
 8001980:	2278      	movs	r2, #120	; 0x78
 8001982:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001984:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001988:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800198c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800198e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001994:	f000 ff0c 	bl	80027b0 <HAL_I2C_Init>
 8001998:	b900      	cbnz	r0, 800199c <MX_I2C2_Init+0x2c>
}
 800199a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800199c:	f7ff ffc6 	bl	800192c <Error_Handler>
 80019a0:	20000488 	.word	0x20000488
 80019a4:	40005800 	.word	0x40005800
 80019a8:	00061a80 	.word	0x00061a80

080019ac <SystemClock_Config>:
{
 80019ac:	b500      	push	{lr}
 80019ae:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b0:	2230      	movs	r2, #48	; 0x30
 80019b2:	2100      	movs	r1, #0
 80019b4:	a808      	add	r0, sp, #32
 80019b6:	f001 ffaf 	bl	8003918 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019ba:	2300      	movs	r3, #0
 80019bc:	9303      	str	r3, [sp, #12]
 80019be:	9304      	str	r3, [sp, #16]
 80019c0:	9305      	str	r3, [sp, #20]
 80019c2:	9306      	str	r3, [sp, #24]
 80019c4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	9301      	str	r3, [sp, #4]
 80019c8:	4a21      	ldr	r2, [pc, #132]	; (8001a50 <SystemClock_Config+0xa4>)
 80019ca:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80019cc:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80019d0:	6411      	str	r1, [r2, #64]	; 0x40
 80019d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019d4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80019d8:	9201      	str	r2, [sp, #4]
 80019da:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019dc:	9302      	str	r3, [sp, #8]
 80019de:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <SystemClock_Config+0xa8>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019f2:	2301      	movs	r3, #1
 80019f4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019fa:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019fc:	2302      	movs	r3, #2
 80019fe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a00:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a04:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a06:	2204      	movs	r2, #4
 8001a08:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a0a:	22a8      	movs	r2, #168	; 0xa8
 8001a0c:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a0e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a10:	2307      	movs	r3, #7
 8001a12:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a14:	a808      	add	r0, sp, #32
 8001a16:	f001 f925 	bl	8002c64 <HAL_RCC_OscConfig>
 8001a1a:	b9a8      	cbnz	r0, 8001a48 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a1c:	230f      	movs	r3, #15
 8001a1e:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a20:	2302      	movs	r3, #2
 8001a22:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a2c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a32:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a34:	2105      	movs	r1, #5
 8001a36:	a803      	add	r0, sp, #12
 8001a38:	f001 fb7c 	bl	8003134 <HAL_RCC_ClockConfig>
 8001a3c:	b930      	cbnz	r0, 8001a4c <SystemClock_Config+0xa0>
  HAL_RCC_EnableCSS();
 8001a3e:	f001 fb0d 	bl	800305c <HAL_RCC_EnableCSS>
}
 8001a42:	b015      	add	sp, #84	; 0x54
 8001a44:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001a48:	f7ff ff70 	bl	800192c <Error_Handler>
    Error_Handler();
 8001a4c:	f7ff ff6e 	bl	800192c <Error_Handler>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <main>:
{
 8001a58:	b508      	push	{r3, lr}
  HAL_Init();
 8001a5a:	f000 fb75 	bl	8002148 <HAL_Init>
  SystemClock_Config();
 8001a5e:	f7ff ffa5 	bl	80019ac <SystemClock_Config>
  MX_GPIO_Init();
 8001a62:	f7ff fac3 	bl	8000fec <MX_GPIO_Init>
  MX_SPI2_Init();
 8001a66:	f7ff ff63 	bl	8001930 <MX_SPI2_Init>
  MX_I2C2_Init();
 8001a6a:	f7ff ff81 	bl	8001970 <MX_I2C2_Init>
  HAL_Delay(500);
 8001a6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a72:	f000 fb95 	bl	80021a0 <HAL_Delay>
  ssd1306_Init();
 8001a76:	f000 f951 	bl	8001d1c <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 8001a7a:	f000 f93d 	bl	8001cf8 <ssd1306_FlipScreenVertically>
  ssd1306_UpdateScreen();
 8001a7e:	f000 f86d 	bl	8001b5c <ssd1306_UpdateScreen>
  sprintf(status,"connected");
 8001a82:	4c17      	ldr	r4, [pc, #92]	; (8001ae0 <main+0x88>)
 8001a84:	4b17      	ldr	r3, [pc, #92]	; (8001ae4 <main+0x8c>)
 8001a86:	cb03      	ldmia	r3!, {r0, r1}
 8001a88:	6020      	str	r0, [r4, #0]
 8001a8a:	6061      	str	r1, [r4, #4]
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	8123      	strh	r3, [r4, #8]
  ssd1306_Clear();
 8001a90:	f000 f93a 	bl	8001d08 <ssd1306_Clear>
      ssd1306_SetColor(White);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f000 f85b 	bl	8001b50 <ssd1306_SetColor>
      ssd1306_SetCursor(0, 0);
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4608      	mov	r0, r1
 8001a9e:	f000 f925 	bl	8001cec <ssd1306_SetCursor>
      ssd1306_WriteString(status, Font_7x8);
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <main+0x90>)
 8001aa4:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f000 f909 	bl	8001cc0 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 8001aae:	f000 f855 	bl	8001b5c <ssd1306_UpdateScreen>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001ab2:	2017      	movs	r0, #23
 8001ab4:	f000 fbdc 	bl	8002270 <HAL_NVIC_DisableIRQ>
  XPT2046_init(800, 480, 0,0); //инициализируем либу тача размером дисплея
 8001ab8:	2300      	movs	r3, #0
 8001aba:	461a      	mov	r2, r3
 8001abc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001ac0:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ac4:	f7ff fcb2 	bl	800142c <XPT2046_init>
  XPT2046_clearCalibrationData(); //трём старые данные калибровки
 8001ac8:	f7ff fb24 	bl	8001114 <XPT2046_clearCalibrationData>
  XPT2046_updateCalibrationParameters();
 8001acc:	f7ff fbb0 	bl	8001230 <XPT2046_updateCalibrationParameters>
	  HAL_Delay(50);
 8001ad0:	2032      	movs	r0, #50	; 0x32
 8001ad2:	f000 fb65 	bl	80021a0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <main+0x94>)
 8001ada:	f000 fce8 	bl	80024ae <HAL_GPIO_TogglePin>
   while (1)
 8001ade:	e7f7      	b.n	8001ad0 <main+0x78>
 8001ae0:	20000590 	.word	0x20000590
 8001ae4:	080087ac 	.word	0x080087ac
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	40020000 	.word	0x40020000

08001af0 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 8001af0:	2080      	movs	r0, #128	; 0x80
 8001af2:	4770      	bx	lr

08001af4 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8001af4:	2020      	movs	r0, #32
 8001af6:	4770      	bx	lr

08001af8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 8001af8:	b500      	push	{lr}
 8001afa:	b087      	sub	sp, #28
 8001afc:	f88d 0017 	strb.w	r0, [sp, #23]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8001b00:	230a      	movs	r3, #10
 8001b02:	9302      	str	r3, [sp, #8]
 8001b04:	2301      	movs	r3, #1
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	f10d 0217 	add.w	r2, sp, #23
 8001b0c:	9200      	str	r2, [sp, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2178      	movs	r1, #120	; 0x78
 8001b12:	4803      	ldr	r0, [pc, #12]	; (8001b20 <ssd1306_WriteCommand+0x28>)
 8001b14:	f000 ff2a 	bl	800296c <HAL_I2C_Mem_Write>
#endif
}
 8001b18:	b007      	add	sp, #28
 8001b1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b1e:	bf00      	nop
 8001b20:	20000488 	.word	0x20000488

08001b24 <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8001b24:	b500      	push	{lr}
 8001b26:	b085      	sub	sp, #20
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001b28:	2364      	movs	r3, #100	; 0x64
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	9101      	str	r1, [sp, #4]
 8001b2e:	9000      	str	r0, [sp, #0]
 8001b30:	2301      	movs	r3, #1
 8001b32:	2240      	movs	r2, #64	; 0x40
 8001b34:	2178      	movs	r1, #120	; 0x78
 8001b36:	4803      	ldr	r0, [pc, #12]	; (8001b44 <ssd1306_WriteData+0x20>)
 8001b38:	f000 ff18 	bl	800296c <HAL_I2C_Mem_Write>
#endif
}
 8001b3c:	b005      	add	sp, #20
 8001b3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b42:	bf00      	nop
 8001b44:	20000488 	.word	0x20000488

08001b48 <ssd1306_GetWidth>:
}
 8001b48:	2080      	movs	r0, #128	; 0x80
 8001b4a:	4770      	bx	lr

08001b4c <ssd1306_GetHeight>:
}
 8001b4c:	2020      	movs	r0, #32
 8001b4e:	4770      	bx	lr

08001b50 <ssd1306_SetColor>:
	SSD1306.Color = color;
 8001b50:	4b01      	ldr	r3, [pc, #4]	; (8001b58 <ssd1306_SetColor+0x8>)
 8001b52:	7158      	strb	r0, [r3, #5]
}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2000020c 	.word	0x2000020c

08001b5c <ssd1306_UpdateScreen>:
{
 8001b5c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < 8; i++)
 8001b5e:	2400      	movs	r4, #0
 8001b60:	e014      	b.n	8001b8c <ssd1306_UpdateScreen+0x30>
		ssd1306_WriteCommand(0xB0 + i);
 8001b62:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001b66:	b2c0      	uxtb	r0, r0
 8001b68:	f7ff ffc6 	bl	8001af8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f7ff ffc3 	bl	8001af8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001b72:	2010      	movs	r0, #16
 8001b74:	f7ff ffc0 	bl	8001af8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001b78:	01e5      	lsls	r5, r4, #7
 8001b7a:	f7ff ffb9 	bl	8001af0 <width>
 8001b7e:	4601      	mov	r1, r0
 8001b80:	4804      	ldr	r0, [pc, #16]	; (8001b94 <ssd1306_UpdateScreen+0x38>)
 8001b82:	4428      	add	r0, r5
 8001b84:	f7ff ffce 	bl	8001b24 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8001b88:	3401      	adds	r4, #1
 8001b8a:	b2e4      	uxtb	r4, r4
 8001b8c:	2c07      	cmp	r4, #7
 8001b8e:	d9e8      	bls.n	8001b62 <ssd1306_UpdateScreen+0x6>
}
 8001b90:	bd38      	pop	{r3, r4, r5, pc}
 8001b92:	bf00      	nop
 8001b94:	20000214 	.word	0x20000214

08001b98 <ssd1306_DrawPixel>:
{
 8001b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9a:	4605      	mov	r5, r0
 8001b9c:	460c      	mov	r4, r1
	SSD1306_COLOR color = SSD1306.Color;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <ssd1306_DrawPixel+0x68>)
 8001ba0:	795f      	ldrb	r7, [r3, #5]
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001ba2:	b286      	uxth	r6, r0
 8001ba4:	f7ff ffd0 	bl	8001b48 <ssd1306_GetWidth>
 8001ba8:	4286      	cmp	r6, r0
 8001baa:	d21a      	bcs.n	8001be2 <ssd1306_DrawPixel+0x4a>
 8001bac:	b2a6      	uxth	r6, r4
 8001bae:	f7ff ffcd 	bl	8001b4c <ssd1306_GetHeight>
 8001bb2:	4286      	cmp	r6, r0
 8001bb4:	d215      	bcs.n	8001be2 <ssd1306_DrawPixel+0x4a>
	if (SSD1306.Inverted)
 8001bb6:	4b12      	ldr	r3, [pc, #72]	; (8001c00 <ssd1306_DrawPixel+0x68>)
 8001bb8:	791b      	ldrb	r3, [r3, #4]
 8001bba:	b113      	cbz	r3, 8001bc2 <ssd1306_DrawPixel+0x2a>
		color = (SSD1306_COLOR) !color;
 8001bbc:	fab7 f787 	clz	r7, r7
 8001bc0:	097f      	lsrs	r7, r7, #5
	if (color == White)
 8001bc2:	2f01      	cmp	r7, #1
 8001bc4:	d00e      	beq.n	8001be4 <ssd1306_DrawPixel+0x4c>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001bc6:	f7ff ff93 	bl	8001af0 <width>
 8001bca:	08e3      	lsrs	r3, r4, #3
 8001bcc:	fb00 5503 	mla	r5, r0, r3, r5
 8001bd0:	f004 0407 	and.w	r4, r4, #7
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	40a1      	lsls	r1, r4
 8001bd8:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <ssd1306_DrawPixel+0x6c>)
 8001bda:	5d5c      	ldrb	r4, [r3, r5]
 8001bdc:	ea24 0401 	bic.w	r4, r4, r1
 8001be0:	555c      	strb	r4, [r3, r5]
}
 8001be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001be4:	f7ff ff84 	bl	8001af0 <width>
 8001be8:	08e3      	lsrs	r3, r4, #3
 8001bea:	fb00 5503 	mla	r5, r0, r3, r5
 8001bee:	f004 0407 	and.w	r4, r4, #7
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	40a1      	lsls	r1, r4
 8001bf6:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <ssd1306_DrawPixel+0x6c>)
 8001bf8:	5d5c      	ldrb	r4, [r3, r5]
 8001bfa:	430c      	orrs	r4, r1
 8001bfc:	555c      	strb	r4, [r3, r5]
 8001bfe:	e7f0      	b.n	8001be2 <ssd1306_DrawPixel+0x4a>
 8001c00:	2000020c 	.word	0x2000020c
 8001c04:	20000214 	.word	0x20000214

08001c08 <ssd1306_WriteChar>:
{
 8001c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	4681      	mov	r9, r0
 8001c10:	ab02      	add	r3, sp, #8
 8001c12:	e903 0006 	stmdb	r3, {r1, r2}
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c16:	f7ff ff6b 	bl	8001af0 <width>
 8001c1a:	4b28      	ldr	r3, [pc, #160]	; (8001cbc <ssd1306_WriteChar+0xb4>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	f89d 7000 	ldrb.w	r7, [sp]
 8001c22:	443b      	add	r3, r7
 8001c24:	4298      	cmp	r0, r3
 8001c26:	dd44      	ble.n	8001cb2 <ssd1306_WriteChar+0xaa>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001c28:	f7ff ff64 	bl	8001af4 <height>
 8001c2c:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <ssd1306_WriteChar+0xb4>)
 8001c2e:	885b      	ldrh	r3, [r3, #2]
 8001c30:	f89d a001 	ldrb.w	sl, [sp, #1]
 8001c34:	46d3      	mov	fp, sl
 8001c36:	4453      	add	r3, sl
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001c38:	4298      	cmp	r0, r3
 8001c3a:	dd3c      	ble.n	8001cb6 <ssd1306_WriteChar+0xae>
	for (i = 0; i < Font.FontHeight; i++)
 8001c3c:	2600      	movs	r6, #0
 8001c3e:	e025      	b.n	8001c8c <ssd1306_WriteChar+0x84>
				SSD1306.Color = !SSD1306.Color;
 8001c40:	4d1e      	ldr	r5, [pc, #120]	; (8001cbc <ssd1306_WriteChar+0xb4>)
 8001c42:	796b      	ldrb	r3, [r5, #5]
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	716b      	strb	r3, [r5, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001c4c:	8828      	ldrh	r0, [r5, #0]
 8001c4e:	8869      	ldrh	r1, [r5, #2]
 8001c50:	4431      	add	r1, r6
 8001c52:	4420      	add	r0, r4
 8001c54:	b2c9      	uxtb	r1, r1
 8001c56:	b2c0      	uxtb	r0, r0
 8001c58:	f7ff ff9e 	bl	8001b98 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001c5c:	796b      	ldrb	r3, [r5, #5]
 8001c5e:	fab3 f383 	clz	r3, r3
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	716b      	strb	r3, [r5, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001c66:	3401      	adds	r4, #1
 8001c68:	42a7      	cmp	r7, r4
 8001c6a:	d90e      	bls.n	8001c8a <ssd1306_WriteChar+0x82>
			if ((b << j) & 0x8000)
 8001c6c:	fa08 f304 	lsl.w	r3, r8, r4
 8001c70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001c74:	d0e4      	beq.n	8001c40 <ssd1306_WriteChar+0x38>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <ssd1306_WriteChar+0xb4>)
 8001c78:	8818      	ldrh	r0, [r3, #0]
 8001c7a:	8859      	ldrh	r1, [r3, #2]
 8001c7c:	4431      	add	r1, r6
 8001c7e:	4420      	add	r0, r4
 8001c80:	b2c9      	uxtb	r1, r1
 8001c82:	b2c0      	uxtb	r0, r0
 8001c84:	f7ff ff88 	bl	8001b98 <ssd1306_DrawPixel>
 8001c88:	e7ed      	b.n	8001c66 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001c8a:	3601      	adds	r6, #1
 8001c8c:	45b2      	cmp	sl, r6
 8001c8e:	d908      	bls.n	8001ca2 <ssd1306_WriteChar+0x9a>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c90:	f1a9 0320 	sub.w	r3, r9, #32
 8001c94:	fb03 630b 	mla	r3, r3, fp, r6
 8001c98:	9a01      	ldr	r2, [sp, #4]
 8001c9a:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font.FontWidth; j++)
 8001c9e:	2400      	movs	r4, #0
 8001ca0:	e7e2      	b.n	8001c68 <ssd1306_WriteChar+0x60>
	SSD1306.CurrentX += Font.FontWidth;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <ssd1306_WriteChar+0xb4>)
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	4417      	add	r7, r2
 8001ca8:	801f      	strh	r7, [r3, #0]
	return ch;
 8001caa:	4648      	mov	r0, r9
}
 8001cac:	b003      	add	sp, #12
 8001cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	e7fa      	b.n	8001cac <ssd1306_WriteChar+0xa4>
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	e7f8      	b.n	8001cac <ssd1306_WriteChar+0xa4>
 8001cba:	bf00      	nop
 8001cbc:	2000020c 	.word	0x2000020c

08001cc0 <ssd1306_WriteString>:
{
 8001cc0:	b510      	push	{r4, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	ab02      	add	r3, sp, #8
 8001cc8:	e903 0006 	stmdb	r3, {r1, r2}
	while (*str)
 8001ccc:	7820      	ldrb	r0, [r4, #0]
 8001cce:	b150      	cbz	r0, 8001ce6 <ssd1306_WriteString+0x26>
		if (ssd1306_WriteChar(*str, Font) != *str)
 8001cd0:	ab02      	add	r3, sp, #8
 8001cd2:	e913 0006 	ldmdb	r3, {r1, r2}
 8001cd6:	f7ff ff97 	bl	8001c08 <ssd1306_WriteChar>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	7820      	ldrb	r0, [r4, #0]
 8001cde:	4283      	cmp	r3, r0
 8001ce0:	d101      	bne.n	8001ce6 <ssd1306_WriteString+0x26>
		str++;
 8001ce2:	3401      	adds	r4, #1
 8001ce4:	e7f2      	b.n	8001ccc <ssd1306_WriteString+0xc>
}
 8001ce6:	b002      	add	sp, #8
 8001ce8:	bd10      	pop	{r4, pc}
	...

08001cec <ssd1306_SetCursor>:
	SSD1306.CurrentX = x;
 8001cec:	4b01      	ldr	r3, [pc, #4]	; (8001cf4 <ssd1306_SetCursor+0x8>)
 8001cee:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001cf0:	8059      	strh	r1, [r3, #2]
}
 8001cf2:	4770      	bx	lr
 8001cf4:	2000020c 	.word	0x2000020c

08001cf8 <ssd1306_FlipScreenVertically>:
{
 8001cf8:	b508      	push	{r3, lr}
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001cfa:	20a1      	movs	r0, #161	; 0xa1
 8001cfc:	f7ff fefc 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8001d00:	20c8      	movs	r0, #200	; 0xc8
 8001d02:	f7ff fef9 	bl	8001af8 <ssd1306_WriteCommand>
}
 8001d06:	bd08      	pop	{r3, pc}

08001d08 <ssd1306_Clear>:
{
 8001d08:	b508      	push	{r3, lr}
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4801      	ldr	r0, [pc, #4]	; (8001d18 <ssd1306_Clear+0x10>)
 8001d12:	f001 fe01 	bl	8003918 <memset>
}
 8001d16:	bd08      	pop	{r3, pc}
 8001d18:	20000214 	.word	0x20000214

08001d1c <ssd1306_Init>:
{
 8001d1c:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d22:	2205      	movs	r2, #5
 8001d24:	2178      	movs	r1, #120	; 0x78
 8001d26:	483e      	ldr	r0, [pc, #248]	; (8001e20 <ssd1306_Init+0x104>)
 8001d28:	f000 fed2 	bl	8002ad0 <HAL_I2C_IsDeviceReady>
 8001d2c:	b118      	cbz	r0, 8001d36 <ssd1306_Init+0x1a>
		SSD1306.Initialized = 0;
 8001d2e:	2000      	movs	r0, #0
 8001d30:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <ssd1306_Init+0x108>)
 8001d32:	7198      	strb	r0, [r3, #6]
}
 8001d34:	bd10      	pop	{r4, pc}
	HAL_Delay(100);
 8001d36:	2064      	movs	r0, #100	; 0x64
 8001d38:	f000 fa32 	bl	80021a0 <HAL_Delay>
	ssd1306_WriteCommand(DISPLAYOFF);
 8001d3c:	20ae      	movs	r0, #174	; 0xae
 8001d3e:	f7ff fedb 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8001d42:	20d5      	movs	r0, #213	; 0xd5
 8001d44:	f7ff fed8 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001d48:	20f0      	movs	r0, #240	; 0xf0
 8001d4a:	f7ff fed5 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001d4e:	20a8      	movs	r0, #168	; 0xa8
 8001d50:	f7ff fed2 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8001d54:	f7ff fece 	bl	8001af4 <height>
 8001d58:	3801      	subs	r0, #1
 8001d5a:	b2c0      	uxtb	r0, r0
 8001d5c:	f7ff fecc 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8001d60:	20d3      	movs	r0, #211	; 0xd3
 8001d62:	f7ff fec9 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff fec6 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8001d6c:	2040      	movs	r0, #64	; 0x40
 8001d6e:	f7ff fec3 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001d72:	208d      	movs	r0, #141	; 0x8d
 8001d74:	f7ff fec0 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001d78:	2014      	movs	r0, #20
 8001d7a:	f7ff febd 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8001d7e:	2020      	movs	r0, #32
 8001d80:	f7ff feba 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001d84:	2000      	movs	r0, #0
 8001d86:	f7ff feb7 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001d8a:	20a0      	movs	r0, #160	; 0xa0
 8001d8c:	f7ff feb4 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8001d90:	20c0      	movs	r0, #192	; 0xc0
 8001d92:	f7ff feb1 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8001d96:	20da      	movs	r0, #218	; 0xda
 8001d98:	f7ff feae 	bl	8001af8 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <ssd1306_Init+0x10c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b36b      	cbz	r3, 8001dfe <ssd1306_Init+0xe2>
	else if (display_geometry == GEOMETRY_128_32)
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d02f      	beq.n	8001e06 <ssd1306_Init+0xea>
	ssd1306_WriteCommand(SETCONTRAST);
 8001da6:	2081      	movs	r0, #129	; 0x81
 8001da8:	f7ff fea6 	bl	8001af8 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <ssd1306_Init+0x10c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	b36b      	cbz	r3, 8001e0e <ssd1306_Init+0xf2>
	else if (display_geometry == GEOMETRY_128_32)
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d02f      	beq.n	8001e16 <ssd1306_Init+0xfa>
	ssd1306_WriteCommand(SETPRECHARGE);
 8001db6:	20d9      	movs	r0, #217	; 0xd9
 8001db8:	f7ff fe9e 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8001dbc:	20f1      	movs	r0, #241	; 0xf1
 8001dbe:	f7ff fe9b 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8001dc2:	20db      	movs	r0, #219	; 0xdb
 8001dc4:	f7ff fe98 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8001dc8:	2040      	movs	r0, #64	; 0x40
 8001dca:	f7ff fe95 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001dce:	20a4      	movs	r0, #164	; 0xa4
 8001dd0:	f7ff fe92 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8001dd4:	20a6      	movs	r0, #166	; 0xa6
 8001dd6:	f7ff fe8f 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001dda:	202e      	movs	r0, #46	; 0x2e
 8001ddc:	f7ff fe8c 	bl	8001af8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001de0:	20af      	movs	r0, #175	; 0xaf
 8001de2:	f7ff fe89 	bl	8001af8 <ssd1306_WriteCommand>
	SSD1306.CurrentX = 0;
 8001de6:	4c0f      	ldr	r4, [pc, #60]	; (8001e24 <ssd1306_Init+0x108>)
 8001de8:	2300      	movs	r3, #0
 8001dea:	8023      	strh	r3, [r4, #0]
	SSD1306.CurrentY = 0;
 8001dec:	8063      	strh	r3, [r4, #2]
	SSD1306.Color = Black;
 8001dee:	7163      	strb	r3, [r4, #5]
	ssd1306_Clear();
 8001df0:	f7ff ff8a 	bl	8001d08 <ssd1306_Clear>
	ssd1306_UpdateScreen();
 8001df4:	f7ff feb2 	bl	8001b5c <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001df8:	2001      	movs	r0, #1
 8001dfa:	71a0      	strb	r0, [r4, #6]
	return 1;
 8001dfc:	e79a      	b.n	8001d34 <ssd1306_Init+0x18>
	  ssd1306_WriteCommand(0x12);
 8001dfe:	2012      	movs	r0, #18
 8001e00:	f7ff fe7a 	bl	8001af8 <ssd1306_WriteCommand>
 8001e04:	e7cf      	b.n	8001da6 <ssd1306_Init+0x8a>
	  ssd1306_WriteCommand(0x02);
 8001e06:	2002      	movs	r0, #2
 8001e08:	f7ff fe76 	bl	8001af8 <ssd1306_WriteCommand>
 8001e0c:	e7cb      	b.n	8001da6 <ssd1306_Init+0x8a>
	  ssd1306_WriteCommand(0xCF);
 8001e0e:	20cf      	movs	r0, #207	; 0xcf
 8001e10:	f7ff fe72 	bl	8001af8 <ssd1306_WriteCommand>
 8001e14:	e7cf      	b.n	8001db6 <ssd1306_Init+0x9a>
	  ssd1306_WriteCommand(0x8F);
 8001e16:	208f      	movs	r0, #143	; 0x8f
 8001e18:	f7ff fe6e 	bl	8001af8 <ssd1306_WriteCommand>
 8001e1c:	e7cb      	b.n	8001db6 <ssd1306_Init+0x9a>
 8001e1e:	bf00      	nop
 8001e20:	20000488 	.word	0x20000488
 8001e24:	2000020c 	.word	0x2000020c
 8001e28:	20000008 	.word	0x20000008

08001e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e2c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2100      	movs	r1, #0
 8001e30:	9100      	str	r1, [sp, #0]
 8001e32:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_MspInit+0x34>)
 8001e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e3e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e42:	9200      	str	r2, [sp, #0]
 8001e44:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	9101      	str	r1, [sp, #4]
 8001e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e4e:	641a      	str	r2, [r3, #64]	; 0x40
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	9301      	str	r3, [sp, #4]
 8001e58:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e5a:	b002      	add	sp, #8
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800

08001e64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e64:	b530      	push	{r4, r5, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9303      	str	r3, [sp, #12]
 8001e6c:	9304      	str	r3, [sp, #16]
 8001e6e:	9305      	str	r3, [sp, #20]
 8001e70:	9306      	str	r3, [sp, #24]
 8001e72:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001e74:	6802      	ldr	r2, [r0, #0]
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_I2C_MspInit+0x68>)
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e7c:	b009      	add	sp, #36	; 0x24
 8001e7e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e80:	2500      	movs	r5, #0
 8001e82:	9501      	str	r5, [sp, #4]
 8001e84:	4c12      	ldr	r4, [pc, #72]	; (8001ed0 <HAL_I2C_MspInit+0x6c>)
 8001e86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e88:	f043 0302 	orr.w	r3, r3, #2
 8001e8c:	6323      	str	r3, [r4, #48]	; 0x30
 8001e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e98:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9e:	2312      	movs	r3, #18
 8001ea0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eae:	a903      	add	r1, sp, #12
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <HAL_I2C_MspInit+0x70>)
 8001eb2:	f000 fa05 	bl	80022c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eb6:	9502      	str	r5, [sp, #8]
 8001eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001eba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ebe:	6423      	str	r3, [r4, #64]	; 0x40
 8001ec0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	9b02      	ldr	r3, [sp, #8]
}
 8001eca:	e7d7      	b.n	8001e7c <HAL_I2C_MspInit+0x18>
 8001ecc:	40005800 	.word	0x40005800
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	2300      	movs	r3, #0
 8001ede:	9303      	str	r3, [sp, #12]
 8001ee0:	9304      	str	r3, [sp, #16]
 8001ee2:	9305      	str	r3, [sp, #20]
 8001ee4:	9306      	str	r3, [sp, #24]
 8001ee6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8001ee8:	6802      	ldr	r2, [r0, #0]
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_SPI_MspInit+0x84>)
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ef0:	b009      	add	sp, #36	; 0x24
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	9201      	str	r2, [sp, #4]
 8001ef8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001efc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001efe:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001f02:	6419      	str	r1, [r3, #64]	; 0x40
 8001f04:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001f06:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001f0a:	9101      	str	r1, [sp, #4]
 8001f0c:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	9202      	str	r2, [sp, #8]
 8001f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f12:	f041 0102 	orr.w	r1, r1, #2
 8001f16:	6319      	str	r1, [r3, #48]	; 0x30
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	9302      	str	r3, [sp, #8]
 8001f20:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f22:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f28:	2702      	movs	r7, #2
 8001f2a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2e:	2603      	movs	r6, #3
 8001f30:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f32:	2505      	movs	r5, #5
 8001f34:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f36:	4c0a      	ldr	r4, [pc, #40]	; (8001f60 <HAL_SPI_MspInit+0x88>)
 8001f38:	a903      	add	r1, sp, #12
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f000 f9c0 	bl	80022c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f44:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f4e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	a903      	add	r1, sp, #12
 8001f52:	4620      	mov	r0, r4
 8001f54:	f000 f9b4 	bl	80022c0 <HAL_GPIO_Init>
}
 8001f58:	e7ca      	b.n	8001ef0 <HAL_SPI_MspInit+0x18>
 8001f5a:	bf00      	nop
 8001f5c:	40003800 	.word	0x40003800
 8001f60:	40020400 	.word	0x40020400

08001f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f66:	f001 f9ad 	bl	80032c4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <NMI_Handler+0x6>

08001f6c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <HardFault_Handler>

08001f6e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <MemManage_Handler>

08001f70 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <BusFault_Handler>

08001f72 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <UsageFault_Handler>

08001f74 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f74:	4770      	bx	lr

08001f76 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	4770      	bx	lr

08001f78 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f78:	4770      	bx	lr

08001f7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f8fe 	bl	800217c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bd08      	pop	{r3, pc}
	...

08001f84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001f84:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_0_Pin);
 8001f86:	2008      	movs	r0, #8
 8001f88:	f000 fa9c 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8001f8c:	2140      	movs	r1, #64	; 0x40
 8001f8e:	4802      	ldr	r0, [pc, #8]	; (8001f98 <EXTI3_IRQHandler+0x14>)
 8001f90:	f000 fa8d 	bl	80024ae <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001f94:	bd08      	pop	{r3, pc}
 8001f96:	bf00      	nop
 8001f98:	40020000 	.word	0x40020000

08001f9c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8001f9e:	2010      	movs	r0, #16
 8001fa0:	f000 fa90 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <EXTI4_IRQHandler+0x14>)
 8001fa8:	f000 fa81 	bl	80024ae <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fac:	bd08      	pop	{r3, pc}
 8001fae:	bf00      	nop
 8001fb0:	40020000 	.word	0x40020000

08001fb4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	XPT2046_unified_Interrupt_Callback(HAL_GPIO_ReadPin(TOUCH_PENIRQ_GPIO_Port, TOUCH_PENIRQ_Pin), HAL_GetTick());
 8001fb6:	2120      	movs	r1, #32
 8001fb8:	4806      	ldr	r0, [pc, #24]	; (8001fd4 <EXTI9_5_IRQHandler+0x20>)
 8001fba:	f000 fa6b 	bl	8002494 <HAL_GPIO_ReadPin>
 8001fbe:	4604      	mov	r4, r0
 8001fc0:	f000 f8e8 	bl	8002194 <HAL_GetTick>
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	f7ff fc94 	bl	80018f4 <XPT2046_unified_Interrupt_Callback>
	   *       }
	   *
		*/

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_PENIRQ_Pin);
 8001fcc:	2020      	movs	r0, #32
 8001fce:	f000 fa79 	bl	80024c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fd2:	bd10      	pop	{r4, pc}
 8001fd4:	40020800 	.word	0x40020800

08001fd8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001fd8:	2001      	movs	r0, #1
 8001fda:	4770      	bx	lr

08001fdc <_kill>:

int _kill(int pid, int sig)
{
 8001fdc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001fde:	f001 fc71 	bl	80038c4 <__errno>
 8001fe2:	2316      	movs	r3, #22
 8001fe4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fea:	bd08      	pop	{r3, pc}

08001fec <_exit>:

void _exit (int status)
{
 8001fec:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001fee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ff2:	f7ff fff3 	bl	8001fdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ff6:	e7fe      	b.n	8001ff6 <_exit+0xa>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b570      	push	{r4, r5, r6, lr}
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2500      	movs	r5, #0
 8002000:	42b5      	cmp	r5, r6
 8002002:	da07      	bge.n	8002014 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8002004:	f3af 8000 	nop.w
 8002008:	4621      	mov	r1, r4
 800200a:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200e:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8002010:	460c      	mov	r4, r1
 8002012:	e7f5      	b.n	8002000 <_read+0x8>
	}

return len;
}
 8002014:	4630      	mov	r0, r6
 8002016:	bd70      	pop	{r4, r5, r6, pc}

08002018 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002018:	b570      	push	{r4, r5, r6, lr}
 800201a:	460c      	mov	r4, r1
 800201c:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	2500      	movs	r5, #0
 8002020:	42b5      	cmp	r5, r6
 8002022:	da05      	bge.n	8002030 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8002024:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002028:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202c:	3501      	adds	r5, #1
 800202e:	e7f7      	b.n	8002020 <_write+0x8>
	}
	return len;
}
 8002030:	4630      	mov	r0, r6
 8002032:	bd70      	pop	{r4, r5, r6, pc}

08002034 <_close>:

int _close(int file)
{
	return -1;
}
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002038:	4770      	bx	lr

0800203a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800203a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800203e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8002040:	2000      	movs	r0, #0
 8002042:	4770      	bx	lr

08002044 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8002044:	2001      	movs	r0, #1
 8002046:	4770      	bx	lr

08002048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8002048:	2000      	movs	r0, #0
 800204a:	4770      	bx	lr

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b510      	push	{r4, lr}
 800204e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <_sbrk+0x38>)
 8002052:	490d      	ldr	r1, [pc, #52]	; (8002088 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	480d      	ldr	r0, [pc, #52]	; (800208c <_sbrk+0x40>)
 8002056:	6800      	ldr	r0, [r0, #0]
 8002058:	b140      	cbz	r0, 800206c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205a:	480c      	ldr	r0, [pc, #48]	; (800208c <_sbrk+0x40>)
 800205c:	6800      	ldr	r0, [r0, #0]
 800205e:	4403      	add	r3, r0
 8002060:	1a52      	subs	r2, r2, r1
 8002062:	4293      	cmp	r3, r2
 8002064:	d806      	bhi.n	8002074 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002066:	4a09      	ldr	r2, [pc, #36]	; (800208c <_sbrk+0x40>)
 8002068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800206a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <_sbrk+0x40>)
 800206e:	4c08      	ldr	r4, [pc, #32]	; (8002090 <_sbrk+0x44>)
 8002070:	6004      	str	r4, [r0, #0]
 8002072:	e7f2      	b.n	800205a <_sbrk+0xe>
    errno = ENOMEM;
 8002074:	f001 fc26 	bl	80038c4 <__errno>
 8002078:	230c      	movs	r3, #12
 800207a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800207c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002080:	e7f3      	b.n	800206a <_sbrk+0x1e>
 8002082:	bf00      	nop
 8002084:	20020000 	.word	0x20020000
 8002088:	00000400 	.word	0x00000400
 800208c:	20000414 	.word	0x20000414
 8002090:	200005e8 	.word	0x200005e8

08002094 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4a03      	ldr	r2, [pc, #12]	; (80020a4 <SystemInit+0x10>)
 8002096:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800209a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800209e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020ac:	480d      	ldr	r0, [pc, #52]	; (80020e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ae:	490e      	ldr	r1, [pc, #56]	; (80020e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b4:	e002      	b.n	80020bc <LoopCopyDataInit>

080020b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ba:	3304      	adds	r3, #4

080020bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c0:	d3f9      	bcc.n	80020b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c4:	4c0b      	ldr	r4, [pc, #44]	; (80020f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c8:	e001      	b.n	80020ce <LoopFillZerobss>

080020ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020cc:	3204      	adds	r2, #4

080020ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d0:	d3fb      	bcc.n	80020ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d2:	f7ff ffdf 	bl	8002094 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f001 fbfb 	bl	80038d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff fcbd 	bl	8001a58 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80020ec:	08008c9c 	.word	0x08008c9c
  ldr r2, =_sbss
 80020f0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80020f4:	200005e8 	.word	0x200005e8

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>
	...

080020fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020fc:	b510      	push	{r4, lr}
 80020fe:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_InitTick+0x40>)
 8002102:	7818      	ldrb	r0, [r3, #0]
 8002104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002108:	fbb3 f3f0 	udiv	r3, r3, r0
 800210c:	4a0c      	ldr	r2, [pc, #48]	; (8002140 <HAL_InitTick+0x44>)
 800210e:	6810      	ldr	r0, [r2, #0]
 8002110:	fbb0 f0f3 	udiv	r0, r0, r3
 8002114:	f000 f8be 	bl	8002294 <HAL_SYSTICK_Config>
 8002118:	b968      	cbnz	r0, 8002136 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800211a:	2c0f      	cmp	r4, #15
 800211c:	d901      	bls.n	8002122 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800211e:	2001      	movs	r0, #1
 8002120:	e00a      	b.n	8002138 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002122:	2200      	movs	r2, #0
 8002124:	4621      	mov	r1, r4
 8002126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800212a:	f000 f85f 	bl	80021ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_InitTick+0x48>)
 8002130:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2000      	movs	r0, #0
 8002134:	e000      	b.n	8002138 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002136:	2001      	movs	r0, #1
}
 8002138:	bd10      	pop	{r4, pc}
 800213a:	bf00      	nop
 800213c:	20000010 	.word	0x20000010
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20000014 	.word	0x20000014

08002148 <HAL_Init>:
{
 8002148:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_Init+0x30>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002152:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800215a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002162:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002164:	2003      	movs	r0, #3
 8002166:	f000 f82f 	bl	80021c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800216a:	200f      	movs	r0, #15
 800216c:	f7ff ffc6 	bl	80020fc <HAL_InitTick>
  HAL_MspInit();
 8002170:	f7ff fe5c 	bl	8001e2c <HAL_MspInit>
}
 8002174:	2000      	movs	r0, #0
 8002176:	bd08      	pop	{r3, pc}
 8002178:	40023c00 	.word	0x40023c00

0800217c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800217c:	4a03      	ldr	r2, [pc, #12]	; (800218c <HAL_IncTick+0x10>)
 800217e:	6811      	ldr	r1, [r2, #0]
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_IncTick+0x14>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	440b      	add	r3, r1
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	200005d4 	.word	0x200005d4
 8002190:	20000010 	.word	0x20000010

08002194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002194:	4b01      	ldr	r3, [pc, #4]	; (800219c <HAL_GetTick+0x8>)
 8002196:	6818      	ldr	r0, [r3, #0]
}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	200005d4 	.word	0x200005d4

080021a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a0:	b538      	push	{r3, r4, r5, lr}
 80021a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80021a4:	f7ff fff6 	bl	8002194 <HAL_GetTick>
 80021a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021aa:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80021ae:	d002      	beq.n	80021b6 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80021b0:	4b04      	ldr	r3, [pc, #16]	; (80021c4 <HAL_Delay+0x24>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021b6:	f7ff ffed 	bl	8002194 <HAL_GetTick>
 80021ba:	1b40      	subs	r0, r0, r5
 80021bc:	42a0      	cmp	r0, r4
 80021be:	d3fa      	bcc.n	80021b6 <HAL_Delay+0x16>
  {
  }
}
 80021c0:	bd38      	pop	{r3, r4, r5, pc}
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010

080021c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4a07      	ldr	r2, [pc, #28]	; (80021e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80021ca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021cc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	0200      	lsls	r0, r0, #8
 80021d6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021da:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80021e4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80021e6:	4770      	bx	lr
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ee:	4b17      	ldr	r3, [pc, #92]	; (800224c <HAL_NVIC_SetPriority+0x60>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f6:	f1c3 0407 	rsb	r4, r3, #7
 80021fa:	2c04      	cmp	r4, #4
 80021fc:	bf28      	it	cs
 80021fe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002200:	1d1d      	adds	r5, r3, #4
 8002202:	2d06      	cmp	r5, #6
 8002204:	d918      	bls.n	8002238 <HAL_NVIC_SetPriority+0x4c>
 8002206:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800220c:	fa05 f404 	lsl.w	r4, r5, r4
 8002210:	ea21 0104 	bic.w	r1, r1, r4
 8002214:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002216:	fa05 f303 	lsl.w	r3, r5, r3
 800221a:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221e:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002220:	2800      	cmp	r0, #0
 8002222:	db0b      	blt.n	800223c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002224:	0109      	lsls	r1, r1, #4
 8002226:	b2c9      	uxtb	r1, r1
 8002228:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800222c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002230:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002234:	bc30      	pop	{r4, r5}
 8002236:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002238:	2300      	movs	r3, #0
 800223a:	e7e5      	b.n	8002208 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800223c:	f000 000f 	and.w	r0, r0, #15
 8002240:	0109      	lsls	r1, r1, #4
 8002242:	b2c9      	uxtb	r1, r1
 8002244:	4b02      	ldr	r3, [pc, #8]	; (8002250 <HAL_NVIC_SetPriority+0x64>)
 8002246:	5419      	strb	r1, [r3, r0]
 8002248:	e7f4      	b.n	8002234 <HAL_NVIC_SetPriority+0x48>
 800224a:	bf00      	nop
 800224c:	e000ed00 	.word	0xe000ed00
 8002250:	e000ed14 	.word	0xe000ed14

08002254 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002254:	2800      	cmp	r0, #0
 8002256:	db07      	blt.n	8002268 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002258:	f000 021f 	and.w	r2, r0, #31
 800225c:	0940      	lsrs	r0, r0, #5
 800225e:	2301      	movs	r3, #1
 8002260:	4093      	lsls	r3, r2
 8002262:	4a02      	ldr	r2, [pc, #8]	; (800226c <HAL_NVIC_EnableIRQ+0x18>)
 8002264:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	e000e100 	.word	0xe000e100

08002270 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002270:	2800      	cmp	r0, #0
 8002272:	db0c      	blt.n	800228e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002274:	f000 021f 	and.w	r2, r0, #31
 8002278:	0940      	lsrs	r0, r0, #5
 800227a:	2301      	movs	r3, #1
 800227c:	4093      	lsls	r3, r2
 800227e:	3020      	adds	r0, #32
 8002280:	4a03      	ldr	r2, [pc, #12]	; (8002290 <HAL_NVIC_DisableIRQ+0x20>)
 8002282:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002286:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800228a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800228e:	4770      	bx	lr
 8002290:	e000e100 	.word	0xe000e100

08002294 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002294:	3801      	subs	r0, #1
 8002296:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800229a:	d20a      	bcs.n	80022b2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800229c:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_SYSTICK_Config+0x24>)
 800229e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	4a06      	ldr	r2, [pc, #24]	; (80022bc <HAL_SYSTICK_Config+0x28>)
 80022a2:	21f0      	movs	r1, #240	; 0xf0
 80022a4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	2000      	movs	r0, #0
 80022aa:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ac:	2207      	movs	r2, #7
 80022ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80022b2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000e010 	.word	0xe000e010
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c0:	2300      	movs	r3, #0
 80022c2:	2b0f      	cmp	r3, #15
 80022c4:	f200 80dd 	bhi.w	8002482 <HAL_GPIO_Init+0x1c2>
{
 80022c8:	b4f0      	push	{r4, r5, r6, r7}
 80022ca:	b082      	sub	sp, #8
 80022cc:	e05d      	b.n	800238a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ce:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d0:	005f      	lsls	r7, r3, #1
 80022d2:	2403      	movs	r4, #3
 80022d4:	40bc      	lsls	r4, r7
 80022d6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022da:	68cc      	ldr	r4, [r1, #12]
 80022dc:	40bc      	lsls	r4, r7
 80022de:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80022e0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022e4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e8:	684c      	ldr	r4, [r1, #4]
 80022ea:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80022ee:	409a      	lsls	r2, r3
 80022f0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80022f2:	6042      	str	r2, [r0, #4]
 80022f4:	e057      	b.n	80023a6 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f6:	08dc      	lsrs	r4, r3, #3
 80022f8:	3408      	adds	r4, #8
 80022fa:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022fe:	f003 0207 	and.w	r2, r3, #7
 8002302:	0096      	lsls	r6, r2, #2
 8002304:	220f      	movs	r2, #15
 8002306:	40b2      	lsls	r2, r6
 8002308:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800230c:	690a      	ldr	r2, [r1, #16]
 800230e:	40b2      	lsls	r2, r6
 8002310:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8002316:	e05a      	b.n	80023ce <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002318:	2207      	movs	r2, #7
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x5e>
 800231c:	2200      	movs	r2, #0
 800231e:	40b2      	lsls	r2, r6
 8002320:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002322:	3402      	adds	r4, #2
 8002324:	4e57      	ldr	r6, [pc, #348]	; (8002484 <HAL_GPIO_Init+0x1c4>)
 8002326:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800232a:	4a57      	ldr	r2, [pc, #348]	; (8002488 <HAL_GPIO_Init+0x1c8>)
 800232c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800232e:	43ea      	mvns	r2, r5
 8002330:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	684f      	ldr	r7, [r1, #4]
 8002336:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800233a:	d001      	beq.n	8002340 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800233c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002340:	4c51      	ldr	r4, [pc, #324]	; (8002488 <HAL_GPIO_Init+0x1c8>)
 8002342:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002344:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002346:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800234a:	684f      	ldr	r7, [r1, #4]
 800234c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002350:	d001      	beq.n	8002356 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8002352:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002356:	4c4c      	ldr	r4, [pc, #304]	; (8002488 <HAL_GPIO_Init+0x1c8>)
 8002358:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800235c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002360:	684f      	ldr	r7, [r1, #4]
 8002362:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002366:	d001      	beq.n	800236c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002368:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800236c:	4c46      	ldr	r4, [pc, #280]	; (8002488 <HAL_GPIO_Init+0x1c8>)
 800236e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002370:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002372:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002374:	684e      	ldr	r6, [r1, #4]
 8002376:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800237a:	d001      	beq.n	8002380 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800237c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002380:	4c41      	ldr	r4, [pc, #260]	; (8002488 <HAL_GPIO_Init+0x1c8>)
 8002382:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002384:	3301      	adds	r3, #1
 8002386:	2b0f      	cmp	r3, #15
 8002388:	d878      	bhi.n	800247c <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 800238a:	2201      	movs	r2, #1
 800238c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800238e:	680c      	ldr	r4, [r1, #0]
 8002390:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002394:	ea32 0404 	bics.w	r4, r2, r4
 8002398:	d1f4      	bne.n	8002384 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239a:	684c      	ldr	r4, [r1, #4]
 800239c:	f004 0403 	and.w	r4, r4, #3
 80023a0:	3c01      	subs	r4, #1
 80023a2:	2c01      	cmp	r4, #1
 80023a4:	d993      	bls.n	80022ce <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023a6:	684a      	ldr	r2, [r1, #4]
 80023a8:	f002 0203 	and.w	r2, r2, #3
 80023ac:	2a03      	cmp	r2, #3
 80023ae:	d009      	beq.n	80023c4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 80023b0:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b2:	005e      	lsls	r6, r3, #1
 80023b4:	2203      	movs	r2, #3
 80023b6:	40b2      	lsls	r2, r6
 80023b8:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	688a      	ldr	r2, [r1, #8]
 80023be:	40b2      	lsls	r2, r6
 80023c0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80023c2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c4:	684a      	ldr	r2, [r1, #4]
 80023c6:	f002 0203 	and.w	r2, r2, #3
 80023ca:	2a02      	cmp	r2, #2
 80023cc:	d093      	beq.n	80022f6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80023ce:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d0:	005e      	lsls	r6, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	40b2      	lsls	r2, r6
 80023d6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023da:	684a      	ldr	r2, [r1, #4]
 80023dc:	f002 0203 	and.w	r2, r2, #3
 80023e0:	40b2      	lsls	r2, r6
 80023e2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80023e4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e6:	684a      	ldr	r2, [r1, #4]
 80023e8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80023ec:	d0ca      	beq.n	8002384 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2200      	movs	r2, #0
 80023f0:	9201      	str	r2, [sp, #4]
 80023f2:	4a26      	ldr	r2, [pc, #152]	; (800248c <HAL_GPIO_Init+0x1cc>)
 80023f4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80023f6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80023fa:	6454      	str	r4, [r2, #68]	; 0x44
 80023fc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80023fe:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002402:	9201      	str	r2, [sp, #4]
 8002404:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002406:	089c      	lsrs	r4, r3, #2
 8002408:	1ca6      	adds	r6, r4, #2
 800240a:	4a1e      	ldr	r2, [pc, #120]	; (8002484 <HAL_GPIO_Init+0x1c4>)
 800240c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	0096      	lsls	r6, r2, #2
 8002416:	220f      	movs	r2, #15
 8002418:	40b2      	lsls	r2, r6
 800241a:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241e:	4a1c      	ldr	r2, [pc, #112]	; (8002490 <HAL_GPIO_Init+0x1d0>)
 8002420:	4290      	cmp	r0, r2
 8002422:	f43f af7b 	beq.w	800231c <HAL_GPIO_Init+0x5c>
 8002426:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800242a:	4290      	cmp	r0, r2
 800242c:	d01a      	beq.n	8002464 <HAL_GPIO_Init+0x1a4>
 800242e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002432:	4290      	cmp	r0, r2
 8002434:	d018      	beq.n	8002468 <HAL_GPIO_Init+0x1a8>
 8002436:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800243a:	4290      	cmp	r0, r2
 800243c:	d016      	beq.n	800246c <HAL_GPIO_Init+0x1ac>
 800243e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002442:	4290      	cmp	r0, r2
 8002444:	d014      	beq.n	8002470 <HAL_GPIO_Init+0x1b0>
 8002446:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800244a:	4290      	cmp	r0, r2
 800244c:	d012      	beq.n	8002474 <HAL_GPIO_Init+0x1b4>
 800244e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002452:	4290      	cmp	r0, r2
 8002454:	d010      	beq.n	8002478 <HAL_GPIO_Init+0x1b8>
 8002456:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800245a:	4290      	cmp	r0, r2
 800245c:	f43f af5c 	beq.w	8002318 <HAL_GPIO_Init+0x58>
 8002460:	2208      	movs	r2, #8
 8002462:	e75c      	b.n	800231e <HAL_GPIO_Init+0x5e>
 8002464:	2201      	movs	r2, #1
 8002466:	e75a      	b.n	800231e <HAL_GPIO_Init+0x5e>
 8002468:	2202      	movs	r2, #2
 800246a:	e758      	b.n	800231e <HAL_GPIO_Init+0x5e>
 800246c:	2203      	movs	r2, #3
 800246e:	e756      	b.n	800231e <HAL_GPIO_Init+0x5e>
 8002470:	2204      	movs	r2, #4
 8002472:	e754      	b.n	800231e <HAL_GPIO_Init+0x5e>
 8002474:	2205      	movs	r2, #5
 8002476:	e752      	b.n	800231e <HAL_GPIO_Init+0x5e>
 8002478:	2206      	movs	r2, #6
 800247a:	e750      	b.n	800231e <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800247c:	b002      	add	sp, #8
 800247e:	bcf0      	pop	{r4, r5, r6, r7}
 8002480:	4770      	bx	lr
 8002482:	4770      	bx	lr
 8002484:	40013800 	.word	0x40013800
 8002488:	40013c00 	.word	0x40013c00
 800248c:	40023800 	.word	0x40023800
 8002490:	40020000 	.word	0x40020000

08002494 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002494:	6903      	ldr	r3, [r0, #16]
 8002496:	4219      	tst	r1, r3
 8002498:	d001      	beq.n	800249e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800249a:	2001      	movs	r0, #1
 800249c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800249e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80024a0:	4770      	bx	lr

080024a2 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a2:	b10a      	cbz	r2, 80024a8 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024a4:	6181      	str	r1, [r0, #24]
 80024a6:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a8:	0409      	lsls	r1, r1, #16
 80024aa:	6181      	str	r1, [r0, #24]
  }
}
 80024ac:	4770      	bx	lr

080024ae <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80024ae:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024b0:	ea01 0203 	and.w	r2, r1, r3
 80024b4:	ea21 0103 	bic.w	r1, r1, r3
 80024b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80024bc:	6181      	str	r1, [r0, #24]
}
 80024be:	4770      	bx	lr

080024c0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80024c4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	4203      	tst	r3, r0
 80024cc:	d100      	bne.n	80024d0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80024ce:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80024d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024d4:	f7ff fff4 	bl	80024c0 <HAL_GPIO_EXTI_Callback>
}
 80024d8:	e7f9      	b.n	80024ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80024da:	bf00      	nop
 80024dc:	40013c00 	.word	0x40013c00

080024e0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e0:	6803      	ldr	r3, [r0, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024e8:	d101      	bne.n	80024ee <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80024ea:	2000      	movs	r0, #0
}
 80024ec:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024f2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024f8:	2220      	movs	r2, #32
 80024fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024fe:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002502:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002504:	f042 0204 	orr.w	r2, r2, #4
 8002508:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 800250a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 800250e:	2001      	movs	r0, #1
 8002510:	4770      	bx	lr

08002512 <I2C_WaitOnFlagUntilTimeout>:
{
 8002512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002516:	4607      	mov	r7, r0
 8002518:	460d      	mov	r5, r1
 800251a:	4690      	mov	r8, r2
 800251c:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800251e:	e022      	b.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7ff fe38 	bl	8002194 <HAL_GetTick>
 8002524:	9b06      	ldr	r3, [sp, #24]
 8002526:	1ac0      	subs	r0, r0, r3
 8002528:	42b0      	cmp	r0, r6
 800252a:	d800      	bhi.n	800252e <I2C_WaitOnFlagUntilTimeout+0x1c>
 800252c:	b9de      	cbnz	r6, 8002566 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800252e:	2300      	movs	r3, #0
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002532:	2220      	movs	r2, #32
 8002534:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002538:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800253c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800253e:	f042 0220 	orr.w	r2, r2, #32
 8002542:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002544:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
 800254a:	e01a      	b.n	8002582 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	699c      	ldr	r4, [r3, #24]
 8002550:	ea25 0404 	bic.w	r4, r5, r4
 8002554:	b2a4      	uxth	r4, r4
 8002556:	fab4 f484 	clz	r4, r4
 800255a:	0964      	lsrs	r4, r4, #5
 800255c:	45a0      	cmp	r8, r4
 800255e:	d10f      	bne.n	8002580 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8002560:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002564:	d1dc      	bne.n	8002520 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002566:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800256a:	2b01      	cmp	r3, #1
 800256c:	d1ee      	bne.n	800254c <I2C_WaitOnFlagUntilTimeout+0x3a>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	695c      	ldr	r4, [r3, #20]
 8002572:	ea25 0404 	bic.w	r4, r5, r4
 8002576:	b2a4      	uxth	r4, r4
 8002578:	fab4 f484 	clz	r4, r4
 800257c:	0964      	lsrs	r4, r4, #5
 800257e:	e7ed      	b.n	800255c <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8002580:	2000      	movs	r0, #0
}
 8002582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002586 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800258a:	4605      	mov	r5, r0
 800258c:	460e      	mov	r6, r1
 800258e:	4617      	mov	r7, r2
 8002590:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002592:	e03d      	b.n	8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025a2:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025a8:	2220      	movs	r2, #32
 80025aa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025ae:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025b2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025b4:	f042 0204 	orr.w	r2, r2, #4
 80025b8:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80025ba:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 80025be:	2001      	movs	r0, #1
 80025c0:	e034      	b.n	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7ff fde7 	bl	8002194 <HAL_GetTick>
 80025c6:	eba0 0008 	sub.w	r0, r0, r8
 80025ca:	42b8      	cmp	r0, r7
 80025cc:	d800      	bhi.n	80025d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80025ce:	b9ff      	cbnz	r7, 8002610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	2220      	movs	r2, #32
 80025d6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025da:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025de:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80025e6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80025ea:	2001      	movs	r0, #1
 80025ec:	e01e      	b.n	800262c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025ee:	682b      	ldr	r3, [r5, #0]
 80025f0:	699c      	ldr	r4, [r3, #24]
 80025f2:	ea26 0404 	bic.w	r4, r6, r4
 80025f6:	b2a4      	uxth	r4, r4
 80025f8:	3c00      	subs	r4, #0
 80025fa:	bf18      	it	ne
 80025fc:	2401      	movne	r4, #1
 80025fe:	b1a4      	cbz	r4, 800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002600:	682b      	ldr	r3, [r5, #0]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002608:	d1c4      	bne.n	8002594 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 800260a:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 800260e:	d1d8      	bne.n	80025c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002610:	f3c6 4307 	ubfx	r3, r6, #16, #8
 8002614:	2b01      	cmp	r3, #1
 8002616:	d1ea      	bne.n	80025ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8002618:	682b      	ldr	r3, [r5, #0]
 800261a:	695c      	ldr	r4, [r3, #20]
 800261c:	ea26 0404 	bic.w	r4, r6, r4
 8002620:	b2a4      	uxth	r4, r4
 8002622:	3c00      	subs	r4, #0
 8002624:	bf18      	it	ne
 8002626:	2401      	movne	r4, #1
 8002628:	e7e9      	b.n	80025fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800262a:	2000      	movs	r0, #0
}
 800262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002630 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	4604      	mov	r4, r0
 8002634:	460d      	mov	r5, r1
 8002636:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002640:	d11c      	bne.n	800267c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ff4c 	bl	80024e0 <I2C_IsAcknowledgeFailed>
 8002648:	b9d0      	cbnz	r0, 8002680 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800264a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800264e:	d0f3      	beq.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002650:	f7ff fda0 	bl	8002194 <HAL_GetTick>
 8002654:	1b80      	subs	r0, r0, r6
 8002656:	42a8      	cmp	r0, r5
 8002658:	d801      	bhi.n	800265e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800265a:	2d00      	cmp	r5, #0
 800265c:	d1ec      	bne.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800265e:	2300      	movs	r3, #0
 8002660:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002662:	2220      	movs	r2, #32
 8002664:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002668:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800266c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800266e:	f042 0220 	orr.w	r2, r2, #32
 8002672:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002678:	2001      	movs	r0, #1
 800267a:	e000      	b.n	800267e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800267c:	2000      	movs	r0, #0
}
 800267e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002680:	2001      	movs	r0, #1
 8002682:	e7fc      	b.n	800267e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002684 <I2C_RequestMemoryWrite>:
{
 8002684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002688:	b085      	sub	sp, #20
 800268a:	4604      	mov	r4, r0
 800268c:	460d      	mov	r5, r1
 800268e:	4691      	mov	r9, r2
 8002690:	461f      	mov	r7, r3
 8002692:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002696:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002698:	6803      	ldr	r3, [r0, #0]
 800269a:	6819      	ldr	r1, [r3, #0]
 800269c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80026a0:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026a2:	9600      	str	r6, [sp, #0]
 80026a4:	4643      	mov	r3, r8
 80026a6:	2200      	movs	r2, #0
 80026a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026ac:	f7ff ff31 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 80026b0:	b960      	cbnz	r0, 80026cc <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026b2:	6823      	ldr	r3, [r4, #0]
 80026b4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80026b8:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026ba:	4633      	mov	r3, r6
 80026bc:	4642      	mov	r2, r8
 80026be:	4926      	ldr	r1, [pc, #152]	; (8002758 <I2C_RequestMemoryWrite+0xd4>)
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff ff60 	bl	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026c6:	b168      	cbz	r0, 80026e4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80026c8:	2001      	movs	r0, #1
 80026ca:	e008      	b.n	80026de <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026cc:	6823      	ldr	r3, [r4, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80026d4:	d002      	beq.n	80026dc <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026da:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80026dc:	2003      	movs	r0, #3
}
 80026de:	b005      	add	sp, #20
 80026e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e4:	2300      	movs	r3, #0
 80026e6:	9303      	str	r3, [sp, #12]
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	695a      	ldr	r2, [r3, #20]
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	9303      	str	r3, [sp, #12]
 80026f2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f4:	4632      	mov	r2, r6
 80026f6:	4641      	mov	r1, r8
 80026f8:	4620      	mov	r0, r4
 80026fa:	f7ff ff99 	bl	8002630 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fe:	b930      	cbnz	r0, 800270e <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002700:	2f01      	cmp	r7, #1
 8002702:	d10f      	bne.n	8002724 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	fa5f f689 	uxtb.w	r6, r9
 800270a:	611e      	str	r6, [r3, #16]
 800270c:	e7e7      	b.n	80026de <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002710:	2b04      	cmp	r3, #4
 8002712:	d001      	beq.n	8002718 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 8002714:	2001      	movs	r0, #1
 8002716:	e7e2      	b.n	80026de <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002718:	6822      	ldr	r2, [r4, #0]
 800271a:	6813      	ldr	r3, [r2, #0]
 800271c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e7f7      	b.n	8002714 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800272a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800272c:	4632      	mov	r2, r6
 800272e:	4641      	mov	r1, r8
 8002730:	4620      	mov	r0, r4
 8002732:	f7ff ff7d 	bl	8002630 <I2C_WaitOnTXEFlagUntilTimeout>
 8002736:	b920      	cbnz	r0, 8002742 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002738:	6823      	ldr	r3, [r4, #0]
 800273a:	fa5f f689 	uxtb.w	r6, r9
 800273e:	611e      	str	r6, [r3, #16]
 8002740:	e7cd      	b.n	80026de <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002744:	2b04      	cmp	r3, #4
 8002746:	d001      	beq.n	800274c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8002748:	2001      	movs	r0, #1
 800274a:	e7c8      	b.n	80026de <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800274c:	6822      	ldr	r2, [r4, #0]
 800274e:	6813      	ldr	r3, [r2, #0]
 8002750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e7f7      	b.n	8002748 <I2C_RequestMemoryWrite+0xc4>
 8002758:	00010002 	.word	0x00010002

0800275c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800275c:	b570      	push	{r4, r5, r6, lr}
 800275e:	4604      	mov	r4, r0
 8002760:	460d      	mov	r5, r1
 8002762:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002764:	6823      	ldr	r3, [r4, #0]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	f013 0f04 	tst.w	r3, #4
 800276c:	d11c      	bne.n	80027a8 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800276e:	4620      	mov	r0, r4
 8002770:	f7ff feb6 	bl	80024e0 <I2C_IsAcknowledgeFailed>
 8002774:	b9d0      	cbnz	r0, 80027ac <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002776:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800277a:	d0f3      	beq.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277c:	f7ff fd0a 	bl	8002194 <HAL_GetTick>
 8002780:	1b80      	subs	r0, r0, r6
 8002782:	42a8      	cmp	r0, r5
 8002784:	d801      	bhi.n	800278a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002786:	2d00      	cmp	r5, #0
 8002788:	d1ec      	bne.n	8002764 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800278a:	2300      	movs	r3, #0
 800278c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800278e:	2220      	movs	r2, #32
 8002790:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002794:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800279a:	f042 0220 	orr.w	r2, r2, #32
 800279e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80027a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e000      	b.n	80027aa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 80027a8:	2000      	movs	r0, #0
}
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
 80027ae:	e7fc      	b.n	80027aa <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

080027b0 <HAL_I2C_Init>:
  if (hi2c == NULL)
 80027b0:	2800      	cmp	r0, #0
 80027b2:	f000 80cc 	beq.w	800294e <HAL_I2C_Init+0x19e>
{
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d077      	beq.n	80028b2 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c2:	2324      	movs	r3, #36	; 0x24
 80027c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	6813      	ldr	r3, [r2, #0]
 80027cc:	f023 0301 	bic.w	r3, r3, #1
 80027d0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027d2:	6822      	ldr	r2, [r4, #0]
 80027d4:	6813      	ldr	r3, [r2, #0]
 80027d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027da:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027dc:	6822      	ldr	r2, [r4, #0]
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80027e4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027e6:	f000 fd5b 	bl	80032a0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_I2C_Init+0x1a8>)
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d864      	bhi.n	80028bc <HAL_I2C_Init+0x10c>
 80027f2:	4b5a      	ldr	r3, [pc, #360]	; (800295c <HAL_I2C_Init+0x1ac>)
 80027f4:	4298      	cmp	r0, r3
 80027f6:	bf8c      	ite	hi
 80027f8:	2300      	movhi	r3, #0
 80027fa:	2301      	movls	r3, #1
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f040 80a8 	bne.w	8002952 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 8002802:	4d57      	ldr	r5, [pc, #348]	; (8002960 <HAL_I2C_Init+0x1b0>)
 8002804:	fba5 3500 	umull	r3, r5, r5, r0
 8002808:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280a:	6826      	ldr	r6, [r4, #0]
 800280c:	6871      	ldr	r1, [r6, #4]
 800280e:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002812:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002816:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002818:	6821      	ldr	r1, [r4, #0]
 800281a:	6a0b      	ldr	r3, [r1, #32]
 800281c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002820:	6865      	ldr	r5, [r4, #4]
 8002822:	4a4d      	ldr	r2, [pc, #308]	; (8002958 <HAL_I2C_Init+0x1a8>)
 8002824:	4295      	cmp	r5, r2
 8002826:	d84f      	bhi.n	80028c8 <HAL_I2C_Init+0x118>
 8002828:	1c7a      	adds	r2, r7, #1
 800282a:	4313      	orrs	r3, r2
 800282c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800282e:	6825      	ldr	r5, [r4, #0]
 8002830:	69e9      	ldr	r1, [r5, #28]
 8002832:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002836:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	4a46      	ldr	r2, [pc, #280]	; (8002958 <HAL_I2C_Init+0x1a8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d84c      	bhi.n	80028dc <HAL_I2C_Init+0x12c>
 8002842:	3801      	subs	r0, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	fbb0 f0f3 	udiv	r0, r0, r3
 800284a:	3001      	adds	r0, #1
 800284c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002850:	4218      	tst	r0, r3
 8002852:	d078      	beq.n	8002946 <HAL_I2C_Init+0x196>
 8002854:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002858:	430b      	orrs	r3, r1
 800285a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800285c:	6821      	ldr	r1, [r4, #0]
 800285e:	680b      	ldr	r3, [r1, #0]
 8002860:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002864:	69e2      	ldr	r2, [r4, #28]
 8002866:	6a20      	ldr	r0, [r4, #32]
 8002868:	4302      	orrs	r2, r0
 800286a:	4313      	orrs	r3, r2
 800286c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800286e:	6821      	ldr	r1, [r4, #0]
 8002870:	688b      	ldr	r3, [r1, #8]
 8002872:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002876:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800287a:	6922      	ldr	r2, [r4, #16]
 800287c:	68e0      	ldr	r0, [r4, #12]
 800287e:	4302      	orrs	r2, r0
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002884:	6821      	ldr	r1, [r4, #0]
 8002886:	68cb      	ldr	r3, [r1, #12]
 8002888:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800288c:	6962      	ldr	r2, [r4, #20]
 800288e:	69a0      	ldr	r0, [r4, #24]
 8002890:	4302      	orrs	r2, r0
 8002892:	4313      	orrs	r3, r2
 8002894:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002896:	6822      	ldr	r2, [r4, #0]
 8002898:	6813      	ldr	r3, [r2, #0]
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	2000      	movs	r0, #0
 80028a2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a4:	2320      	movs	r3, #32
 80028a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ac:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80028b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80028b6:	f7ff fad5 	bl	8001e64 <HAL_I2C_MspInit>
 80028ba:	e782      	b.n	80027c2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <HAL_I2C_Init+0x1b4>)
 80028be:	4298      	cmp	r0, r3
 80028c0:	bf8c      	ite	hi
 80028c2:	2300      	movhi	r3, #0
 80028c4:	2301      	movls	r3, #1
 80028c6:	e799      	b.n	80027fc <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028cc:	fb02 f207 	mul.w	r2, r2, r7
 80028d0:	4d25      	ldr	r5, [pc, #148]	; (8002968 <HAL_I2C_Init+0x1b8>)
 80028d2:	fba5 5202 	umull	r5, r2, r5, r2
 80028d6:	0992      	lsrs	r2, r2, #6
 80028d8:	3201      	adds	r2, #1
 80028da:	e7a6      	b.n	800282a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028dc:	68a2      	ldr	r2, [r4, #8]
 80028de:	b9ba      	cbnz	r2, 8002910 <HAL_I2C_Init+0x160>
 80028e0:	1e46      	subs	r6, r0, #1
 80028e2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80028e6:	fbb6 f6f7 	udiv	r6, r6, r7
 80028ea:	3601      	adds	r6, #1
 80028ec:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80028f0:	fab6 f686 	clz	r6, r6
 80028f4:	0976      	lsrs	r6, r6, #5
 80028f6:	bb46      	cbnz	r6, 800294a <HAL_I2C_Init+0x19a>
 80028f8:	b9c2      	cbnz	r2, 800292c <HAL_I2C_Init+0x17c>
 80028fa:	1e42      	subs	r2, r0, #1
 80028fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002900:	fbb2 f2f3 	udiv	r2, r2, r3
 8002904:	3201      	adds	r2, #1
 8002906:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800290a:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 800290e:	e7a3      	b.n	8002858 <HAL_I2C_Init+0xa8>
 8002910:	1e46      	subs	r6, r0, #1
 8002912:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8002916:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800291a:	fbb6 f6f7 	udiv	r6, r6, r7
 800291e:	3601      	adds	r6, #1
 8002920:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002924:	fab6 f686 	clz	r6, r6
 8002928:	0976      	lsrs	r6, r6, #5
 800292a:	e7e4      	b.n	80028f6 <HAL_I2C_Init+0x146>
 800292c:	1e42      	subs	r2, r0, #1
 800292e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002932:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002936:	fbb2 f2f3 	udiv	r2, r2, r3
 800293a:	3201      	adds	r2, #1
 800293c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002940:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002944:	e788      	b.n	8002858 <HAL_I2C_Init+0xa8>
 8002946:	2304      	movs	r3, #4
 8002948:	e786      	b.n	8002858 <HAL_I2C_Init+0xa8>
 800294a:	2301      	movs	r3, #1
 800294c:	e784      	b.n	8002858 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800294e:	2001      	movs	r0, #1
}
 8002950:	4770      	bx	lr
    return HAL_ERROR;
 8002952:	2001      	movs	r0, #1
 8002954:	e7ac      	b.n	80028b0 <HAL_I2C_Init+0x100>
 8002956:	bf00      	nop
 8002958:	000186a0 	.word	0x000186a0
 800295c:	001e847f 	.word	0x001e847f
 8002960:	431bde83 	.word	0x431bde83
 8002964:	003d08ff 	.word	0x003d08ff
 8002968:	10624dd3 	.word	0x10624dd3

0800296c <HAL_I2C_Mem_Write>:
{
 800296c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002970:	b083      	sub	sp, #12
 8002972:	4604      	mov	r4, r0
 8002974:	460f      	mov	r7, r1
 8002976:	4690      	mov	r8, r2
 8002978:	4699      	mov	r9, r3
 800297a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800297c:	f7ff fc0a 	bl	8002194 <HAL_GetTick>
 8002980:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002982:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002986:	b2c0      	uxtb	r0, r0
 8002988:	2820      	cmp	r0, #32
 800298a:	d003      	beq.n	8002994 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800298c:	2002      	movs	r0, #2
}
 800298e:	b003      	add	sp, #12
 8002990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002994:	9500      	str	r5, [sp, #0]
 8002996:	2319      	movs	r3, #25
 8002998:	2201      	movs	r2, #1
 800299a:	494b      	ldr	r1, [pc, #300]	; (8002ac8 <HAL_I2C_Mem_Write+0x15c>)
 800299c:	4620      	mov	r0, r4
 800299e:	f7ff fdb8 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	f040 8089 	bne.w	8002aba <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 80029a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	f000 8086 	beq.w	8002abe <HAL_I2C_Mem_Write+0x152>
 80029b2:	2301      	movs	r3, #1
 80029b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b8:	6823      	ldr	r3, [r4, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	f012 0f01 	tst.w	r2, #1
 80029c0:	d103      	bne.n	80029ca <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029ca:	6822      	ldr	r2, [r4, #0]
 80029cc:	6813      	ldr	r3, [r2, #0]
 80029ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029d2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029d4:	2321      	movs	r3, #33	; 0x21
 80029d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029da:	2340      	movs	r3, #64	; 0x40
 80029dc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80029e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029e6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029e8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80029ec:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80029f0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029f2:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_I2C_Mem_Write+0x160>)
 80029f4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029f6:	9501      	str	r5, [sp, #4]
 80029f8:	9600      	str	r6, [sp, #0]
 80029fa:	464b      	mov	r3, r9
 80029fc:	4642      	mov	r2, r8
 80029fe:	4639      	mov	r1, r7
 8002a00:	4620      	mov	r0, r4
 8002a02:	f7ff fe3f 	bl	8002684 <I2C_RequestMemoryWrite>
 8002a06:	2800      	cmp	r0, #0
 8002a08:	d15b      	bne.n	8002ac2 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 8002a0a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d035      	beq.n	8002a7c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a10:	462a      	mov	r2, r5
 8002a12:	4631      	mov	r1, r6
 8002a14:	4620      	mov	r0, r4
 8002a16:	f7ff fe0b 	bl	8002630 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a1a:	bb20      	cbnz	r0, 8002a66 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a1e:	6823      	ldr	r3, [r4, #0]
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002a24:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a26:	1c4b      	adds	r3, r1, #1
 8002a28:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002a2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002a2c:	3a01      	subs	r2, #1
 8002a2e:	b292      	uxth	r2, r2
 8002a30:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002a32:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	6958      	ldr	r0, [r3, #20]
 8002a40:	f010 0f04 	tst.w	r0, #4
 8002a44:	d0e1      	beq.n	8002a0a <HAL_I2C_Mem_Write+0x9e>
 8002a46:	2a00      	cmp	r2, #0
 8002a48:	d0df      	beq.n	8002a0a <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a4a:	784a      	ldrb	r2, [r1, #1]
 8002a4c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002a54:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002a56:	3b01      	subs	r3, #1
 8002a58:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8002a5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002a64:	e7d1      	b.n	8002a0a <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a68:	2b04      	cmp	r3, #4
 8002a6a:	d001      	beq.n	8002a70 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	e78e      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a70:	6822      	ldr	r2, [r4, #0]
 8002a72:	6813      	ldr	r3, [r2, #0]
 8002a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a78:	6013      	str	r3, [r2, #0]
 8002a7a:	e7f7      	b.n	8002a6c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7c:	462a      	mov	r2, r5
 8002a7e:	4631      	mov	r1, r6
 8002a80:	4620      	mov	r0, r4
 8002a82:	f7ff fe6b 	bl	800275c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a86:	b150      	cbz	r0, 8002a9e <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d001      	beq.n	8002a92 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e77d      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a92:	6822      	ldr	r2, [r4, #0]
 8002a94:	6813      	ldr	r3, [r2, #0]
 8002a96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	e7f7      	b.n	8002a8e <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a9e:	6822      	ldr	r2, [r4, #0]
 8002aa0:	6813      	ldr	r3, [r2, #0]
 8002aa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aa6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa8:	2320      	movs	r3, #32
 8002aaa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002ab4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002ab8:	e769      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 8002aba:	2002      	movs	r0, #2
 8002abc:	e767      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 8002abe:	2002      	movs	r0, #2
 8002ac0:	e765      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	e763      	b.n	800298e <HAL_I2C_Mem_Write+0x22>
 8002ac6:	bf00      	nop
 8002ac8:	00100002 	.word	0x00100002
 8002acc:	ffff0000 	.word	0xffff0000

08002ad0 <HAL_I2C_IsDeviceReady>:
{
 8002ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	4605      	mov	r5, r0
 8002ad8:	4689      	mov	r9, r1
 8002ada:	4692      	mov	sl, r2
 8002adc:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 8002ade:	f7ff fb59 	bl	8002194 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b20      	cmp	r3, #32
 8002aea:	d003      	beq.n	8002af4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8002aec:	2002      	movs	r0, #2
}
 8002aee:	b004      	add	sp, #16
 8002af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002af4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002af6:	9000      	str	r0, [sp, #0]
 8002af8:	2319      	movs	r3, #25
 8002afa:	2201      	movs	r2, #1
 8002afc:	4958      	ldr	r1, [pc, #352]	; (8002c60 <HAL_I2C_IsDeviceReady+0x190>)
 8002afe:	4628      	mov	r0, r5
 8002b00:	f7ff fd07 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 8002b04:	2800      	cmp	r0, #0
 8002b06:	f040 80a2 	bne.w	8002c4e <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 8002b0a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f000 809f 	beq.w	8002c52 <HAL_I2C_IsDeviceReady+0x182>
 8002b14:	2301      	movs	r3, #1
 8002b16:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b1a:	682b      	ldr	r3, [r5, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	f012 0f01 	tst.w	r2, #1
 8002b22:	d103      	bne.n	8002b2c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b2c:	682a      	ldr	r2, [r5, #0]
 8002b2e:	6813      	ldr	r3, [r2, #0]
 8002b30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b34:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b36:	2324      	movs	r3, #36	; 0x24
 8002b38:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b40:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002b44:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8002b46:	f04f 0801 	mov.w	r8, #1
 8002b4a:	e03f      	b.n	8002bcc <HAL_I2C_IsDeviceReady+0xfc>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b4c:	682b      	ldr	r3, [r5, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002b54:	d002      	beq.n	8002b5c <HAL_I2C_IsDeviceReady+0x8c>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b5a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8002b5c:	2003      	movs	r0, #3
 8002b5e:	e7c6      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b60:	23a0      	movs	r3, #160	; 0xa0
 8002b62:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b66:	682a      	ldr	r2, [r5, #0]
 8002b68:	6953      	ldr	r3, [r2, #20]
 8002b6a:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b6e:	6952      	ldr	r2, [r2, #20]
 8002b70:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b74:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 8002b78:	b2e4      	uxtb	r4, r4
 8002b7a:	2ca0      	cmp	r4, #160	; 0xa0
 8002b7c:	d009      	beq.n	8002b92 <HAL_I2C_IsDeviceReady+0xc2>
 8002b7e:	b943      	cbnz	r3, 8002b92 <HAL_I2C_IsDeviceReady+0xc2>
 8002b80:	b93a      	cbnz	r2, 8002b92 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7ff fb07 	bl	8002194 <HAL_GetTick>
 8002b86:	1bc0      	subs	r0, r0, r7
 8002b88:	42b0      	cmp	r0, r6
 8002b8a:	d8e9      	bhi.n	8002b60 <HAL_I2C_IsDeviceReady+0x90>
 8002b8c:	2e00      	cmp	r6, #0
 8002b8e:	d1ea      	bne.n	8002b66 <HAL_I2C_IsDeviceReady+0x96>
 8002b90:	e7e6      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8002b92:	2320      	movs	r3, #32
 8002b94:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b98:	682b      	ldr	r3, [r5, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	f012 0f02 	tst.w	r2, #2
 8002ba0:	d132      	bne.n	8002c08 <HAL_I2C_IsDeviceReady+0x138>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002baa:	682b      	ldr	r3, [r5, #0]
 8002bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb0:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb2:	9700      	str	r7, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4929      	ldr	r1, [pc, #164]	; (8002c60 <HAL_I2C_IsDeviceReady+0x190>)
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f7ff fca9 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	2800      	cmp	r0, #0
 8002bc2:	d14a      	bne.n	8002c5a <HAL_I2C_IsDeviceReady+0x18a>
      I2C_Trials++;
 8002bc4:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8002bc8:	45d0      	cmp	r8, sl
 8002bca:	d238      	bcs.n	8002c3e <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bcc:	682a      	ldr	r2, [r5, #0]
 8002bce:	6813      	ldr	r3, [r2, #0]
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bd6:	9700      	str	r7, [sp, #0]
 8002bd8:	4633      	mov	r3, r6
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff fc96 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 8002be6:	2800      	cmp	r0, #0
 8002be8:	d1b0      	bne.n	8002b4c <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 8002bf0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8002bf2:	f7ff facf 	bl	8002194 <HAL_GetTick>
 8002bf6:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bf8:	682a      	ldr	r2, [r5, #0]
 8002bfa:	6953      	ldr	r3, [r2, #20]
 8002bfc:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c00:	6952      	ldr	r2, [r2, #20]
 8002c02:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c06:	e7b5      	b.n	8002b74 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c10:	2300      	movs	r3, #0
 8002c12:	9303      	str	r3, [sp, #12]
 8002c14:	682b      	ldr	r3, [r5, #0]
 8002c16:	695a      	ldr	r2, [r3, #20]
 8002c18:	9203      	str	r2, [sp, #12]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	9303      	str	r3, [sp, #12]
 8002c1e:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c20:	9700      	str	r7, [sp, #0]
 8002c22:	2319      	movs	r3, #25
 8002c24:	2201      	movs	r2, #1
 8002c26:	490e      	ldr	r1, [pc, #56]	; (8002c60 <HAL_I2C_IsDeviceReady+0x190>)
 8002c28:	4628      	mov	r0, r5
 8002c2a:	f7ff fc72 	bl	8002512 <I2C_WaitOnFlagUntilTimeout>
 8002c2e:	b990      	cbnz	r0, 8002c56 <HAL_I2C_IsDeviceReady+0x186>
        hi2c->State = HAL_I2C_STATE_READY;
 8002c30:	2320      	movs	r3, #32
 8002c32:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002c36:	2300      	movs	r3, #0
 8002c38:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8002c3c:	e757      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002c44:	2300      	movs	r3, #0
 8002c46:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e74f      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002c4e:	2002      	movs	r0, #2
 8002c50:	e74d      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8002c52:	2002      	movs	r0, #2
 8002c54:	e74b      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002c56:	2001      	movs	r0, #1
 8002c58:	e749      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	e747      	b.n	8002aee <HAL_I2C_IsDeviceReady+0x1e>
 8002c5e:	bf00      	nop
 8002c60:	00100002 	.word	0x00100002

08002c64 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	2800      	cmp	r0, #0
 8002c66:	f000 81df 	beq.w	8003028 <HAL_RCC_OscConfig+0x3c4>
{
 8002c6a:	b570      	push	{r4, r5, r6, lr}
 8002c6c:	b082      	sub	sp, #8
 8002c6e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c70:	6803      	ldr	r3, [r0, #0]
 8002c72:	f013 0f01 	tst.w	r3, #1
 8002c76:	d03b      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c78:	4ba6      	ldr	r3, [pc, #664]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b04      	cmp	r3, #4
 8002c82:	d02c      	beq.n	8002cde <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c84:	4ba3      	ldr	r3, [pc, #652]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d021      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c90:	6863      	ldr	r3, [r4, #4]
 8002c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c96:	d04f      	beq.n	8002d38 <HAL_RCC_OscConfig+0xd4>
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d052      	beq.n	8002d44 <HAL_RCC_OscConfig+0xe0>
 8002c9e:	4b9d      	ldr	r3, [pc, #628]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d050      	beq.n	8002d58 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb6:	f7ff fa6d 	bl	8002194 <HAL_GetTick>
 8002cba:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cbc:	4b95      	ldr	r3, [pc, #596]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002cc4:	d114      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cc6:	f7ff fa65 	bl	8002194 <HAL_GetTick>
 8002cca:	1b40      	subs	r0, r0, r5
 8002ccc:	2864      	cmp	r0, #100	; 0x64
 8002cce:	d9f5      	bls.n	8002cbc <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	e1b0      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd4:	4b8f      	ldr	r3, [pc, #572]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002cdc:	d0d8      	beq.n	8002c90 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cde:	4b8d      	ldr	r3, [pc, #564]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ce6:	d003      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x8c>
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	f000 819e 	beq.w	800302c <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	f013 0f02 	tst.w	r3, #2
 8002cf6:	d054      	beq.n	8002da2 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cf8:	4b86      	ldr	r3, [pc, #536]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f013 0f0c 	tst.w	r3, #12
 8002d00:	d03e      	beq.n	8002d80 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b84      	ldr	r3, [pc, #528]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0a:	2b08      	cmp	r3, #8
 8002d0c:	d033      	beq.n	8002d76 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d0e:	68e3      	ldr	r3, [r4, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d067      	beq.n	8002de4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d14:	4b80      	ldr	r3, [pc, #512]	; (8002f18 <HAL_RCC_OscConfig+0x2b4>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d1a:	f7ff fa3b 	bl	8002194 <HAL_GetTick>
 8002d1e:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d20:	4b7c      	ldr	r3, [pc, #496]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f013 0f02 	tst.w	r3, #2
 8002d28:	d153      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2a:	f7ff fa33 	bl	8002194 <HAL_GetTick>
 8002d2e:	1b40      	subs	r0, r0, r5
 8002d30:	2802      	cmp	r0, #2
 8002d32:	d9f5      	bls.n	8002d20 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002d34:	2003      	movs	r0, #3
 8002d36:	e17e      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d38:	4a76      	ldr	r2, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d3a:	6813      	ldr	r3, [r2, #0]
 8002d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e7b5      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4c>
 8002d44:	4b73      	ldr	r3, [pc, #460]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e7ab      	b.n	8002cb0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002d58:	f7ff fa1c 	bl	8002194 <HAL_GetTick>
 8002d5c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002d66:	d0c3      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d68:	f7ff fa14 	bl	8002194 <HAL_GetTick>
 8002d6c:	1b40      	subs	r0, r0, r5
 8002d6e:	2864      	cmp	r0, #100	; 0x64
 8002d70:	d9f5      	bls.n	8002d5e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002d72:	2003      	movs	r0, #3
 8002d74:	e15f      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b67      	ldr	r3, [pc, #412]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002d7e:	d1c6      	bne.n	8002d0e <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d80:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f013 0f02 	tst.w	r3, #2
 8002d88:	d003      	beq.n	8002d92 <HAL_RCC_OscConfig+0x12e>
 8002d8a:	68e3      	ldr	r3, [r4, #12]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	f040 814f 	bne.w	8003030 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4a60      	ldr	r2, [pc, #384]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002d94:	6813      	ldr	r3, [r2, #0]
 8002d96:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002d9a:	6921      	ldr	r1, [r4, #16]
 8002d9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002da0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	f013 0f08 	tst.w	r3, #8
 8002da8:	d040      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002daa:	6963      	ldr	r3, [r4, #20]
 8002dac:	b363      	cbz	r3, 8002e08 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dae:	4b5b      	ldr	r3, [pc, #364]	; (8002f1c <HAL_RCC_OscConfig+0x2b8>)
 8002db0:	2201      	movs	r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7ff f9ee 	bl	8002194 <HAL_GetTick>
 8002db8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dbe:	f013 0f02 	tst.w	r3, #2
 8002dc2:	d133      	bne.n	8002e2c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7ff f9e6 	bl	8002194 <HAL_GetTick>
 8002dc8:	1b40      	subs	r0, r0, r5
 8002dca:	2802      	cmp	r0, #2
 8002dcc:	d9f5      	bls.n	8002dba <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002dce:	2003      	movs	r0, #3
 8002dd0:	e131      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd2:	4a50      	ldr	r2, [pc, #320]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002dd4:	6813      	ldr	r3, [r2, #0]
 8002dd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002dda:	6921      	ldr	r1, [r4, #16]
 8002ddc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002de0:	6013      	str	r3, [r2, #0]
 8002de2:	e7de      	b.n	8002da2 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <HAL_RCC_OscConfig+0x2b4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002dea:	f7ff f9d3 	bl	8002194 <HAL_GetTick>
 8002dee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df0:	4b48      	ldr	r3, [pc, #288]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f013 0f02 	tst.w	r3, #2
 8002df8:	d0d3      	beq.n	8002da2 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dfa:	f7ff f9cb 	bl	8002194 <HAL_GetTick>
 8002dfe:	1b40      	subs	r0, r0, r5
 8002e00:	2802      	cmp	r0, #2
 8002e02:	d9f5      	bls.n	8002df0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8002e04:	2003      	movs	r0, #3
 8002e06:	e116      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e08:	4b44      	ldr	r3, [pc, #272]	; (8002f1c <HAL_RCC_OscConfig+0x2b8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e0e:	f7ff f9c1 	bl	8002194 <HAL_GetTick>
 8002e12:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b3f      	ldr	r3, [pc, #252]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f013 0f02 	tst.w	r3, #2
 8002e1c:	d006      	beq.n	8002e2c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e1e:	f7ff f9b9 	bl	8002194 <HAL_GetTick>
 8002e22:	1b40      	subs	r0, r0, r5
 8002e24:	2802      	cmp	r0, #2
 8002e26:	d9f5      	bls.n	8002e14 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
 8002e2a:	e104      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	f013 0f04 	tst.w	r3, #4
 8002e32:	d078      	beq.n	8002f26 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e34:	4b37      	ldr	r3, [pc, #220]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002e3c:	d10d      	bne.n	8002e5a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	4b34      	ldr	r3, [pc, #208]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e56:	2501      	movs	r5, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8002e5a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5c:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_RCC_OscConfig+0x2bc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002e64:	d021      	beq.n	8002eaa <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d032      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x26e>
 8002e6c:	2b05      	cmp	r3, #5
 8002e6e:	d036      	beq.n	8002ede <HAL_RCC_OscConfig+0x27a>
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	671a      	str	r2, [r3, #112]	; 0x70
 8002e7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e7c:	f022 0204 	bic.w	r2, r2, #4
 8002e80:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e82:	68a3      	ldr	r3, [r4, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d034      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7ff f984 	bl	8002194 <HAL_GetTick>
 8002e8c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b21      	ldr	r3, [pc, #132]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	f013 0f02 	tst.w	r3, #2
 8002e96:	d145      	bne.n	8002f24 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7ff f97c 	bl	8002194 <HAL_GetTick>
 8002e9c:	1b80      	subs	r0, r0, r6
 8002e9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ea2:	4298      	cmp	r0, r3
 8002ea4:	d9f3      	bls.n	8002e8e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	e0c5      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_RCC_OscConfig+0x2bc>)
 8002eac:	6813      	ldr	r3, [r2, #0]
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002eb4:	f7ff f96e 	bl	8002194 <HAL_GetTick>
 8002eb8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCC_OscConfig+0x2bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002ec2:	d1d0      	bne.n	8002e66 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ec4:	f7ff f966 	bl	8002194 <HAL_GetTick>
 8002ec8:	1b80      	subs	r0, r0, r6
 8002eca:	2802      	cmp	r0, #2
 8002ecc:	d9f5      	bls.n	8002eba <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002ece:	2003      	movs	r0, #3
 8002ed0:	e0b1      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002ed4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	e7d1      	b.n	8002e82 <HAL_RCC_OscConfig+0x21e>
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002ee0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ee2:	f042 0204 	orr.w	r2, r2, #4
 8002ee6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ee8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	671a      	str	r2, [r3, #112]	; 0x70
 8002ef0:	e7c7      	b.n	8002e82 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ef2:	f7ff f94f 	bl	8002194 <HAL_GetTick>
 8002ef6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x2b0>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	f013 0f02 	tst.w	r3, #2
 8002f00:	d010      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f02:	f7ff f947 	bl	8002194 <HAL_GetTick>
 8002f06:	1b80      	subs	r0, r0, r6
 8002f08:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f0c:	4298      	cmp	r0, r3
 8002f0e:	d9f3      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002f10:	2003      	movs	r0, #3
 8002f12:	e090      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470000 	.word	0x42470000
 8002f1c:	42470e80 	.word	0x42470e80
 8002f20:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f24:	b9ed      	cbnz	r5, 8002f62 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f26:	69a3      	ldr	r3, [r4, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8083 	beq.w	8003034 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2e:	4a49      	ldr	r2, [pc, #292]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002f30:	6892      	ldr	r2, [r2, #8]
 8002f32:	f002 020c 	and.w	r2, r2, #12
 8002f36:	2a08      	cmp	r2, #8
 8002f38:	d051      	beq.n	8002fde <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d017      	beq.n	8002f6e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3e:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCC_OscConfig+0x3f4>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7ff f926 	bl	8002194 <HAL_GetTick>
 8002f48:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	4b42      	ldr	r3, [pc, #264]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f52:	d042      	beq.n	8002fda <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7ff f91e 	bl	8002194 <HAL_GetTick>
 8002f58:	1b00      	subs	r0, r0, r4
 8002f5a:	2802      	cmp	r0, #2
 8002f5c:	d9f5      	bls.n	8002f4a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2003      	movs	r0, #3
 8002f60:	e069      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4a3c      	ldr	r2, [pc, #240]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002f64:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6c:	e7db      	b.n	8002f26 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b3a      	ldr	r3, [pc, #232]	; (8003058 <HAL_RCC_OscConfig+0x3f4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002f74:	f7ff f90e 	bl	8002194 <HAL_GetTick>
 8002f78:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	4b36      	ldr	r3, [pc, #216]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002f82:	d006      	beq.n	8002f92 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7ff f906 	bl	8002194 <HAL_GetTick>
 8002f88:	1b40      	subs	r0, r0, r5
 8002f8a:	2802      	cmp	r0, #2
 8002f8c:	d9f5      	bls.n	8002f7a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002f8e:	2003      	movs	r0, #3
 8002f90:	e051      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f92:	69e3      	ldr	r3, [r4, #28]
 8002f94:	6a22      	ldr	r2, [r4, #32]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002f9a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fa8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002faa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002fae:	4a29      	ldr	r2, [pc, #164]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002fb0:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002fb2:	4b29      	ldr	r3, [pc, #164]	; (8003058 <HAL_RCC_OscConfig+0x3f4>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002fb8:	f7ff f8ec 	bl	8002194 <HAL_GetTick>
 8002fbc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fbe:	4b25      	ldr	r3, [pc, #148]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002fc6:	d106      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7ff f8e4 	bl	8002194 <HAL_GetTick>
 8002fcc:	1b00      	subs	r0, r0, r4
 8002fce:	2802      	cmp	r0, #2
 8002fd0:	d9f5      	bls.n	8002fbe <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002fd2:	2003      	movs	r0, #3
 8002fd4:	e02f      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e02d      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e02b      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d02b      	beq.n	800303a <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_RCC_OscConfig+0x3f0>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fe6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002fea:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fec:	4291      	cmp	r1, r2
 8002fee:	d126      	bne.n	800303e <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ff0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	428a      	cmp	r2, r1
 8002ff8:	d123      	bne.n	8003042 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ffc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003000:	401a      	ands	r2, r3
 8003002:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003006:	d11e      	bne.n	8003046 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800300c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800300e:	0852      	lsrs	r2, r2, #1
 8003010:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003012:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003016:	d118      	bne.n	800304a <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003018:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800301c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800301e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003022:	d114      	bne.n	800304e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003024:	2000      	movs	r0, #0
 8003026:	e006      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
}
 800302a:	4770      	bx	lr
        return HAL_ERROR;
 800302c:	2001      	movs	r0, #1
 800302e:	e002      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8003030:	2001      	movs	r0, #1
 8003032:	e000      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8003034:	2000      	movs	r0, #0
}
 8003036:	b002      	add	sp, #8
 8003038:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 800303a:	2001      	movs	r0, #1
 800303c:	e7fb      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 800303e:	2001      	movs	r0, #1
 8003040:	e7f9      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 8003042:	2001      	movs	r0, #1
 8003044:	e7f7      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 8003046:	2001      	movs	r0, #1
 8003048:	e7f5      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 800304a:	2001      	movs	r0, #1
 800304c:	e7f3      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 800304e:	2001      	movs	r0, #1
 8003050:	e7f1      	b.n	8003036 <HAL_RCC_OscConfig+0x3d2>
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	42470060 	.word	0x42470060

0800305c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800305c:	4b01      	ldr	r3, [pc, #4]	; (8003064 <HAL_RCC_EnableCSS+0x8>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]
}
 8003062:	4770      	bx	lr
 8003064:	4247004c 	.word	0x4247004c

08003068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800306a:	4b2f      	ldr	r3, [pc, #188]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
 8003072:	2b04      	cmp	r3, #4
 8003074:	d053      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0xb6>
 8003076:	2b08      	cmp	r3, #8
 8003078:	d153      	bne.n	8003122 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800307a:	4b2b      	ldr	r3, [pc, #172]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800307c:	685a      	ldr	r2, [r3, #4]
 800307e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8003088:	d028      	beq.n	80030dc <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800308a:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8003092:	0158      	lsls	r0, r3, #5
 8003094:	2100      	movs	r1, #0
 8003096:	1ac0      	subs	r0, r0, r3
 8003098:	f161 0100 	sbc.w	r1, r1, #0
 800309c:	018e      	lsls	r6, r1, #6
 800309e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 80030a2:	0187      	lsls	r7, r0, #6
 80030a4:	1a3c      	subs	r4, r7, r0
 80030a6:	eb66 0501 	sbc.w	r5, r6, r1
 80030aa:	00e9      	lsls	r1, r5, #3
 80030ac:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 80030b0:	00e0      	lsls	r0, r4, #3
 80030b2:	18c0      	adds	r0, r0, r3
 80030b4:	f141 0100 	adc.w	r1, r1, #0
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 80030be:	0244      	lsls	r4, r0, #9
 80030c0:	4620      	mov	r0, r4
 80030c2:	4619      	mov	r1, r3
 80030c4:	2300      	movs	r3, #0
 80030c6:	f7fd fddf 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80030d2:	3301      	adds	r3, #1
 80030d4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80030d6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80030da:	e023      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030dc:	4b12      	ldr	r3, [pc, #72]	; (8003128 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80030e4:	015c      	lsls	r4, r3, #5
 80030e6:	2500      	movs	r5, #0
 80030e8:	1ae4      	subs	r4, r4, r3
 80030ea:	f165 0500 	sbc.w	r5, r5, #0
 80030ee:	01ae      	lsls	r6, r5, #6
 80030f0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 80030f4:	01a7      	lsls	r7, r4, #6
 80030f6:	1b38      	subs	r0, r7, r4
 80030f8:	eb66 0105 	sbc.w	r1, r6, r5
 80030fc:	00cc      	lsls	r4, r1, #3
 80030fe:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8003102:	00c5      	lsls	r5, r0, #3
 8003104:	18e8      	adds	r0, r5, r3
 8003106:	f144 0100 	adc.w	r1, r4, #0
 800310a:	028b      	lsls	r3, r1, #10
 800310c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8003110:	0284      	lsls	r4, r0, #10
 8003112:	4620      	mov	r0, r4
 8003114:	4619      	mov	r1, r3
 8003116:	2300      	movs	r3, #0
 8003118:	f7fd fdb6 	bl	8000c88 <__aeabi_uldivmod>
 800311c:	e7d5      	b.n	80030ca <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 800311e:	4803      	ldr	r0, [pc, #12]	; (800312c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003120:	e000      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003122:	4803      	ldr	r0, [pc, #12]	; (8003130 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	007a1200 	.word	0x007a1200
 8003130:	00f42400 	.word	0x00f42400

08003134 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003134:	2800      	cmp	r0, #0
 8003136:	f000 809b 	beq.w	8003270 <HAL_RCC_ClockConfig+0x13c>
{
 800313a:	b570      	push	{r4, r5, r6, lr}
 800313c:	460d      	mov	r5, r1
 800313e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b4f      	ldr	r3, [pc, #316]	; (8003280 <HAL_RCC_ClockConfig+0x14c>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	428b      	cmp	r3, r1
 800314a:	d208      	bcs.n	800315e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314c:	b2cb      	uxtb	r3, r1
 800314e:	4a4c      	ldr	r2, [pc, #304]	; (8003280 <HAL_RCC_ClockConfig+0x14c>)
 8003150:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003152:	6813      	ldr	r3, [r2, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	428b      	cmp	r3, r1
 800315a:	f040 808b 	bne.w	8003274 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800315e:	6823      	ldr	r3, [r4, #0]
 8003160:	f013 0f02 	tst.w	r3, #2
 8003164:	d017      	beq.n	8003196 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003166:	f013 0f04 	tst.w	r3, #4
 800316a:	d004      	beq.n	8003176 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800316c:	4a45      	ldr	r2, [pc, #276]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 800316e:	6893      	ldr	r3, [r2, #8]
 8003170:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003174:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	f013 0f08 	tst.w	r3, #8
 800317c:	d004      	beq.n	8003188 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317e:	4a41      	ldr	r2, [pc, #260]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 8003180:	6893      	ldr	r3, [r2, #8]
 8003182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4a3e      	ldr	r2, [pc, #248]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 800318a:	6893      	ldr	r3, [r2, #8]
 800318c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003190:	68a1      	ldr	r1, [r4, #8]
 8003192:	430b      	orrs	r3, r1
 8003194:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	f013 0f01 	tst.w	r3, #1
 800319c:	d032      	beq.n	8003204 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800319e:	6863      	ldr	r3, [r4, #4]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d021      	beq.n	80031e8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031a4:	1e9a      	subs	r2, r3, #2
 80031a6:	2a01      	cmp	r2, #1
 80031a8:	d925      	bls.n	80031f6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	4a36      	ldr	r2, [pc, #216]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	f012 0f02 	tst.w	r2, #2
 80031b2:	d061      	beq.n	8003278 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b4:	4933      	ldr	r1, [pc, #204]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 80031b6:	688a      	ldr	r2, [r1, #8]
 80031b8:	f022 0203 	bic.w	r2, r2, #3
 80031bc:	4313      	orrs	r3, r2
 80031be:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80031c0:	f7fe ffe8 	bl	8002194 <HAL_GetTick>
 80031c4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	6862      	ldr	r2, [r4, #4]
 80031d0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80031d4:	d016      	beq.n	8003204 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031d6:	f7fe ffdd 	bl	8002194 <HAL_GetTick>
 80031da:	1b80      	subs	r0, r0, r6
 80031dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80031e0:	4298      	cmp	r0, r3
 80031e2:	d9f0      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80031e4:	2003      	movs	r0, #3
 80031e6:	e042      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e8:	4a26      	ldr	r2, [pc, #152]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80031f0:	d1e0      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80031f2:	2001      	movs	r0, #1
 80031f4:	e03b      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80031fe:	d1d9      	bne.n	80031b4 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003200:	2001      	movs	r0, #1
 8003202:	e034      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <HAL_RCC_ClockConfig+0x14c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	42ab      	cmp	r3, r5
 800320e:	d907      	bls.n	8003220 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003210:	b2ea      	uxtb	r2, r5
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_ClockConfig+0x14c>)
 8003214:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	42ab      	cmp	r3, r5
 800321e:	d12d      	bne.n	800327c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	f013 0f04 	tst.w	r3, #4
 8003226:	d006      	beq.n	8003236 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 800322a:	6893      	ldr	r3, [r2, #8]
 800322c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003230:	68e1      	ldr	r1, [r4, #12]
 8003232:	430b      	orrs	r3, r1
 8003234:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f013 0f08 	tst.w	r3, #8
 800323c:	d007      	beq.n	800324e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800323e:	4a11      	ldr	r2, [pc, #68]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 8003240:	6893      	ldr	r3, [r2, #8]
 8003242:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003246:	6921      	ldr	r1, [r4, #16]
 8003248:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800324c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800324e:	f7ff ff0b 	bl	8003068 <HAL_RCC_GetSysClockFreq>
 8003252:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HAL_RCC_ClockConfig+0x150>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800325a:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <HAL_RCC_ClockConfig+0x154>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	40d8      	lsrs	r0, r3
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_RCC_ClockConfig+0x158>)
 8003262:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_RCC_ClockConfig+0x15c>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f7fe ff48 	bl	80020fc <HAL_InitTick>
  return HAL_OK;
 800326c:	2000      	movs	r0, #0
}
 800326e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003270:	2001      	movs	r0, #1
}
 8003272:	4770      	bx	lr
      return HAL_ERROR;
 8003274:	2001      	movs	r0, #1
 8003276:	e7fa      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003278:	2001      	movs	r0, #1
 800327a:	e7f8      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800327c:	2001      	movs	r0, #1
 800327e:	e7f6      	b.n	800326e <HAL_RCC_ClockConfig+0x13a>
 8003280:	40023c00 	.word	0x40023c00
 8003284:	40023800 	.word	0x40023800
 8003288:	080087bc 	.word	0x080087bc
 800328c:	2000000c 	.word	0x2000000c
 8003290:	20000014 	.word	0x20000014

08003294 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003294:	4b01      	ldr	r3, [pc, #4]	; (800329c <HAL_RCC_GetHCLKFreq+0x8>)
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	2000000c 	.word	0x2000000c

080032a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032a0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032a2:	f7ff fff7 	bl	8003294 <HAL_RCC_GetHCLKFreq>
 80032a6:	4b04      	ldr	r3, [pc, #16]	; (80032b8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80032ae:	4a03      	ldr	r2, [pc, #12]	; (80032bc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80032b0:	5cd3      	ldrb	r3, [r2, r3]
}
 80032b2:	40d8      	lsrs	r0, r3
 80032b4:	bd08      	pop	{r3, pc}
 80032b6:	bf00      	nop
 80032b8:	40023800 	.word	0x40023800
 80032bc:	080087cc 	.word	0x080087cc

080032c0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80032c0:	4770      	bx	lr
	...

080032c4 <HAL_RCC_NMI_IRQHandler>:
{
 80032c4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80032c6:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032ce:	d100      	bne.n	80032d2 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80032d0:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80032d2:	f7ff fff5 	bl	80032c0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80032d6:	4b03      	ldr	r3, [pc, #12]	; (80032e4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80032d8:	2280      	movs	r2, #128	; 0x80
 80032da:	701a      	strb	r2, [r3, #0]
}
 80032dc:	e7f8      	b.n	80032d0 <HAL_RCC_NMI_IRQHandler+0xc>
 80032de:	bf00      	nop
 80032e0:	40023800 	.word	0x40023800
 80032e4:	4002380e 	.word	0x4002380e

080032e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	4605      	mov	r5, r0
 80032f0:	4688      	mov	r8, r1
 80032f2:	4617      	mov	r7, r2
 80032f4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032f6:	f7fe ff4d 	bl	8002194 <HAL_GetTick>
 80032fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032fc:	1a1b      	subs	r3, r3, r0
 80032fe:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8003302:	f7fe ff47 	bl	8002194 <HAL_GetTick>
 8003306:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003310:	fb09 f303 	mul.w	r3, r9, r3
 8003314:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003316:	682b      	ldr	r3, [r5, #0]
 8003318:	689c      	ldr	r4, [r3, #8]
 800331a:	ea38 0304 	bics.w	r3, r8, r4
 800331e:	bf0c      	ite	eq
 8003320:	2401      	moveq	r4, #1
 8003322:	2400      	movne	r4, #0
 8003324:	42bc      	cmp	r4, r7
 8003326:	d040      	beq.n	80033aa <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003328:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800332c:	d0f3      	beq.n	8003316 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800332e:	f7fe ff31 	bl	8002194 <HAL_GetTick>
 8003332:	eba0 000a 	sub.w	r0, r0, sl
 8003336:	4548      	cmp	r0, r9
 8003338:	d20a      	bcs.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x68>
 800333a:	f1b9 0f00 	cmp.w	r9, #0
 800333e:	d007      	beq.n	8003350 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003340:	9a01      	ldr	r2, [sp, #4]
 8003342:	b102      	cbz	r2, 8003346 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003344:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003346:	9b01      	ldr	r3, [sp, #4]
 8003348:	3b01      	subs	r3, #1
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	4691      	mov	r9, r2
 800334e:	e7e2      	b.n	8003316 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003350:	682a      	ldr	r2, [r5, #0]
 8003352:	6853      	ldr	r3, [r2, #4]
 8003354:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003358:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800335a:	686b      	ldr	r3, [r5, #4]
 800335c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003360:	d00b      	beq.n	800337a <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003362:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003368:	d014      	beq.n	8003394 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800336a:	2301      	movs	r3, #1
 800336c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003370:	2300      	movs	r3, #0
 8003372:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8003376:	2003      	movs	r0, #3
 8003378:	e018      	b.n	80033ac <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800337a:	68ab      	ldr	r3, [r5, #8]
 800337c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003380:	d002      	beq.n	8003388 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003386:	d1ec      	bne.n	8003362 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003388:	682a      	ldr	r2, [r5, #0]
 800338a:	6813      	ldr	r3, [r2, #0]
 800338c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e7e6      	b.n	8003362 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003394:	682a      	ldr	r2, [r5, #0]
 8003396:	6813      	ldr	r3, [r2, #0]
 8003398:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	682a      	ldr	r2, [r5, #0]
 80033a0:	6813      	ldr	r3, [r2, #0]
 80033a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	e7df      	b.n	800336a <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 80033aa:	2000      	movs	r0, #0
}
 80033ac:	b002      	add	sp, #8
 80033ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033b2:	bf00      	nop
 80033b4:	2000000c 	.word	0x2000000c

080033b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b530      	push	{r4, r5, lr}
 80033ba:	b085      	sub	sp, #20
 80033bc:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <SPI_EndRxTxTransaction+0x60>)
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	4b16      	ldr	r3, [pc, #88]	; (800341c <SPI_EndRxTxTransaction+0x64>)
 80033c4:	fba3 3000 	umull	r3, r0, r3, r0
 80033c8:	0d40      	lsrs	r0, r0, #21
 80033ca:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80033ce:	fb05 f000 	mul.w	r0, r5, r0
 80033d2:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033d4:	6863      	ldr	r3, [r4, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d00b      	beq.n	80033f4 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80033dc:	9b03      	ldr	r3, [sp, #12]
 80033de:	b1bb      	cbz	r3, 8003410 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80033e0:	9b03      	ldr	r3, [sp, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033e6:	6823      	ldr	r3, [r4, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033ee:	d1f5      	bne.n	80033dc <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80033f0:	2000      	movs	r0, #0
 80033f2:	e00e      	b.n	8003412 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f4:	9200      	str	r2, [sp, #0]
 80033f6:	460b      	mov	r3, r1
 80033f8:	2200      	movs	r2, #0
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	4620      	mov	r0, r4
 80033fe:	f7ff ff73 	bl	80032e8 <SPI_WaitFlagStateUntilTimeout>
 8003402:	b130      	cbz	r0, 8003412 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003404:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003406:	f043 0320 	orr.w	r3, r3, #32
 800340a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800340c:	2003      	movs	r0, #3
 800340e:	e000      	b.n	8003412 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 8003410:	2000      	movs	r0, #0
}
 8003412:	b005      	add	sp, #20
 8003414:	bd30      	pop	{r4, r5, pc}
 8003416:	bf00      	nop
 8003418:	2000000c 	.word	0x2000000c
 800341c:	165e9f81 	.word	0x165e9f81

08003420 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003420:	2800      	cmp	r0, #0
 8003422:	d05a      	beq.n	80034da <HAL_SPI_Init+0xba>
{
 8003424:	b510      	push	{r4, lr}
 8003426:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003428:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800342a:	b933      	cbnz	r3, 800343a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800342c:	6843      	ldr	r3, [r0, #4]
 800342e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003432:	d005      	beq.n	8003440 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003434:	2300      	movs	r3, #0
 8003436:	61c3      	str	r3, [r0, #28]
 8003438:	e002      	b.n	8003440 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800343a:	2300      	movs	r3, #0
 800343c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003440:	2300      	movs	r3, #0
 8003442:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003444:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003448:	2b00      	cmp	r3, #0
 800344a:	d040      	beq.n	80034ce <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800344c:	2302      	movs	r3, #2
 800344e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800345c:	6863      	ldr	r3, [r4, #4]
 800345e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003462:	68a2      	ldr	r2, [r4, #8]
 8003464:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003468:	4313      	orrs	r3, r2
 800346a:	68e2      	ldr	r2, [r4, #12]
 800346c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003470:	4313      	orrs	r3, r2
 8003472:	6922      	ldr	r2, [r4, #16]
 8003474:	f002 0202 	and.w	r2, r2, #2
 8003478:	4313      	orrs	r3, r2
 800347a:	6962      	ldr	r2, [r4, #20]
 800347c:	f002 0201 	and.w	r2, r2, #1
 8003480:	4313      	orrs	r3, r2
 8003482:	69a2      	ldr	r2, [r4, #24]
 8003484:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003488:	4313      	orrs	r3, r2
 800348a:	69e2      	ldr	r2, [r4, #28]
 800348c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003490:	4313      	orrs	r3, r2
 8003492:	6a22      	ldr	r2, [r4, #32]
 8003494:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003498:	4313      	orrs	r3, r2
 800349a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800349c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034a0:	6821      	ldr	r1, [r4, #0]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034a6:	8b63      	ldrh	r3, [r4, #26]
 80034a8:	f003 0304 	and.w	r3, r3, #4
 80034ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80034ae:	f002 0210 	and.w	r2, r2, #16
 80034b2:	6821      	ldr	r1, [r4, #0]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034b8:	6822      	ldr	r2, [r4, #0]
 80034ba:	69d3      	ldr	r3, [r2, #28]
 80034bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034c0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034c2:	2000      	movs	r0, #0
 80034c4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034c6:	2301      	movs	r3, #1
 80034c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80034cc:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80034ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80034d2:	4620      	mov	r0, r4
 80034d4:	f7fe fd00 	bl	8001ed8 <HAL_SPI_MspInit>
 80034d8:	e7b8      	b.n	800344c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
}
 80034dc:	4770      	bx	lr

080034de <HAL_SPI_Transmit>:
{
 80034de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80034e2:	b083      	sub	sp, #12
 80034e4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80034e6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	f000 80cc 	beq.w	8003688 <HAL_SPI_Transmit+0x1aa>
 80034f0:	4604      	mov	r4, r0
 80034f2:	4688      	mov	r8, r1
 80034f4:	4691      	mov	r9, r2
 80034f6:	2301      	movs	r3, #1
 80034f8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80034fc:	f7fe fe4a 	bl	8002194 <HAL_GetTick>
 8003500:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8003502:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 8003506:	b2f6      	uxtb	r6, r6
 8003508:	2e01      	cmp	r6, #1
 800350a:	f040 80aa 	bne.w	8003662 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 800350e:	f1b8 0f00 	cmp.w	r8, #0
 8003512:	f000 80a7 	beq.w	8003664 <HAL_SPI_Transmit+0x186>
 8003516:	f1b9 0f00 	cmp.w	r9, #0
 800351a:	f000 80a3 	beq.w	8003664 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800351e:	2303      	movs	r3, #3
 8003520:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003528:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800352c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003530:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003534:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003536:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003538:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800353a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800353c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800353e:	68a3      	ldr	r3, [r4, #8]
 8003540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003544:	d01e      	beq.n	8003584 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800354e:	d103      	bne.n	8003558 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003558:	68e3      	ldr	r3, [r4, #12]
 800355a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800355e:	d01c      	beq.n	800359a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003560:	6863      	ldr	r3, [r4, #4]
 8003562:	b113      	cbz	r3, 800356a <HAL_SPI_Transmit+0x8c>
 8003564:	f1b9 0f01 	cmp.w	r9, #1
 8003568:	d152      	bne.n	8003610 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800356a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003572:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003574:	3301      	adds	r3, #1
 8003576:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003578:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29b      	uxth	r3, r3
 8003580:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003582:	e045      	b.n	8003610 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8003584:	6822      	ldr	r2, [r4, #0]
 8003586:	6813      	ldr	r3, [r2, #0]
 8003588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800358c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	6813      	ldr	r3, [r2, #0]
 8003592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	e7d5      	b.n	8003546 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800359a:	6863      	ldr	r3, [r4, #4]
 800359c:	b113      	cbz	r3, 80035a4 <HAL_SPI_Transmit+0xc6>
 800359e:	f1b9 0f01 	cmp.w	r9, #1
 80035a2:	d116      	bne.n	80035d2 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035a4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035a6:	6823      	ldr	r3, [r4, #0]
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035ae:	3302      	adds	r3, #2
 80035b0:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80035b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	86e3      	strh	r3, [r4, #54]	; 0x36
 80035bc:	e009      	b.n	80035d2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035be:	f7fe fde9 	bl	8002194 <HAL_GetTick>
 80035c2:	1bc0      	subs	r0, r0, r7
 80035c4:	42a8      	cmp	r0, r5
 80035c6:	d302      	bcc.n	80035ce <HAL_SPI_Transmit+0xf0>
 80035c8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80035cc:	d154      	bne.n	8003678 <HAL_SPI_Transmit+0x19a>
 80035ce:	2d00      	cmp	r5, #0
 80035d0:	d054      	beq.n	800367c <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80035d2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d02e      	beq.n	8003638 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	689a      	ldr	r2, [r3, #8]
 80035de:	f012 0f02 	tst.w	r2, #2
 80035e2:	d0ec      	beq.n	80035be <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035e4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80035e6:	8812      	ldrh	r2, [r2, #0]
 80035e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035ec:	3302      	adds	r3, #2
 80035ee:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80035f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80035fa:	e7ea      	b.n	80035d2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035fc:	f7fe fdca 	bl	8002194 <HAL_GetTick>
 8003600:	1bc0      	subs	r0, r0, r7
 8003602:	42a8      	cmp	r0, r5
 8003604:	d302      	bcc.n	800360c <HAL_SPI_Transmit+0x12e>
 8003606:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800360a:	d139      	bne.n	8003680 <HAL_SPI_Transmit+0x1a2>
 800360c:	2d00      	cmp	r5, #0
 800360e:	d039      	beq.n	8003684 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 8003610:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003612:	b29b      	uxth	r3, r3
 8003614:	b183      	cbz	r3, 8003638 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	f012 0f02 	tst.w	r2, #2
 800361e:	d0ed      	beq.n	80035fc <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003620:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003626:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003628:	3301      	adds	r3, #1
 800362a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800362c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800362e:	b292      	uxth	r2, r2
 8003630:	3a01      	subs	r2, #1
 8003632:	b292      	uxth	r2, r2
 8003634:	86e2      	strh	r2, [r4, #54]	; 0x36
 8003636:	e7eb      	b.n	8003610 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003638:	463a      	mov	r2, r7
 800363a:	4629      	mov	r1, r5
 800363c:	4620      	mov	r0, r4
 800363e:	f7ff febb 	bl	80033b8 <SPI_EndRxTxTransaction>
 8003642:	b108      	cbz	r0, 8003648 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003644:	2320      	movs	r3, #32
 8003646:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	b933      	cbnz	r3, 800365a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800364c:	9301      	str	r3, [sp, #4]
 800364e:	6823      	ldr	r3, [r4, #0]
 8003650:	68da      	ldr	r2, [r3, #12]
 8003652:	9201      	str	r2, [sp, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800365a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800365c:	b913      	cbnz	r3, 8003664 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800365e:	2600      	movs	r6, #0
 8003660:	e000      	b.n	8003664 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8003662:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003664:	2301      	movs	r3, #1
 8003666:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800366a:	2300      	movs	r3, #0
 800366c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003670:	4630      	mov	r0, r6
 8003672:	b003      	add	sp, #12
 8003674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003678:	2603      	movs	r6, #3
 800367a:	e7f3      	b.n	8003664 <HAL_SPI_Transmit+0x186>
 800367c:	2603      	movs	r6, #3
 800367e:	e7f1      	b.n	8003664 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8003680:	2603      	movs	r6, #3
 8003682:	e7ef      	b.n	8003664 <HAL_SPI_Transmit+0x186>
 8003684:	2603      	movs	r6, #3
 8003686:	e7ed      	b.n	8003664 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8003688:	2602      	movs	r6, #2
 800368a:	e7f1      	b.n	8003670 <HAL_SPI_Transmit+0x192>

0800368c <HAL_SPI_TransmitReceive>:
{
 800368c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003690:	b083      	sub	sp, #12
 8003692:	461f      	mov	r7, r3
 8003694:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003696:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800369a:	2b01      	cmp	r3, #1
 800369c:	f000 8110 	beq.w	80038c0 <HAL_SPI_TransmitReceive+0x234>
 80036a0:	4604      	mov	r4, r0
 80036a2:	4688      	mov	r8, r1
 80036a4:	4691      	mov	r9, r2
 80036a6:	2301      	movs	r3, #1
 80036a8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80036ac:	f7fe fd72 	bl	8002194 <HAL_GetTick>
 80036b0:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 80036b2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80036b6:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 80036b8:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d00a      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x48>
 80036be:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80036c2:	f040 80e3 	bne.w	800388c <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036c6:	68a2      	ldr	r2, [r4, #8]
 80036c8:	2a00      	cmp	r2, #0
 80036ca:	f040 80e9 	bne.w	80038a0 <HAL_SPI_TransmitReceive+0x214>
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	f040 80e8 	bne.w	80038a4 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d4:	f1b8 0f00 	cmp.w	r8, #0
 80036d8:	f000 80e6 	beq.w	80038a8 <HAL_SPI_TransmitReceive+0x21c>
 80036dc:	f1b9 0f00 	cmp.w	r9, #0
 80036e0:	f000 80e4 	beq.w	80038ac <HAL_SPI_TransmitReceive+0x220>
 80036e4:	2f00      	cmp	r7, #0
 80036e6:	f000 80e3 	beq.w	80038b0 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036ea:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d002      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036f4:	2305      	movs	r3, #5
 80036f6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036fe:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003702:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003704:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003706:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 800370a:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800370c:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 800370e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003710:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	f012 0f40 	tst.w	r2, #64	; 0x40
 800371a:	d103      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003722:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003724:	68e3      	ldr	r3, [r4, #12]
 8003726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800372a:	d011      	beq.n	8003750 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800372c:	6863      	ldr	r3, [r4, #4]
 800372e:	b10b      	cbz	r3, 8003734 <HAL_SPI_TransmitReceive+0xa8>
 8003730:	2f01      	cmp	r7, #1
 8003732:	d10b      	bne.n	800374c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003734:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	7812      	ldrb	r2, [r2, #0]
 800373a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800373c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800373e:	3301      	adds	r3, #1
 8003740:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003742:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800374c:	2701      	movs	r7, #1
 800374e:	e06b      	b.n	8003828 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003750:	6863      	ldr	r3, [r4, #4]
 8003752:	b10b      	cbz	r3, 8003758 <HAL_SPI_TransmitReceive+0xcc>
 8003754:	2f01      	cmp	r7, #1
 8003756:	d10b      	bne.n	8003770 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003758:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003760:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003762:	3302      	adds	r3, #2
 8003764:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003766:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003768:	b29b      	uxth	r3, r3
 800376a:	3b01      	subs	r3, #1
 800376c:	b29b      	uxth	r3, r3
 800376e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003770:	2701      	movs	r7, #1
 8003772:	e01c      	b.n	80037ae <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	f012 0f01 	tst.w	r2, #1
 800377c:	d00e      	beq.n	800379c <HAL_SPI_TransmitReceive+0x110>
 800377e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003780:	b292      	uxth	r2, r2
 8003782:	b15a      	cbz	r2, 800379c <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003784:	68da      	ldr	r2, [r3, #12]
 8003786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003788:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800378a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800378c:	3302      	adds	r3, #2
 800378e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003790:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29b      	uxth	r3, r3
 8003798:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800379a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800379c:	f7fe fcfa 	bl	8002194 <HAL_GetTick>
 80037a0:	1b80      	subs	r0, r0, r6
 80037a2:	42a8      	cmp	r0, r5
 80037a4:	d303      	bcc.n	80037ae <HAL_SPI_TransmitReceive+0x122>
 80037a6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80037aa:	f040 8083 	bne.w	80038b4 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	b91b      	cbnz	r3, 80037bc <HAL_SPI_TransmitReceive+0x130>
 80037b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d053      	beq.n	8003864 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	f012 0f02 	tst.w	r2, #2
 80037c4:	d0d6      	beq.n	8003774 <HAL_SPI_TransmitReceive+0xe8>
 80037c6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80037c8:	b292      	uxth	r2, r2
 80037ca:	2a00      	cmp	r2, #0
 80037cc:	d0d2      	beq.n	8003774 <HAL_SPI_TransmitReceive+0xe8>
 80037ce:	2f00      	cmp	r7, #0
 80037d0:	d0d0      	beq.n	8003774 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80037d4:	8812      	ldrh	r2, [r2, #0]
 80037d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037da:	3302      	adds	r3, #2
 80037dc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80037de:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80037e8:	2700      	movs	r7, #0
 80037ea:	e7c3      	b.n	8003774 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	f012 0f01 	tst.w	r2, #1
 80037f4:	d00e      	beq.n	8003814 <HAL_SPI_TransmitReceive+0x188>
 80037f6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80037f8:	b292      	uxth	r2, r2
 80037fa:	b15a      	cbz	r2, 8003814 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003802:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003804:	3301      	adds	r3, #1
 8003806:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003808:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29b      	uxth	r3, r3
 8003810:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003812:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003814:	f7fe fcbe 	bl	8002194 <HAL_GetTick>
 8003818:	1b83      	subs	r3, r0, r6
 800381a:	42ab      	cmp	r3, r5
 800381c:	d302      	bcc.n	8003824 <HAL_SPI_TransmitReceive+0x198>
 800381e:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003822:	d149      	bne.n	80038b8 <HAL_SPI_TransmitReceive+0x22c>
 8003824:	2d00      	cmp	r5, #0
 8003826:	d049      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003828:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	b913      	cbnz	r3, 8003834 <HAL_SPI_TransmitReceive+0x1a8>
 800382e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003830:	b29b      	uxth	r3, r3
 8003832:	b1bb      	cbz	r3, 8003864 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	f012 0f02 	tst.w	r2, #2
 800383c:	d0d6      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x160>
 800383e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003840:	b292      	uxth	r2, r2
 8003842:	2a00      	cmp	r2, #0
 8003844:	d0d2      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x160>
 8003846:	2f00      	cmp	r7, #0
 8003848:	d0d0      	beq.n	80037ec <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800384a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800384c:	7812      	ldrb	r2, [r2, #0]
 800384e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003850:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003852:	3301      	adds	r3, #1
 8003854:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003856:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29b      	uxth	r3, r3
 800385e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003860:	2700      	movs	r7, #0
 8003862:	e7c3      	b.n	80037ec <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003864:	4632      	mov	r2, r6
 8003866:	4629      	mov	r1, r5
 8003868:	4620      	mov	r0, r4
 800386a:	f7ff fda5 	bl	80033b8 <SPI_EndRxTxTransaction>
 800386e:	b948      	cbnz	r0, 8003884 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	b963      	cbnz	r3, 800388e <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003874:	9301      	str	r3, [sp, #4]
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	9b01      	ldr	r3, [sp, #4]
 8003882:	e004      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003884:	2320      	movs	r3, #32
 8003886:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003888:	2001      	movs	r0, #1
    goto error;
 800388a:	e000      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 800388c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800388e:	2301      	movs	r3, #1
 8003890:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003894:	2300      	movs	r3, #0
 8003896:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800389a:	b003      	add	sp, #12
 800389c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 80038a0:	2002      	movs	r0, #2
 80038a2:	e7f4      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
 80038a4:	2002      	movs	r0, #2
 80038a6:	e7f2      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7f0      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
 80038ac:	2001      	movs	r0, #1
 80038ae:	e7ee      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
 80038b0:	2001      	movs	r0, #1
 80038b2:	e7ec      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80038b4:	2003      	movs	r0, #3
 80038b6:	e7ea      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 80038b8:	2003      	movs	r0, #3
 80038ba:	e7e8      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
 80038bc:	2003      	movs	r0, #3
 80038be:	e7e6      	b.n	800388e <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80038c0:	2002      	movs	r0, #2
 80038c2:	e7ea      	b.n	800389a <HAL_SPI_TransmitReceive+0x20e>

080038c4 <__errno>:
 80038c4:	4b01      	ldr	r3, [pc, #4]	; (80038cc <__errno+0x8>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000018 	.word	0x20000018

080038d0 <__libc_init_array>:
 80038d0:	b570      	push	{r4, r5, r6, lr}
 80038d2:	4d0d      	ldr	r5, [pc, #52]	; (8003908 <__libc_init_array+0x38>)
 80038d4:	4c0d      	ldr	r4, [pc, #52]	; (800390c <__libc_init_array+0x3c>)
 80038d6:	1b64      	subs	r4, r4, r5
 80038d8:	10a4      	asrs	r4, r4, #2
 80038da:	2600      	movs	r6, #0
 80038dc:	42a6      	cmp	r6, r4
 80038de:	d109      	bne.n	80038f4 <__libc_init_array+0x24>
 80038e0:	4d0b      	ldr	r5, [pc, #44]	; (8003910 <__libc_init_array+0x40>)
 80038e2:	4c0c      	ldr	r4, [pc, #48]	; (8003914 <__libc_init_array+0x44>)
 80038e4:	f004 fc44 	bl	8008170 <_init>
 80038e8:	1b64      	subs	r4, r4, r5
 80038ea:	10a4      	asrs	r4, r4, #2
 80038ec:	2600      	movs	r6, #0
 80038ee:	42a6      	cmp	r6, r4
 80038f0:	d105      	bne.n	80038fe <__libc_init_array+0x2e>
 80038f2:	bd70      	pop	{r4, r5, r6, pc}
 80038f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f8:	4798      	blx	r3
 80038fa:	3601      	adds	r6, #1
 80038fc:	e7ee      	b.n	80038dc <__libc_init_array+0xc>
 80038fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003902:	4798      	blx	r3
 8003904:	3601      	adds	r6, #1
 8003906:	e7f2      	b.n	80038ee <__libc_init_array+0x1e>
 8003908:	08008c94 	.word	0x08008c94
 800390c:	08008c94 	.word	0x08008c94
 8003910:	08008c94 	.word	0x08008c94
 8003914:	08008c98 	.word	0x08008c98

08003918 <memset>:
 8003918:	4402      	add	r2, r0
 800391a:	4603      	mov	r3, r0
 800391c:	4293      	cmp	r3, r2
 800391e:	d100      	bne.n	8003922 <memset+0xa>
 8003920:	4770      	bx	lr
 8003922:	f803 1b01 	strb.w	r1, [r3], #1
 8003926:	e7f9      	b.n	800391c <memset+0x4>

08003928 <__cvt>:
 8003928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800392c:	ec55 4b10 	vmov	r4, r5, d0
 8003930:	2d00      	cmp	r5, #0
 8003932:	460e      	mov	r6, r1
 8003934:	4619      	mov	r1, r3
 8003936:	462b      	mov	r3, r5
 8003938:	bfbb      	ittet	lt
 800393a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800393e:	461d      	movlt	r5, r3
 8003940:	2300      	movge	r3, #0
 8003942:	232d      	movlt	r3, #45	; 0x2d
 8003944:	700b      	strb	r3, [r1, #0]
 8003946:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003948:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800394c:	4691      	mov	r9, r2
 800394e:	f023 0820 	bic.w	r8, r3, #32
 8003952:	bfbc      	itt	lt
 8003954:	4622      	movlt	r2, r4
 8003956:	4614      	movlt	r4, r2
 8003958:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800395c:	d005      	beq.n	800396a <__cvt+0x42>
 800395e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003962:	d100      	bne.n	8003966 <__cvt+0x3e>
 8003964:	3601      	adds	r6, #1
 8003966:	2102      	movs	r1, #2
 8003968:	e000      	b.n	800396c <__cvt+0x44>
 800396a:	2103      	movs	r1, #3
 800396c:	ab03      	add	r3, sp, #12
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	ab02      	add	r3, sp, #8
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	ec45 4b10 	vmov	d0, r4, r5
 8003978:	4653      	mov	r3, sl
 800397a:	4632      	mov	r2, r6
 800397c:	f001 fdb4 	bl	80054e8 <_dtoa_r>
 8003980:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003984:	4607      	mov	r7, r0
 8003986:	d102      	bne.n	800398e <__cvt+0x66>
 8003988:	f019 0f01 	tst.w	r9, #1
 800398c:	d022      	beq.n	80039d4 <__cvt+0xac>
 800398e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003992:	eb07 0906 	add.w	r9, r7, r6
 8003996:	d110      	bne.n	80039ba <__cvt+0x92>
 8003998:	783b      	ldrb	r3, [r7, #0]
 800399a:	2b30      	cmp	r3, #48	; 0x30
 800399c:	d10a      	bne.n	80039b4 <__cvt+0x8c>
 800399e:	2200      	movs	r2, #0
 80039a0:	2300      	movs	r3, #0
 80039a2:	4620      	mov	r0, r4
 80039a4:	4629      	mov	r1, r5
 80039a6:	f7fd f88f 	bl	8000ac8 <__aeabi_dcmpeq>
 80039aa:	b918      	cbnz	r0, 80039b4 <__cvt+0x8c>
 80039ac:	f1c6 0601 	rsb	r6, r6, #1
 80039b0:	f8ca 6000 	str.w	r6, [sl]
 80039b4:	f8da 3000 	ldr.w	r3, [sl]
 80039b8:	4499      	add	r9, r3
 80039ba:	2200      	movs	r2, #0
 80039bc:	2300      	movs	r3, #0
 80039be:	4620      	mov	r0, r4
 80039c0:	4629      	mov	r1, r5
 80039c2:	f7fd f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80039c6:	b108      	cbz	r0, 80039cc <__cvt+0xa4>
 80039c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80039cc:	2230      	movs	r2, #48	; 0x30
 80039ce:	9b03      	ldr	r3, [sp, #12]
 80039d0:	454b      	cmp	r3, r9
 80039d2:	d307      	bcc.n	80039e4 <__cvt+0xbc>
 80039d4:	9b03      	ldr	r3, [sp, #12]
 80039d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80039d8:	1bdb      	subs	r3, r3, r7
 80039da:	4638      	mov	r0, r7
 80039dc:	6013      	str	r3, [r2, #0]
 80039de:	b004      	add	sp, #16
 80039e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e4:	1c59      	adds	r1, r3, #1
 80039e6:	9103      	str	r1, [sp, #12]
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e7f0      	b.n	80039ce <__cvt+0xa6>

080039ec <__exponent>:
 80039ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80039ee:	4603      	mov	r3, r0
 80039f0:	2900      	cmp	r1, #0
 80039f2:	bfb8      	it	lt
 80039f4:	4249      	neglt	r1, r1
 80039f6:	f803 2b02 	strb.w	r2, [r3], #2
 80039fa:	bfb4      	ite	lt
 80039fc:	222d      	movlt	r2, #45	; 0x2d
 80039fe:	222b      	movge	r2, #43	; 0x2b
 8003a00:	2909      	cmp	r1, #9
 8003a02:	7042      	strb	r2, [r0, #1]
 8003a04:	dd2a      	ble.n	8003a5c <__exponent+0x70>
 8003a06:	f10d 0407 	add.w	r4, sp, #7
 8003a0a:	46a4      	mov	ip, r4
 8003a0c:	270a      	movs	r7, #10
 8003a0e:	46a6      	mov	lr, r4
 8003a10:	460a      	mov	r2, r1
 8003a12:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a16:	fb07 1516 	mls	r5, r7, r6, r1
 8003a1a:	3530      	adds	r5, #48	; 0x30
 8003a1c:	2a63      	cmp	r2, #99	; 0x63
 8003a1e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003a22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a26:	4631      	mov	r1, r6
 8003a28:	dcf1      	bgt.n	8003a0e <__exponent+0x22>
 8003a2a:	3130      	adds	r1, #48	; 0x30
 8003a2c:	f1ae 0502 	sub.w	r5, lr, #2
 8003a30:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a34:	1c44      	adds	r4, r0, #1
 8003a36:	4629      	mov	r1, r5
 8003a38:	4561      	cmp	r1, ip
 8003a3a:	d30a      	bcc.n	8003a52 <__exponent+0x66>
 8003a3c:	f10d 0209 	add.w	r2, sp, #9
 8003a40:	eba2 020e 	sub.w	r2, r2, lr
 8003a44:	4565      	cmp	r5, ip
 8003a46:	bf88      	it	hi
 8003a48:	2200      	movhi	r2, #0
 8003a4a:	4413      	add	r3, r2
 8003a4c:	1a18      	subs	r0, r3, r0
 8003a4e:	b003      	add	sp, #12
 8003a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a56:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a5a:	e7ed      	b.n	8003a38 <__exponent+0x4c>
 8003a5c:	2330      	movs	r3, #48	; 0x30
 8003a5e:	3130      	adds	r1, #48	; 0x30
 8003a60:	7083      	strb	r3, [r0, #2]
 8003a62:	70c1      	strb	r1, [r0, #3]
 8003a64:	1d03      	adds	r3, r0, #4
 8003a66:	e7f1      	b.n	8003a4c <__exponent+0x60>

08003a68 <_printf_float>:
 8003a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a6c:	ed2d 8b02 	vpush	{d8}
 8003a70:	b08d      	sub	sp, #52	; 0x34
 8003a72:	460c      	mov	r4, r1
 8003a74:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003a78:	4616      	mov	r6, r2
 8003a7a:	461f      	mov	r7, r3
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	f002 fe8f 	bl	80067a0 <_localeconv_r>
 8003a82:	f8d0 a000 	ldr.w	sl, [r0]
 8003a86:	4650      	mov	r0, sl
 8003a88:	f7fc fba2 	bl	80001d0 <strlen>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003a90:	6823      	ldr	r3, [r4, #0]
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	f8d8 3000 	ldr.w	r3, [r8]
 8003a98:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003a9c:	3307      	adds	r3, #7
 8003a9e:	f023 0307 	bic.w	r3, r3, #7
 8003aa2:	f103 0208 	add.w	r2, r3, #8
 8003aa6:	f8c8 2000 	str.w	r2, [r8]
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ab2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003ab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003aba:	9307      	str	r3, [sp, #28]
 8003abc:	f8cd 8018 	str.w	r8, [sp, #24]
 8003ac0:	ee08 0a10 	vmov	s16, r0
 8003ac4:	4b9f      	ldr	r3, [pc, #636]	; (8003d44 <_printf_float+0x2dc>)
 8003ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ace:	f7fd f82d 	bl	8000b2c <__aeabi_dcmpun>
 8003ad2:	bb88      	cbnz	r0, 8003b38 <_printf_float+0xd0>
 8003ad4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003ad8:	4b9a      	ldr	r3, [pc, #616]	; (8003d44 <_printf_float+0x2dc>)
 8003ada:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ade:	f7fd f807 	bl	8000af0 <__aeabi_dcmple>
 8003ae2:	bb48      	cbnz	r0, 8003b38 <_printf_float+0xd0>
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4640      	mov	r0, r8
 8003aea:	4649      	mov	r1, r9
 8003aec:	f7fc fff6 	bl	8000adc <__aeabi_dcmplt>
 8003af0:	b110      	cbz	r0, 8003af8 <_printf_float+0x90>
 8003af2:	232d      	movs	r3, #45	; 0x2d
 8003af4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003af8:	4b93      	ldr	r3, [pc, #588]	; (8003d48 <_printf_float+0x2e0>)
 8003afa:	4894      	ldr	r0, [pc, #592]	; (8003d4c <_printf_float+0x2e4>)
 8003afc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003b00:	bf94      	ite	ls
 8003b02:	4698      	movls	r8, r3
 8003b04:	4680      	movhi	r8, r0
 8003b06:	2303      	movs	r3, #3
 8003b08:	6123      	str	r3, [r4, #16]
 8003b0a:	9b05      	ldr	r3, [sp, #20]
 8003b0c:	f023 0204 	bic.w	r2, r3, #4
 8003b10:	6022      	str	r2, [r4, #0]
 8003b12:	f04f 0900 	mov.w	r9, #0
 8003b16:	9700      	str	r7, [sp, #0]
 8003b18:	4633      	mov	r3, r6
 8003b1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f000 f9d8 	bl	8003ed4 <_printf_common>
 8003b24:	3001      	adds	r0, #1
 8003b26:	f040 8090 	bne.w	8003c4a <_printf_float+0x1e2>
 8003b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b2e:	b00d      	add	sp, #52	; 0x34
 8003b30:	ecbd 8b02 	vpop	{d8}
 8003b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b38:	4642      	mov	r2, r8
 8003b3a:	464b      	mov	r3, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	4649      	mov	r1, r9
 8003b40:	f7fc fff4 	bl	8000b2c <__aeabi_dcmpun>
 8003b44:	b140      	cbz	r0, 8003b58 <_printf_float+0xf0>
 8003b46:	464b      	mov	r3, r9
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	bfbc      	itt	lt
 8003b4c:	232d      	movlt	r3, #45	; 0x2d
 8003b4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b52:	487f      	ldr	r0, [pc, #508]	; (8003d50 <_printf_float+0x2e8>)
 8003b54:	4b7f      	ldr	r3, [pc, #508]	; (8003d54 <_printf_float+0x2ec>)
 8003b56:	e7d1      	b.n	8003afc <_printf_float+0x94>
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003b5e:	9206      	str	r2, [sp, #24]
 8003b60:	1c5a      	adds	r2, r3, #1
 8003b62:	d13f      	bne.n	8003be4 <_printf_float+0x17c>
 8003b64:	2306      	movs	r3, #6
 8003b66:	6063      	str	r3, [r4, #4]
 8003b68:	9b05      	ldr	r3, [sp, #20]
 8003b6a:	6861      	ldr	r1, [r4, #4]
 8003b6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003b70:	2300      	movs	r3, #0
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	ab0a      	add	r3, sp, #40	; 0x28
 8003b76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003b7a:	ab09      	add	r3, sp, #36	; 0x24
 8003b7c:	ec49 8b10 	vmov	d0, r8, r9
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	6022      	str	r2, [r4, #0]
 8003b84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003b88:	4628      	mov	r0, r5
 8003b8a:	f7ff fecd 	bl	8003928 <__cvt>
 8003b8e:	9b06      	ldr	r3, [sp, #24]
 8003b90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b92:	2b47      	cmp	r3, #71	; 0x47
 8003b94:	4680      	mov	r8, r0
 8003b96:	d108      	bne.n	8003baa <_printf_float+0x142>
 8003b98:	1cc8      	adds	r0, r1, #3
 8003b9a:	db02      	blt.n	8003ba2 <_printf_float+0x13a>
 8003b9c:	6863      	ldr	r3, [r4, #4]
 8003b9e:	4299      	cmp	r1, r3
 8003ba0:	dd41      	ble.n	8003c26 <_printf_float+0x1be>
 8003ba2:	f1ab 0b02 	sub.w	fp, fp, #2
 8003ba6:	fa5f fb8b 	uxtb.w	fp, fp
 8003baa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003bae:	d820      	bhi.n	8003bf2 <_printf_float+0x18a>
 8003bb0:	3901      	subs	r1, #1
 8003bb2:	465a      	mov	r2, fp
 8003bb4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bb8:	9109      	str	r1, [sp, #36]	; 0x24
 8003bba:	f7ff ff17 	bl	80039ec <__exponent>
 8003bbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bc0:	1813      	adds	r3, r2, r0
 8003bc2:	2a01      	cmp	r2, #1
 8003bc4:	4681      	mov	r9, r0
 8003bc6:	6123      	str	r3, [r4, #16]
 8003bc8:	dc02      	bgt.n	8003bd0 <_printf_float+0x168>
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	07d2      	lsls	r2, r2, #31
 8003bce:	d501      	bpl.n	8003bd4 <_printf_float+0x16c>
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d09c      	beq.n	8003b16 <_printf_float+0xae>
 8003bdc:	232d      	movs	r3, #45	; 0x2d
 8003bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be2:	e798      	b.n	8003b16 <_printf_float+0xae>
 8003be4:	9a06      	ldr	r2, [sp, #24]
 8003be6:	2a47      	cmp	r2, #71	; 0x47
 8003be8:	d1be      	bne.n	8003b68 <_printf_float+0x100>
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1bc      	bne.n	8003b68 <_printf_float+0x100>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e7b9      	b.n	8003b66 <_printf_float+0xfe>
 8003bf2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003bf6:	d118      	bne.n	8003c2a <_printf_float+0x1c2>
 8003bf8:	2900      	cmp	r1, #0
 8003bfa:	6863      	ldr	r3, [r4, #4]
 8003bfc:	dd0b      	ble.n	8003c16 <_printf_float+0x1ae>
 8003bfe:	6121      	str	r1, [r4, #16]
 8003c00:	b913      	cbnz	r3, 8003c08 <_printf_float+0x1a0>
 8003c02:	6822      	ldr	r2, [r4, #0]
 8003c04:	07d0      	lsls	r0, r2, #31
 8003c06:	d502      	bpl.n	8003c0e <_printf_float+0x1a6>
 8003c08:	3301      	adds	r3, #1
 8003c0a:	440b      	add	r3, r1
 8003c0c:	6123      	str	r3, [r4, #16]
 8003c0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c10:	f04f 0900 	mov.w	r9, #0
 8003c14:	e7de      	b.n	8003bd4 <_printf_float+0x16c>
 8003c16:	b913      	cbnz	r3, 8003c1e <_printf_float+0x1b6>
 8003c18:	6822      	ldr	r2, [r4, #0]
 8003c1a:	07d2      	lsls	r2, r2, #31
 8003c1c:	d501      	bpl.n	8003c22 <_printf_float+0x1ba>
 8003c1e:	3302      	adds	r3, #2
 8003c20:	e7f4      	b.n	8003c0c <_printf_float+0x1a4>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e7f2      	b.n	8003c0c <_printf_float+0x1a4>
 8003c26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c2c:	4299      	cmp	r1, r3
 8003c2e:	db05      	blt.n	8003c3c <_printf_float+0x1d4>
 8003c30:	6823      	ldr	r3, [r4, #0]
 8003c32:	6121      	str	r1, [r4, #16]
 8003c34:	07d8      	lsls	r0, r3, #31
 8003c36:	d5ea      	bpl.n	8003c0e <_printf_float+0x1a6>
 8003c38:	1c4b      	adds	r3, r1, #1
 8003c3a:	e7e7      	b.n	8003c0c <_printf_float+0x1a4>
 8003c3c:	2900      	cmp	r1, #0
 8003c3e:	bfd4      	ite	le
 8003c40:	f1c1 0202 	rsble	r2, r1, #2
 8003c44:	2201      	movgt	r2, #1
 8003c46:	4413      	add	r3, r2
 8003c48:	e7e0      	b.n	8003c0c <_printf_float+0x1a4>
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	055a      	lsls	r2, r3, #21
 8003c4e:	d407      	bmi.n	8003c60 <_printf_float+0x1f8>
 8003c50:	6923      	ldr	r3, [r4, #16]
 8003c52:	4642      	mov	r2, r8
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	d12c      	bne.n	8003cb8 <_printf_float+0x250>
 8003c5e:	e764      	b.n	8003b2a <_printf_float+0xc2>
 8003c60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003c64:	f240 80e0 	bls.w	8003e28 <_printf_float+0x3c0>
 8003c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f7fc ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d034      	beq.n	8003ce2 <_printf_float+0x27a>
 8003c78:	4a37      	ldr	r2, [pc, #220]	; (8003d58 <_printf_float+0x2f0>)
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4631      	mov	r1, r6
 8003c7e:	4628      	mov	r0, r5
 8003c80:	47b8      	blx	r7
 8003c82:	3001      	adds	r0, #1
 8003c84:	f43f af51 	beq.w	8003b2a <_printf_float+0xc2>
 8003c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	db02      	blt.n	8003c96 <_printf_float+0x22e>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	07d8      	lsls	r0, r3, #31
 8003c94:	d510      	bpl.n	8003cb8 <_printf_float+0x250>
 8003c96:	ee18 3a10 	vmov	r3, s16
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	4631      	mov	r1, r6
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	47b8      	blx	r7
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	f43f af41 	beq.w	8003b2a <_printf_float+0xc2>
 8003ca8:	f04f 0800 	mov.w	r8, #0
 8003cac:	f104 091a 	add.w	r9, r4, #26
 8003cb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	4543      	cmp	r3, r8
 8003cb6:	dc09      	bgt.n	8003ccc <_printf_float+0x264>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	079b      	lsls	r3, r3, #30
 8003cbc:	f100 8105 	bmi.w	8003eca <_printf_float+0x462>
 8003cc0:	68e0      	ldr	r0, [r4, #12]
 8003cc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc4:	4298      	cmp	r0, r3
 8003cc6:	bfb8      	it	lt
 8003cc8:	4618      	movlt	r0, r3
 8003cca:	e730      	b.n	8003b2e <_printf_float+0xc6>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	464a      	mov	r2, r9
 8003cd0:	4631      	mov	r1, r6
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f af27 	beq.w	8003b2a <_printf_float+0xc2>
 8003cdc:	f108 0801 	add.w	r8, r8, #1
 8003ce0:	e7e6      	b.n	8003cb0 <_printf_float+0x248>
 8003ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	dc39      	bgt.n	8003d5c <_printf_float+0x2f4>
 8003ce8:	4a1b      	ldr	r2, [pc, #108]	; (8003d58 <_printf_float+0x2f0>)
 8003cea:	2301      	movs	r3, #1
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f af19 	beq.w	8003b2a <_printf_float+0xc2>
 8003cf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	d102      	bne.n	8003d06 <_printf_float+0x29e>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	07d9      	lsls	r1, r3, #31
 8003d04:	d5d8      	bpl.n	8003cb8 <_printf_float+0x250>
 8003d06:	ee18 3a10 	vmov	r3, s16
 8003d0a:	4652      	mov	r2, sl
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4628      	mov	r0, r5
 8003d10:	47b8      	blx	r7
 8003d12:	3001      	adds	r0, #1
 8003d14:	f43f af09 	beq.w	8003b2a <_printf_float+0xc2>
 8003d18:	f04f 0900 	mov.w	r9, #0
 8003d1c:	f104 0a1a 	add.w	sl, r4, #26
 8003d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d22:	425b      	negs	r3, r3
 8003d24:	454b      	cmp	r3, r9
 8003d26:	dc01      	bgt.n	8003d2c <_printf_float+0x2c4>
 8003d28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d2a:	e792      	b.n	8003c52 <_printf_float+0x1ea>
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	4652      	mov	r2, sl
 8003d30:	4631      	mov	r1, r6
 8003d32:	4628      	mov	r0, r5
 8003d34:	47b8      	blx	r7
 8003d36:	3001      	adds	r0, #1
 8003d38:	f43f aef7 	beq.w	8003b2a <_printf_float+0xc2>
 8003d3c:	f109 0901 	add.w	r9, r9, #1
 8003d40:	e7ee      	b.n	8003d20 <_printf_float+0x2b8>
 8003d42:	bf00      	nop
 8003d44:	7fefffff 	.word	0x7fefffff
 8003d48:	080087d8 	.word	0x080087d8
 8003d4c:	080087dc 	.word	0x080087dc
 8003d50:	080087e4 	.word	0x080087e4
 8003d54:	080087e0 	.word	0x080087e0
 8003d58:	080087e8 	.word	0x080087e8
 8003d5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d60:	429a      	cmp	r2, r3
 8003d62:	bfa8      	it	ge
 8003d64:	461a      	movge	r2, r3
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	4691      	mov	r9, r2
 8003d6a:	dc37      	bgt.n	8003ddc <_printf_float+0x374>
 8003d6c:	f04f 0b00 	mov.w	fp, #0
 8003d70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d74:	f104 021a 	add.w	r2, r4, #26
 8003d78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d7a:	9305      	str	r3, [sp, #20]
 8003d7c:	eba3 0309 	sub.w	r3, r3, r9
 8003d80:	455b      	cmp	r3, fp
 8003d82:	dc33      	bgt.n	8003dec <_printf_float+0x384>
 8003d84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	db3b      	blt.n	8003e04 <_printf_float+0x39c>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	07da      	lsls	r2, r3, #31
 8003d90:	d438      	bmi.n	8003e04 <_printf_float+0x39c>
 8003d92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d94:	9b05      	ldr	r3, [sp, #20]
 8003d96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	eba2 0901 	sub.w	r9, r2, r1
 8003d9e:	4599      	cmp	r9, r3
 8003da0:	bfa8      	it	ge
 8003da2:	4699      	movge	r9, r3
 8003da4:	f1b9 0f00 	cmp.w	r9, #0
 8003da8:	dc35      	bgt.n	8003e16 <_printf_float+0x3ae>
 8003daa:	f04f 0800 	mov.w	r8, #0
 8003dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003db2:	f104 0a1a 	add.w	sl, r4, #26
 8003db6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	eba3 0309 	sub.w	r3, r3, r9
 8003dc0:	4543      	cmp	r3, r8
 8003dc2:	f77f af79 	ble.w	8003cb8 <_printf_float+0x250>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	4652      	mov	r2, sl
 8003dca:	4631      	mov	r1, r6
 8003dcc:	4628      	mov	r0, r5
 8003dce:	47b8      	blx	r7
 8003dd0:	3001      	adds	r0, #1
 8003dd2:	f43f aeaa 	beq.w	8003b2a <_printf_float+0xc2>
 8003dd6:	f108 0801 	add.w	r8, r8, #1
 8003dda:	e7ec      	b.n	8003db6 <_printf_float+0x34e>
 8003ddc:	4613      	mov	r3, r2
 8003dde:	4631      	mov	r1, r6
 8003de0:	4642      	mov	r2, r8
 8003de2:	4628      	mov	r0, r5
 8003de4:	47b8      	blx	r7
 8003de6:	3001      	adds	r0, #1
 8003de8:	d1c0      	bne.n	8003d6c <_printf_float+0x304>
 8003dea:	e69e      	b.n	8003b2a <_printf_float+0xc2>
 8003dec:	2301      	movs	r3, #1
 8003dee:	4631      	mov	r1, r6
 8003df0:	4628      	mov	r0, r5
 8003df2:	9205      	str	r2, [sp, #20]
 8003df4:	47b8      	blx	r7
 8003df6:	3001      	adds	r0, #1
 8003df8:	f43f ae97 	beq.w	8003b2a <_printf_float+0xc2>
 8003dfc:	9a05      	ldr	r2, [sp, #20]
 8003dfe:	f10b 0b01 	add.w	fp, fp, #1
 8003e02:	e7b9      	b.n	8003d78 <_printf_float+0x310>
 8003e04:	ee18 3a10 	vmov	r3, s16
 8003e08:	4652      	mov	r2, sl
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	d1be      	bne.n	8003d92 <_printf_float+0x32a>
 8003e14:	e689      	b.n	8003b2a <_printf_float+0xc2>
 8003e16:	9a05      	ldr	r2, [sp, #20]
 8003e18:	464b      	mov	r3, r9
 8003e1a:	4442      	add	r2, r8
 8003e1c:	4631      	mov	r1, r6
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	d1c1      	bne.n	8003daa <_printf_float+0x342>
 8003e26:	e680      	b.n	8003b2a <_printf_float+0xc2>
 8003e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e2a:	2a01      	cmp	r2, #1
 8003e2c:	dc01      	bgt.n	8003e32 <_printf_float+0x3ca>
 8003e2e:	07db      	lsls	r3, r3, #31
 8003e30:	d538      	bpl.n	8003ea4 <_printf_float+0x43c>
 8003e32:	2301      	movs	r3, #1
 8003e34:	4642      	mov	r2, r8
 8003e36:	4631      	mov	r1, r6
 8003e38:	4628      	mov	r0, r5
 8003e3a:	47b8      	blx	r7
 8003e3c:	3001      	adds	r0, #1
 8003e3e:	f43f ae74 	beq.w	8003b2a <_printf_float+0xc2>
 8003e42:	ee18 3a10 	vmov	r3, s16
 8003e46:	4652      	mov	r2, sl
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f ae6b 	beq.w	8003b2a <_printf_float+0xc2>
 8003e54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e58:	2200      	movs	r2, #0
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f7fc fe34 	bl	8000ac8 <__aeabi_dcmpeq>
 8003e60:	b9d8      	cbnz	r0, 8003e9a <_printf_float+0x432>
 8003e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e64:	f108 0201 	add.w	r2, r8, #1
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	4631      	mov	r1, r6
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	47b8      	blx	r7
 8003e70:	3001      	adds	r0, #1
 8003e72:	d10e      	bne.n	8003e92 <_printf_float+0x42a>
 8003e74:	e659      	b.n	8003b2a <_printf_float+0xc2>
 8003e76:	2301      	movs	r3, #1
 8003e78:	4652      	mov	r2, sl
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	f43f ae52 	beq.w	8003b2a <_printf_float+0xc2>
 8003e86:	f108 0801 	add.w	r8, r8, #1
 8003e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	4543      	cmp	r3, r8
 8003e90:	dcf1      	bgt.n	8003e76 <_printf_float+0x40e>
 8003e92:	464b      	mov	r3, r9
 8003e94:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003e98:	e6dc      	b.n	8003c54 <_printf_float+0x1ec>
 8003e9a:	f04f 0800 	mov.w	r8, #0
 8003e9e:	f104 0a1a 	add.w	sl, r4, #26
 8003ea2:	e7f2      	b.n	8003e8a <_printf_float+0x422>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4642      	mov	r2, r8
 8003ea8:	e7df      	b.n	8003e6a <_printf_float+0x402>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	464a      	mov	r2, r9
 8003eae:	4631      	mov	r1, r6
 8003eb0:	4628      	mov	r0, r5
 8003eb2:	47b8      	blx	r7
 8003eb4:	3001      	adds	r0, #1
 8003eb6:	f43f ae38 	beq.w	8003b2a <_printf_float+0xc2>
 8003eba:	f108 0801 	add.w	r8, r8, #1
 8003ebe:	68e3      	ldr	r3, [r4, #12]
 8003ec0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ec2:	1a5b      	subs	r3, r3, r1
 8003ec4:	4543      	cmp	r3, r8
 8003ec6:	dcf0      	bgt.n	8003eaa <_printf_float+0x442>
 8003ec8:	e6fa      	b.n	8003cc0 <_printf_float+0x258>
 8003eca:	f04f 0800 	mov.w	r8, #0
 8003ece:	f104 0919 	add.w	r9, r4, #25
 8003ed2:	e7f4      	b.n	8003ebe <_printf_float+0x456>

08003ed4 <_printf_common>:
 8003ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	4616      	mov	r6, r2
 8003eda:	4699      	mov	r9, r3
 8003edc:	688a      	ldr	r2, [r1, #8]
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	bfb8      	it	lt
 8003ee8:	4613      	movlt	r3, r2
 8003eea:	6033      	str	r3, [r6, #0]
 8003eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	460c      	mov	r4, r1
 8003ef4:	b10a      	cbz	r2, 8003efa <_printf_common+0x26>
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	0699      	lsls	r1, r3, #26
 8003efe:	bf42      	ittt	mi
 8003f00:	6833      	ldrmi	r3, [r6, #0]
 8003f02:	3302      	addmi	r3, #2
 8003f04:	6033      	strmi	r3, [r6, #0]
 8003f06:	6825      	ldr	r5, [r4, #0]
 8003f08:	f015 0506 	ands.w	r5, r5, #6
 8003f0c:	d106      	bne.n	8003f1c <_printf_common+0x48>
 8003f0e:	f104 0a19 	add.w	sl, r4, #25
 8003f12:	68e3      	ldr	r3, [r4, #12]
 8003f14:	6832      	ldr	r2, [r6, #0]
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	42ab      	cmp	r3, r5
 8003f1a:	dc26      	bgt.n	8003f6a <_printf_common+0x96>
 8003f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f20:	1e13      	subs	r3, r2, #0
 8003f22:	6822      	ldr	r2, [r4, #0]
 8003f24:	bf18      	it	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	0692      	lsls	r2, r2, #26
 8003f2a:	d42b      	bmi.n	8003f84 <_printf_common+0xb0>
 8003f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f30:	4649      	mov	r1, r9
 8003f32:	4638      	mov	r0, r7
 8003f34:	47c0      	blx	r8
 8003f36:	3001      	adds	r0, #1
 8003f38:	d01e      	beq.n	8003f78 <_printf_common+0xa4>
 8003f3a:	6823      	ldr	r3, [r4, #0]
 8003f3c:	68e5      	ldr	r5, [r4, #12]
 8003f3e:	6832      	ldr	r2, [r6, #0]
 8003f40:	f003 0306 	and.w	r3, r3, #6
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	bf08      	it	eq
 8003f48:	1aad      	subeq	r5, r5, r2
 8003f4a:	68a3      	ldr	r3, [r4, #8]
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	bf0c      	ite	eq
 8003f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f54:	2500      	movne	r5, #0
 8003f56:	4293      	cmp	r3, r2
 8003f58:	bfc4      	itt	gt
 8003f5a:	1a9b      	subgt	r3, r3, r2
 8003f5c:	18ed      	addgt	r5, r5, r3
 8003f5e:	2600      	movs	r6, #0
 8003f60:	341a      	adds	r4, #26
 8003f62:	42b5      	cmp	r5, r6
 8003f64:	d11a      	bne.n	8003f9c <_printf_common+0xc8>
 8003f66:	2000      	movs	r0, #0
 8003f68:	e008      	b.n	8003f7c <_printf_common+0xa8>
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4652      	mov	r2, sl
 8003f6e:	4649      	mov	r1, r9
 8003f70:	4638      	mov	r0, r7
 8003f72:	47c0      	blx	r8
 8003f74:	3001      	adds	r0, #1
 8003f76:	d103      	bne.n	8003f80 <_printf_common+0xac>
 8003f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f80:	3501      	adds	r5, #1
 8003f82:	e7c6      	b.n	8003f12 <_printf_common+0x3e>
 8003f84:	18e1      	adds	r1, r4, r3
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	2030      	movs	r0, #48	; 0x30
 8003f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f8e:	4422      	add	r2, r4
 8003f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f98:	3302      	adds	r3, #2
 8003f9a:	e7c7      	b.n	8003f2c <_printf_common+0x58>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	4649      	mov	r1, r9
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	47c0      	blx	r8
 8003fa6:	3001      	adds	r0, #1
 8003fa8:	d0e6      	beq.n	8003f78 <_printf_common+0xa4>
 8003faa:	3601      	adds	r6, #1
 8003fac:	e7d9      	b.n	8003f62 <_printf_common+0x8e>
	...

08003fb0 <_printf_i>:
 8003fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	4691      	mov	r9, r2
 8003fb8:	7e27      	ldrb	r7, [r4, #24]
 8003fba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003fbc:	2f78      	cmp	r7, #120	; 0x78
 8003fbe:	4680      	mov	r8, r0
 8003fc0:	469a      	mov	sl, r3
 8003fc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003fc6:	d807      	bhi.n	8003fd8 <_printf_i+0x28>
 8003fc8:	2f62      	cmp	r7, #98	; 0x62
 8003fca:	d80a      	bhi.n	8003fe2 <_printf_i+0x32>
 8003fcc:	2f00      	cmp	r7, #0
 8003fce:	f000 80d8 	beq.w	8004182 <_printf_i+0x1d2>
 8003fd2:	2f58      	cmp	r7, #88	; 0x58
 8003fd4:	f000 80a3 	beq.w	800411e <_printf_i+0x16e>
 8003fd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003fe0:	e03a      	b.n	8004058 <_printf_i+0xa8>
 8003fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003fe6:	2b15      	cmp	r3, #21
 8003fe8:	d8f6      	bhi.n	8003fd8 <_printf_i+0x28>
 8003fea:	a001      	add	r0, pc, #4	; (adr r0, 8003ff0 <_printf_i+0x40>)
 8003fec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ff0:	08004049 	.word	0x08004049
 8003ff4:	0800405d 	.word	0x0800405d
 8003ff8:	08003fd9 	.word	0x08003fd9
 8003ffc:	08003fd9 	.word	0x08003fd9
 8004000:	08003fd9 	.word	0x08003fd9
 8004004:	08003fd9 	.word	0x08003fd9
 8004008:	0800405d 	.word	0x0800405d
 800400c:	08003fd9 	.word	0x08003fd9
 8004010:	08003fd9 	.word	0x08003fd9
 8004014:	08003fd9 	.word	0x08003fd9
 8004018:	08003fd9 	.word	0x08003fd9
 800401c:	08004169 	.word	0x08004169
 8004020:	0800408d 	.word	0x0800408d
 8004024:	0800414b 	.word	0x0800414b
 8004028:	08003fd9 	.word	0x08003fd9
 800402c:	08003fd9 	.word	0x08003fd9
 8004030:	0800418b 	.word	0x0800418b
 8004034:	08003fd9 	.word	0x08003fd9
 8004038:	0800408d 	.word	0x0800408d
 800403c:	08003fd9 	.word	0x08003fd9
 8004040:	08003fd9 	.word	0x08003fd9
 8004044:	08004153 	.word	0x08004153
 8004048:	680b      	ldr	r3, [r1, #0]
 800404a:	1d1a      	adds	r2, r3, #4
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	600a      	str	r2, [r1, #0]
 8004050:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004058:	2301      	movs	r3, #1
 800405a:	e0a3      	b.n	80041a4 <_printf_i+0x1f4>
 800405c:	6825      	ldr	r5, [r4, #0]
 800405e:	6808      	ldr	r0, [r1, #0]
 8004060:	062e      	lsls	r6, r5, #24
 8004062:	f100 0304 	add.w	r3, r0, #4
 8004066:	d50a      	bpl.n	800407e <_printf_i+0xce>
 8004068:	6805      	ldr	r5, [r0, #0]
 800406a:	600b      	str	r3, [r1, #0]
 800406c:	2d00      	cmp	r5, #0
 800406e:	da03      	bge.n	8004078 <_printf_i+0xc8>
 8004070:	232d      	movs	r3, #45	; 0x2d
 8004072:	426d      	negs	r5, r5
 8004074:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004078:	485e      	ldr	r0, [pc, #376]	; (80041f4 <_printf_i+0x244>)
 800407a:	230a      	movs	r3, #10
 800407c:	e019      	b.n	80040b2 <_printf_i+0x102>
 800407e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004082:	6805      	ldr	r5, [r0, #0]
 8004084:	600b      	str	r3, [r1, #0]
 8004086:	bf18      	it	ne
 8004088:	b22d      	sxthne	r5, r5
 800408a:	e7ef      	b.n	800406c <_printf_i+0xbc>
 800408c:	680b      	ldr	r3, [r1, #0]
 800408e:	6825      	ldr	r5, [r4, #0]
 8004090:	1d18      	adds	r0, r3, #4
 8004092:	6008      	str	r0, [r1, #0]
 8004094:	0628      	lsls	r0, r5, #24
 8004096:	d501      	bpl.n	800409c <_printf_i+0xec>
 8004098:	681d      	ldr	r5, [r3, #0]
 800409a:	e002      	b.n	80040a2 <_printf_i+0xf2>
 800409c:	0669      	lsls	r1, r5, #25
 800409e:	d5fb      	bpl.n	8004098 <_printf_i+0xe8>
 80040a0:	881d      	ldrh	r5, [r3, #0]
 80040a2:	4854      	ldr	r0, [pc, #336]	; (80041f4 <_printf_i+0x244>)
 80040a4:	2f6f      	cmp	r7, #111	; 0x6f
 80040a6:	bf0c      	ite	eq
 80040a8:	2308      	moveq	r3, #8
 80040aa:	230a      	movne	r3, #10
 80040ac:	2100      	movs	r1, #0
 80040ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040b2:	6866      	ldr	r6, [r4, #4]
 80040b4:	60a6      	str	r6, [r4, #8]
 80040b6:	2e00      	cmp	r6, #0
 80040b8:	bfa2      	ittt	ge
 80040ba:	6821      	ldrge	r1, [r4, #0]
 80040bc:	f021 0104 	bicge.w	r1, r1, #4
 80040c0:	6021      	strge	r1, [r4, #0]
 80040c2:	b90d      	cbnz	r5, 80040c8 <_printf_i+0x118>
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	d04d      	beq.n	8004164 <_printf_i+0x1b4>
 80040c8:	4616      	mov	r6, r2
 80040ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80040ce:	fb03 5711 	mls	r7, r3, r1, r5
 80040d2:	5dc7      	ldrb	r7, [r0, r7]
 80040d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040d8:	462f      	mov	r7, r5
 80040da:	42bb      	cmp	r3, r7
 80040dc:	460d      	mov	r5, r1
 80040de:	d9f4      	bls.n	80040ca <_printf_i+0x11a>
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d10b      	bne.n	80040fc <_printf_i+0x14c>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07df      	lsls	r7, r3, #31
 80040e8:	d508      	bpl.n	80040fc <_printf_i+0x14c>
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	6861      	ldr	r1, [r4, #4]
 80040ee:	4299      	cmp	r1, r3
 80040f0:	bfde      	ittt	le
 80040f2:	2330      	movle	r3, #48	; 0x30
 80040f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040f8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80040fc:	1b92      	subs	r2, r2, r6
 80040fe:	6122      	str	r2, [r4, #16]
 8004100:	f8cd a000 	str.w	sl, [sp]
 8004104:	464b      	mov	r3, r9
 8004106:	aa03      	add	r2, sp, #12
 8004108:	4621      	mov	r1, r4
 800410a:	4640      	mov	r0, r8
 800410c:	f7ff fee2 	bl	8003ed4 <_printf_common>
 8004110:	3001      	adds	r0, #1
 8004112:	d14c      	bne.n	80041ae <_printf_i+0x1fe>
 8004114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004118:	b004      	add	sp, #16
 800411a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800411e:	4835      	ldr	r0, [pc, #212]	; (80041f4 <_printf_i+0x244>)
 8004120:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004124:	6823      	ldr	r3, [r4, #0]
 8004126:	680e      	ldr	r6, [r1, #0]
 8004128:	061f      	lsls	r7, r3, #24
 800412a:	f856 5b04 	ldr.w	r5, [r6], #4
 800412e:	600e      	str	r6, [r1, #0]
 8004130:	d514      	bpl.n	800415c <_printf_i+0x1ac>
 8004132:	07d9      	lsls	r1, r3, #31
 8004134:	bf44      	itt	mi
 8004136:	f043 0320 	orrmi.w	r3, r3, #32
 800413a:	6023      	strmi	r3, [r4, #0]
 800413c:	b91d      	cbnz	r5, 8004146 <_printf_i+0x196>
 800413e:	6823      	ldr	r3, [r4, #0]
 8004140:	f023 0320 	bic.w	r3, r3, #32
 8004144:	6023      	str	r3, [r4, #0]
 8004146:	2310      	movs	r3, #16
 8004148:	e7b0      	b.n	80040ac <_printf_i+0xfc>
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	f043 0320 	orr.w	r3, r3, #32
 8004150:	6023      	str	r3, [r4, #0]
 8004152:	2378      	movs	r3, #120	; 0x78
 8004154:	4828      	ldr	r0, [pc, #160]	; (80041f8 <_printf_i+0x248>)
 8004156:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800415a:	e7e3      	b.n	8004124 <_printf_i+0x174>
 800415c:	065e      	lsls	r6, r3, #25
 800415e:	bf48      	it	mi
 8004160:	b2ad      	uxthmi	r5, r5
 8004162:	e7e6      	b.n	8004132 <_printf_i+0x182>
 8004164:	4616      	mov	r6, r2
 8004166:	e7bb      	b.n	80040e0 <_printf_i+0x130>
 8004168:	680b      	ldr	r3, [r1, #0]
 800416a:	6826      	ldr	r6, [r4, #0]
 800416c:	6960      	ldr	r0, [r4, #20]
 800416e:	1d1d      	adds	r5, r3, #4
 8004170:	600d      	str	r5, [r1, #0]
 8004172:	0635      	lsls	r5, r6, #24
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	d501      	bpl.n	800417c <_printf_i+0x1cc>
 8004178:	6018      	str	r0, [r3, #0]
 800417a:	e002      	b.n	8004182 <_printf_i+0x1d2>
 800417c:	0671      	lsls	r1, r6, #25
 800417e:	d5fb      	bpl.n	8004178 <_printf_i+0x1c8>
 8004180:	8018      	strh	r0, [r3, #0]
 8004182:	2300      	movs	r3, #0
 8004184:	6123      	str	r3, [r4, #16]
 8004186:	4616      	mov	r6, r2
 8004188:	e7ba      	b.n	8004100 <_printf_i+0x150>
 800418a:	680b      	ldr	r3, [r1, #0]
 800418c:	1d1a      	adds	r2, r3, #4
 800418e:	600a      	str	r2, [r1, #0]
 8004190:	681e      	ldr	r6, [r3, #0]
 8004192:	6862      	ldr	r2, [r4, #4]
 8004194:	2100      	movs	r1, #0
 8004196:	4630      	mov	r0, r6
 8004198:	f7fc f822 	bl	80001e0 <memchr>
 800419c:	b108      	cbz	r0, 80041a2 <_printf_i+0x1f2>
 800419e:	1b80      	subs	r0, r0, r6
 80041a0:	6060      	str	r0, [r4, #4]
 80041a2:	6863      	ldr	r3, [r4, #4]
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	2300      	movs	r3, #0
 80041a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ac:	e7a8      	b.n	8004100 <_printf_i+0x150>
 80041ae:	6923      	ldr	r3, [r4, #16]
 80041b0:	4632      	mov	r2, r6
 80041b2:	4649      	mov	r1, r9
 80041b4:	4640      	mov	r0, r8
 80041b6:	47d0      	blx	sl
 80041b8:	3001      	adds	r0, #1
 80041ba:	d0ab      	beq.n	8004114 <_printf_i+0x164>
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	079b      	lsls	r3, r3, #30
 80041c0:	d413      	bmi.n	80041ea <_printf_i+0x23a>
 80041c2:	68e0      	ldr	r0, [r4, #12]
 80041c4:	9b03      	ldr	r3, [sp, #12]
 80041c6:	4298      	cmp	r0, r3
 80041c8:	bfb8      	it	lt
 80041ca:	4618      	movlt	r0, r3
 80041cc:	e7a4      	b.n	8004118 <_printf_i+0x168>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4632      	mov	r2, r6
 80041d2:	4649      	mov	r1, r9
 80041d4:	4640      	mov	r0, r8
 80041d6:	47d0      	blx	sl
 80041d8:	3001      	adds	r0, #1
 80041da:	d09b      	beq.n	8004114 <_printf_i+0x164>
 80041dc:	3501      	adds	r5, #1
 80041de:	68e3      	ldr	r3, [r4, #12]
 80041e0:	9903      	ldr	r1, [sp, #12]
 80041e2:	1a5b      	subs	r3, r3, r1
 80041e4:	42ab      	cmp	r3, r5
 80041e6:	dcf2      	bgt.n	80041ce <_printf_i+0x21e>
 80041e8:	e7eb      	b.n	80041c2 <_printf_i+0x212>
 80041ea:	2500      	movs	r5, #0
 80041ec:	f104 0619 	add.w	r6, r4, #25
 80041f0:	e7f5      	b.n	80041de <_printf_i+0x22e>
 80041f2:	bf00      	nop
 80041f4:	080087ea 	.word	0x080087ea
 80041f8:	080087fb 	.word	0x080087fb

080041fc <_scanf_float>:
 80041fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004200:	b087      	sub	sp, #28
 8004202:	4617      	mov	r7, r2
 8004204:	9303      	str	r3, [sp, #12]
 8004206:	688b      	ldr	r3, [r1, #8]
 8004208:	1e5a      	subs	r2, r3, #1
 800420a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800420e:	bf83      	ittte	hi
 8004210:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004214:	195b      	addhi	r3, r3, r5
 8004216:	9302      	strhi	r3, [sp, #8]
 8004218:	2300      	movls	r3, #0
 800421a:	bf86      	itte	hi
 800421c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004220:	608b      	strhi	r3, [r1, #8]
 8004222:	9302      	strls	r3, [sp, #8]
 8004224:	680b      	ldr	r3, [r1, #0]
 8004226:	468b      	mov	fp, r1
 8004228:	2500      	movs	r5, #0
 800422a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800422e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004232:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004236:	4680      	mov	r8, r0
 8004238:	460c      	mov	r4, r1
 800423a:	465e      	mov	r6, fp
 800423c:	46aa      	mov	sl, r5
 800423e:	46a9      	mov	r9, r5
 8004240:	9501      	str	r5, [sp, #4]
 8004242:	68a2      	ldr	r2, [r4, #8]
 8004244:	b152      	cbz	r2, 800425c <_scanf_float+0x60>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	2b4e      	cmp	r3, #78	; 0x4e
 800424c:	d864      	bhi.n	8004318 <_scanf_float+0x11c>
 800424e:	2b40      	cmp	r3, #64	; 0x40
 8004250:	d83c      	bhi.n	80042cc <_scanf_float+0xd0>
 8004252:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004256:	b2c8      	uxtb	r0, r1
 8004258:	280e      	cmp	r0, #14
 800425a:	d93a      	bls.n	80042d2 <_scanf_float+0xd6>
 800425c:	f1b9 0f00 	cmp.w	r9, #0
 8004260:	d003      	beq.n	800426a <_scanf_float+0x6e>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004268:	6023      	str	r3, [r4, #0]
 800426a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800426e:	f1ba 0f01 	cmp.w	sl, #1
 8004272:	f200 8113 	bhi.w	800449c <_scanf_float+0x2a0>
 8004276:	455e      	cmp	r6, fp
 8004278:	f200 8105 	bhi.w	8004486 <_scanf_float+0x28a>
 800427c:	2501      	movs	r5, #1
 800427e:	4628      	mov	r0, r5
 8004280:	b007      	add	sp, #28
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004286:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800428a:	2a0d      	cmp	r2, #13
 800428c:	d8e6      	bhi.n	800425c <_scanf_float+0x60>
 800428e:	a101      	add	r1, pc, #4	; (adr r1, 8004294 <_scanf_float+0x98>)
 8004290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004294:	080043d3 	.word	0x080043d3
 8004298:	0800425d 	.word	0x0800425d
 800429c:	0800425d 	.word	0x0800425d
 80042a0:	0800425d 	.word	0x0800425d
 80042a4:	08004433 	.word	0x08004433
 80042a8:	0800440b 	.word	0x0800440b
 80042ac:	0800425d 	.word	0x0800425d
 80042b0:	0800425d 	.word	0x0800425d
 80042b4:	080043e1 	.word	0x080043e1
 80042b8:	0800425d 	.word	0x0800425d
 80042bc:	0800425d 	.word	0x0800425d
 80042c0:	0800425d 	.word	0x0800425d
 80042c4:	0800425d 	.word	0x0800425d
 80042c8:	08004399 	.word	0x08004399
 80042cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80042d0:	e7db      	b.n	800428a <_scanf_float+0x8e>
 80042d2:	290e      	cmp	r1, #14
 80042d4:	d8c2      	bhi.n	800425c <_scanf_float+0x60>
 80042d6:	a001      	add	r0, pc, #4	; (adr r0, 80042dc <_scanf_float+0xe0>)
 80042d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80042dc:	0800438b 	.word	0x0800438b
 80042e0:	0800425d 	.word	0x0800425d
 80042e4:	0800438b 	.word	0x0800438b
 80042e8:	0800441f 	.word	0x0800441f
 80042ec:	0800425d 	.word	0x0800425d
 80042f0:	08004339 	.word	0x08004339
 80042f4:	08004375 	.word	0x08004375
 80042f8:	08004375 	.word	0x08004375
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	08004375 	.word	0x08004375
 8004308:	08004375 	.word	0x08004375
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	2b6e      	cmp	r3, #110	; 0x6e
 800431a:	d809      	bhi.n	8004330 <_scanf_float+0x134>
 800431c:	2b60      	cmp	r3, #96	; 0x60
 800431e:	d8b2      	bhi.n	8004286 <_scanf_float+0x8a>
 8004320:	2b54      	cmp	r3, #84	; 0x54
 8004322:	d077      	beq.n	8004414 <_scanf_float+0x218>
 8004324:	2b59      	cmp	r3, #89	; 0x59
 8004326:	d199      	bne.n	800425c <_scanf_float+0x60>
 8004328:	2d07      	cmp	r5, #7
 800432a:	d197      	bne.n	800425c <_scanf_float+0x60>
 800432c:	2508      	movs	r5, #8
 800432e:	e029      	b.n	8004384 <_scanf_float+0x188>
 8004330:	2b74      	cmp	r3, #116	; 0x74
 8004332:	d06f      	beq.n	8004414 <_scanf_float+0x218>
 8004334:	2b79      	cmp	r3, #121	; 0x79
 8004336:	e7f6      	b.n	8004326 <_scanf_float+0x12a>
 8004338:	6821      	ldr	r1, [r4, #0]
 800433a:	05c8      	lsls	r0, r1, #23
 800433c:	d51a      	bpl.n	8004374 <_scanf_float+0x178>
 800433e:	9b02      	ldr	r3, [sp, #8]
 8004340:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004344:	6021      	str	r1, [r4, #0]
 8004346:	f109 0901 	add.w	r9, r9, #1
 800434a:	b11b      	cbz	r3, 8004354 <_scanf_float+0x158>
 800434c:	3b01      	subs	r3, #1
 800434e:	3201      	adds	r2, #1
 8004350:	9302      	str	r3, [sp, #8]
 8004352:	60a2      	str	r2, [r4, #8]
 8004354:	68a3      	ldr	r3, [r4, #8]
 8004356:	3b01      	subs	r3, #1
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	6923      	ldr	r3, [r4, #16]
 800435c:	3301      	adds	r3, #1
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	f340 8084 	ble.w	8004474 <_scanf_float+0x278>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	3301      	adds	r3, #1
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	e766      	b.n	8004242 <_scanf_float+0x46>
 8004374:	eb1a 0f05 	cmn.w	sl, r5
 8004378:	f47f af70 	bne.w	800425c <_scanf_float+0x60>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004382:	6022      	str	r2, [r4, #0]
 8004384:	f806 3b01 	strb.w	r3, [r6], #1
 8004388:	e7e4      	b.n	8004354 <_scanf_float+0x158>
 800438a:	6822      	ldr	r2, [r4, #0]
 800438c:	0610      	lsls	r0, r2, #24
 800438e:	f57f af65 	bpl.w	800425c <_scanf_float+0x60>
 8004392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004396:	e7f4      	b.n	8004382 <_scanf_float+0x186>
 8004398:	f1ba 0f00 	cmp.w	sl, #0
 800439c:	d10e      	bne.n	80043bc <_scanf_float+0x1c0>
 800439e:	f1b9 0f00 	cmp.w	r9, #0
 80043a2:	d10e      	bne.n	80043c2 <_scanf_float+0x1c6>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043ae:	d108      	bne.n	80043c2 <_scanf_float+0x1c6>
 80043b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043b4:	6022      	str	r2, [r4, #0]
 80043b6:	f04f 0a01 	mov.w	sl, #1
 80043ba:	e7e3      	b.n	8004384 <_scanf_float+0x188>
 80043bc:	f1ba 0f02 	cmp.w	sl, #2
 80043c0:	d055      	beq.n	800446e <_scanf_float+0x272>
 80043c2:	2d01      	cmp	r5, #1
 80043c4:	d002      	beq.n	80043cc <_scanf_float+0x1d0>
 80043c6:	2d04      	cmp	r5, #4
 80043c8:	f47f af48 	bne.w	800425c <_scanf_float+0x60>
 80043cc:	3501      	adds	r5, #1
 80043ce:	b2ed      	uxtb	r5, r5
 80043d0:	e7d8      	b.n	8004384 <_scanf_float+0x188>
 80043d2:	f1ba 0f01 	cmp.w	sl, #1
 80043d6:	f47f af41 	bne.w	800425c <_scanf_float+0x60>
 80043da:	f04f 0a02 	mov.w	sl, #2
 80043de:	e7d1      	b.n	8004384 <_scanf_float+0x188>
 80043e0:	b97d      	cbnz	r5, 8004402 <_scanf_float+0x206>
 80043e2:	f1b9 0f00 	cmp.w	r9, #0
 80043e6:	f47f af3c 	bne.w	8004262 <_scanf_float+0x66>
 80043ea:	6822      	ldr	r2, [r4, #0]
 80043ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80043f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80043f4:	f47f af39 	bne.w	800426a <_scanf_float+0x6e>
 80043f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80043fc:	6022      	str	r2, [r4, #0]
 80043fe:	2501      	movs	r5, #1
 8004400:	e7c0      	b.n	8004384 <_scanf_float+0x188>
 8004402:	2d03      	cmp	r5, #3
 8004404:	d0e2      	beq.n	80043cc <_scanf_float+0x1d0>
 8004406:	2d05      	cmp	r5, #5
 8004408:	e7de      	b.n	80043c8 <_scanf_float+0x1cc>
 800440a:	2d02      	cmp	r5, #2
 800440c:	f47f af26 	bne.w	800425c <_scanf_float+0x60>
 8004410:	2503      	movs	r5, #3
 8004412:	e7b7      	b.n	8004384 <_scanf_float+0x188>
 8004414:	2d06      	cmp	r5, #6
 8004416:	f47f af21 	bne.w	800425c <_scanf_float+0x60>
 800441a:	2507      	movs	r5, #7
 800441c:	e7b2      	b.n	8004384 <_scanf_float+0x188>
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	0591      	lsls	r1, r2, #22
 8004422:	f57f af1b 	bpl.w	800425c <_scanf_float+0x60>
 8004426:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004430:	e7a8      	b.n	8004384 <_scanf_float+0x188>
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004438:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800443c:	d006      	beq.n	800444c <_scanf_float+0x250>
 800443e:	0550      	lsls	r0, r2, #21
 8004440:	f57f af0c 	bpl.w	800425c <_scanf_float+0x60>
 8004444:	f1b9 0f00 	cmp.w	r9, #0
 8004448:	f43f af0f 	beq.w	800426a <_scanf_float+0x6e>
 800444c:	0591      	lsls	r1, r2, #22
 800444e:	bf58      	it	pl
 8004450:	9901      	ldrpl	r1, [sp, #4]
 8004452:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004456:	bf58      	it	pl
 8004458:	eba9 0101 	subpl.w	r1, r9, r1
 800445c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004460:	bf58      	it	pl
 8004462:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004466:	6022      	str	r2, [r4, #0]
 8004468:	f04f 0900 	mov.w	r9, #0
 800446c:	e78a      	b.n	8004384 <_scanf_float+0x188>
 800446e:	f04f 0a03 	mov.w	sl, #3
 8004472:	e787      	b.n	8004384 <_scanf_float+0x188>
 8004474:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004478:	4639      	mov	r1, r7
 800447a:	4640      	mov	r0, r8
 800447c:	4798      	blx	r3
 800447e:	2800      	cmp	r0, #0
 8004480:	f43f aedf 	beq.w	8004242 <_scanf_float+0x46>
 8004484:	e6ea      	b.n	800425c <_scanf_float+0x60>
 8004486:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800448a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800448e:	463a      	mov	r2, r7
 8004490:	4640      	mov	r0, r8
 8004492:	4798      	blx	r3
 8004494:	6923      	ldr	r3, [r4, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	6123      	str	r3, [r4, #16]
 800449a:	e6ec      	b.n	8004276 <_scanf_float+0x7a>
 800449c:	1e6b      	subs	r3, r5, #1
 800449e:	2b06      	cmp	r3, #6
 80044a0:	d825      	bhi.n	80044ee <_scanf_float+0x2f2>
 80044a2:	2d02      	cmp	r5, #2
 80044a4:	d836      	bhi.n	8004514 <_scanf_float+0x318>
 80044a6:	455e      	cmp	r6, fp
 80044a8:	f67f aee8 	bls.w	800427c <_scanf_float+0x80>
 80044ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80044b4:	463a      	mov	r2, r7
 80044b6:	4640      	mov	r0, r8
 80044b8:	4798      	blx	r3
 80044ba:	6923      	ldr	r3, [r4, #16]
 80044bc:	3b01      	subs	r3, #1
 80044be:	6123      	str	r3, [r4, #16]
 80044c0:	e7f1      	b.n	80044a6 <_scanf_float+0x2aa>
 80044c2:	9802      	ldr	r0, [sp, #8]
 80044c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80044cc:	9002      	str	r0, [sp, #8]
 80044ce:	463a      	mov	r2, r7
 80044d0:	4640      	mov	r0, r8
 80044d2:	4798      	blx	r3
 80044d4:	6923      	ldr	r3, [r4, #16]
 80044d6:	3b01      	subs	r3, #1
 80044d8:	6123      	str	r3, [r4, #16]
 80044da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044de:	fa5f fa8a 	uxtb.w	sl, sl
 80044e2:	f1ba 0f02 	cmp.w	sl, #2
 80044e6:	d1ec      	bne.n	80044c2 <_scanf_float+0x2c6>
 80044e8:	3d03      	subs	r5, #3
 80044ea:	b2ed      	uxtb	r5, r5
 80044ec:	1b76      	subs	r6, r6, r5
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	05da      	lsls	r2, r3, #23
 80044f2:	d52f      	bpl.n	8004554 <_scanf_float+0x358>
 80044f4:	055b      	lsls	r3, r3, #21
 80044f6:	d510      	bpl.n	800451a <_scanf_float+0x31e>
 80044f8:	455e      	cmp	r6, fp
 80044fa:	f67f aebf 	bls.w	800427c <_scanf_float+0x80>
 80044fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004502:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004506:	463a      	mov	r2, r7
 8004508:	4640      	mov	r0, r8
 800450a:	4798      	blx	r3
 800450c:	6923      	ldr	r3, [r4, #16]
 800450e:	3b01      	subs	r3, #1
 8004510:	6123      	str	r3, [r4, #16]
 8004512:	e7f1      	b.n	80044f8 <_scanf_float+0x2fc>
 8004514:	46aa      	mov	sl, r5
 8004516:	9602      	str	r6, [sp, #8]
 8004518:	e7df      	b.n	80044da <_scanf_float+0x2de>
 800451a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800451e:	6923      	ldr	r3, [r4, #16]
 8004520:	2965      	cmp	r1, #101	; 0x65
 8004522:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004526:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800452a:	6123      	str	r3, [r4, #16]
 800452c:	d00c      	beq.n	8004548 <_scanf_float+0x34c>
 800452e:	2945      	cmp	r1, #69	; 0x45
 8004530:	d00a      	beq.n	8004548 <_scanf_float+0x34c>
 8004532:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004536:	463a      	mov	r2, r7
 8004538:	4640      	mov	r0, r8
 800453a:	4798      	blx	r3
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004542:	3b01      	subs	r3, #1
 8004544:	1eb5      	subs	r5, r6, #2
 8004546:	6123      	str	r3, [r4, #16]
 8004548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800454c:	463a      	mov	r2, r7
 800454e:	4640      	mov	r0, r8
 8004550:	4798      	blx	r3
 8004552:	462e      	mov	r6, r5
 8004554:	6825      	ldr	r5, [r4, #0]
 8004556:	f015 0510 	ands.w	r5, r5, #16
 800455a:	d158      	bne.n	800460e <_scanf_float+0x412>
 800455c:	7035      	strb	r5, [r6, #0]
 800455e:	6823      	ldr	r3, [r4, #0]
 8004560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004568:	d11c      	bne.n	80045a4 <_scanf_float+0x3a8>
 800456a:	9b01      	ldr	r3, [sp, #4]
 800456c:	454b      	cmp	r3, r9
 800456e:	eba3 0209 	sub.w	r2, r3, r9
 8004572:	d124      	bne.n	80045be <_scanf_float+0x3c2>
 8004574:	2200      	movs	r2, #0
 8004576:	4659      	mov	r1, fp
 8004578:	4640      	mov	r0, r8
 800457a:	f000 fe9b 	bl	80052b4 <_strtod_r>
 800457e:	9b03      	ldr	r3, [sp, #12]
 8004580:	6821      	ldr	r1, [r4, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f011 0f02 	tst.w	r1, #2
 8004588:	ec57 6b10 	vmov	r6, r7, d0
 800458c:	f103 0204 	add.w	r2, r3, #4
 8004590:	d020      	beq.n	80045d4 <_scanf_float+0x3d8>
 8004592:	9903      	ldr	r1, [sp, #12]
 8004594:	600a      	str	r2, [r1, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	e9c3 6700 	strd	r6, r7, [r3]
 800459c:	68e3      	ldr	r3, [r4, #12]
 800459e:	3301      	adds	r3, #1
 80045a0:	60e3      	str	r3, [r4, #12]
 80045a2:	e66c      	b.n	800427e <_scanf_float+0x82>
 80045a4:	9b04      	ldr	r3, [sp, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d0e4      	beq.n	8004574 <_scanf_float+0x378>
 80045aa:	9905      	ldr	r1, [sp, #20]
 80045ac:	230a      	movs	r3, #10
 80045ae:	462a      	mov	r2, r5
 80045b0:	3101      	adds	r1, #1
 80045b2:	4640      	mov	r0, r8
 80045b4:	f000 ff08 	bl	80053c8 <_strtol_r>
 80045b8:	9b04      	ldr	r3, [sp, #16]
 80045ba:	9e05      	ldr	r6, [sp, #20]
 80045bc:	1ac2      	subs	r2, r0, r3
 80045be:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80045c2:	429e      	cmp	r6, r3
 80045c4:	bf28      	it	cs
 80045c6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80045ca:	4912      	ldr	r1, [pc, #72]	; (8004614 <_scanf_float+0x418>)
 80045cc:	4630      	mov	r0, r6
 80045ce:	f000 f82b 	bl	8004628 <siprintf>
 80045d2:	e7cf      	b.n	8004574 <_scanf_float+0x378>
 80045d4:	f011 0f04 	tst.w	r1, #4
 80045d8:	9903      	ldr	r1, [sp, #12]
 80045da:	600a      	str	r2, [r1, #0]
 80045dc:	d1db      	bne.n	8004596 <_scanf_float+0x39a>
 80045de:	f8d3 8000 	ldr.w	r8, [r3]
 80045e2:	ee10 2a10 	vmov	r2, s0
 80045e6:	ee10 0a10 	vmov	r0, s0
 80045ea:	463b      	mov	r3, r7
 80045ec:	4639      	mov	r1, r7
 80045ee:	f7fc fa9d 	bl	8000b2c <__aeabi_dcmpun>
 80045f2:	b128      	cbz	r0, 8004600 <_scanf_float+0x404>
 80045f4:	4808      	ldr	r0, [pc, #32]	; (8004618 <_scanf_float+0x41c>)
 80045f6:	f000 f811 	bl	800461c <nanf>
 80045fa:	ed88 0a00 	vstr	s0, [r8]
 80045fe:	e7cd      	b.n	800459c <_scanf_float+0x3a0>
 8004600:	4630      	mov	r0, r6
 8004602:	4639      	mov	r1, r7
 8004604:	f7fc faf0 	bl	8000be8 <__aeabi_d2f>
 8004608:	f8c8 0000 	str.w	r0, [r8]
 800460c:	e7c6      	b.n	800459c <_scanf_float+0x3a0>
 800460e:	2500      	movs	r5, #0
 8004610:	e635      	b.n	800427e <_scanf_float+0x82>
 8004612:	bf00      	nop
 8004614:	0800880c 	.word	0x0800880c
 8004618:	08008c28 	.word	0x08008c28

0800461c <nanf>:
 800461c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004624 <nanf+0x8>
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	7fc00000 	.word	0x7fc00000

08004628 <siprintf>:
 8004628:	b40e      	push	{r1, r2, r3}
 800462a:	b500      	push	{lr}
 800462c:	b09c      	sub	sp, #112	; 0x70
 800462e:	ab1d      	add	r3, sp, #116	; 0x74
 8004630:	9002      	str	r0, [sp, #8]
 8004632:	9006      	str	r0, [sp, #24]
 8004634:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004638:	4809      	ldr	r0, [pc, #36]	; (8004660 <siprintf+0x38>)
 800463a:	9107      	str	r1, [sp, #28]
 800463c:	9104      	str	r1, [sp, #16]
 800463e:	4909      	ldr	r1, [pc, #36]	; (8004664 <siprintf+0x3c>)
 8004640:	f853 2b04 	ldr.w	r2, [r3], #4
 8004644:	9105      	str	r1, [sp, #20]
 8004646:	6800      	ldr	r0, [r0, #0]
 8004648:	9301      	str	r3, [sp, #4]
 800464a:	a902      	add	r1, sp, #8
 800464c:	f002 fea4 	bl	8007398 <_svfiprintf_r>
 8004650:	9b02      	ldr	r3, [sp, #8]
 8004652:	2200      	movs	r2, #0
 8004654:	701a      	strb	r2, [r3, #0]
 8004656:	b01c      	add	sp, #112	; 0x70
 8004658:	f85d eb04 	ldr.w	lr, [sp], #4
 800465c:	b003      	add	sp, #12
 800465e:	4770      	bx	lr
 8004660:	20000018 	.word	0x20000018
 8004664:	ffff0208 	.word	0xffff0208

08004668 <sulp>:
 8004668:	b570      	push	{r4, r5, r6, lr}
 800466a:	4604      	mov	r4, r0
 800466c:	460d      	mov	r5, r1
 800466e:	ec45 4b10 	vmov	d0, r4, r5
 8004672:	4616      	mov	r6, r2
 8004674:	f002 fc2c 	bl	8006ed0 <__ulp>
 8004678:	ec51 0b10 	vmov	r0, r1, d0
 800467c:	b17e      	cbz	r6, 800469e <sulp+0x36>
 800467e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004682:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004686:	2b00      	cmp	r3, #0
 8004688:	dd09      	ble.n	800469e <sulp+0x36>
 800468a:	051b      	lsls	r3, r3, #20
 800468c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004690:	2400      	movs	r4, #0
 8004692:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004696:	4622      	mov	r2, r4
 8004698:	462b      	mov	r3, r5
 800469a:	f7fb ffad 	bl	80005f8 <__aeabi_dmul>
 800469e:	bd70      	pop	{r4, r5, r6, pc}

080046a0 <_strtod_l>:
 80046a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a4:	b0a3      	sub	sp, #140	; 0x8c
 80046a6:	461f      	mov	r7, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	931e      	str	r3, [sp, #120]	; 0x78
 80046ac:	4ba4      	ldr	r3, [pc, #656]	; (8004940 <_strtod_l+0x2a0>)
 80046ae:	9219      	str	r2, [sp, #100]	; 0x64
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	9307      	str	r3, [sp, #28]
 80046b4:	4604      	mov	r4, r0
 80046b6:	4618      	mov	r0, r3
 80046b8:	4688      	mov	r8, r1
 80046ba:	f7fb fd89 	bl	80001d0 <strlen>
 80046be:	f04f 0a00 	mov.w	sl, #0
 80046c2:	4605      	mov	r5, r0
 80046c4:	f04f 0b00 	mov.w	fp, #0
 80046c8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80046cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046ce:	781a      	ldrb	r2, [r3, #0]
 80046d0:	2a2b      	cmp	r2, #43	; 0x2b
 80046d2:	d04c      	beq.n	800476e <_strtod_l+0xce>
 80046d4:	d839      	bhi.n	800474a <_strtod_l+0xaa>
 80046d6:	2a0d      	cmp	r2, #13
 80046d8:	d832      	bhi.n	8004740 <_strtod_l+0xa0>
 80046da:	2a08      	cmp	r2, #8
 80046dc:	d832      	bhi.n	8004744 <_strtod_l+0xa4>
 80046de:	2a00      	cmp	r2, #0
 80046e0:	d03c      	beq.n	800475c <_strtod_l+0xbc>
 80046e2:	2300      	movs	r3, #0
 80046e4:	930e      	str	r3, [sp, #56]	; 0x38
 80046e6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80046e8:	7833      	ldrb	r3, [r6, #0]
 80046ea:	2b30      	cmp	r3, #48	; 0x30
 80046ec:	f040 80b4 	bne.w	8004858 <_strtod_l+0x1b8>
 80046f0:	7873      	ldrb	r3, [r6, #1]
 80046f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80046f6:	2b58      	cmp	r3, #88	; 0x58
 80046f8:	d16c      	bne.n	80047d4 <_strtod_l+0x134>
 80046fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	ab1e      	add	r3, sp, #120	; 0x78
 8004700:	9702      	str	r7, [sp, #8]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	4a8f      	ldr	r2, [pc, #572]	; (8004944 <_strtod_l+0x2a4>)
 8004706:	ab1f      	add	r3, sp, #124	; 0x7c
 8004708:	a91d      	add	r1, sp, #116	; 0x74
 800470a:	4620      	mov	r0, r4
 800470c:	f001 fd40 	bl	8006190 <__gethex>
 8004710:	f010 0707 	ands.w	r7, r0, #7
 8004714:	4605      	mov	r5, r0
 8004716:	d005      	beq.n	8004724 <_strtod_l+0x84>
 8004718:	2f06      	cmp	r7, #6
 800471a:	d12a      	bne.n	8004772 <_strtod_l+0xd2>
 800471c:	3601      	adds	r6, #1
 800471e:	2300      	movs	r3, #0
 8004720:	961d      	str	r6, [sp, #116]	; 0x74
 8004722:	930e      	str	r3, [sp, #56]	; 0x38
 8004724:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004726:	2b00      	cmp	r3, #0
 8004728:	f040 8596 	bne.w	8005258 <_strtod_l+0xbb8>
 800472c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472e:	b1db      	cbz	r3, 8004768 <_strtod_l+0xc8>
 8004730:	4652      	mov	r2, sl
 8004732:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004736:	ec43 2b10 	vmov	d0, r2, r3
 800473a:	b023      	add	sp, #140	; 0x8c
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004740:	2a20      	cmp	r2, #32
 8004742:	d1ce      	bne.n	80046e2 <_strtod_l+0x42>
 8004744:	3301      	adds	r3, #1
 8004746:	931d      	str	r3, [sp, #116]	; 0x74
 8004748:	e7c0      	b.n	80046cc <_strtod_l+0x2c>
 800474a:	2a2d      	cmp	r2, #45	; 0x2d
 800474c:	d1c9      	bne.n	80046e2 <_strtod_l+0x42>
 800474e:	2201      	movs	r2, #1
 8004750:	920e      	str	r2, [sp, #56]	; 0x38
 8004752:	1c5a      	adds	r2, r3, #1
 8004754:	921d      	str	r2, [sp, #116]	; 0x74
 8004756:	785b      	ldrb	r3, [r3, #1]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1c4      	bne.n	80046e6 <_strtod_l+0x46>
 800475c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800475e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004762:	2b00      	cmp	r3, #0
 8004764:	f040 8576 	bne.w	8005254 <_strtod_l+0xbb4>
 8004768:	4652      	mov	r2, sl
 800476a:	465b      	mov	r3, fp
 800476c:	e7e3      	b.n	8004736 <_strtod_l+0x96>
 800476e:	2200      	movs	r2, #0
 8004770:	e7ee      	b.n	8004750 <_strtod_l+0xb0>
 8004772:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004774:	b13a      	cbz	r2, 8004786 <_strtod_l+0xe6>
 8004776:	2135      	movs	r1, #53	; 0x35
 8004778:	a820      	add	r0, sp, #128	; 0x80
 800477a:	f002 fcb4 	bl	80070e6 <__copybits>
 800477e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004780:	4620      	mov	r0, r4
 8004782:	f002 f879 	bl	8006878 <_Bfree>
 8004786:	3f01      	subs	r7, #1
 8004788:	2f05      	cmp	r7, #5
 800478a:	d807      	bhi.n	800479c <_strtod_l+0xfc>
 800478c:	e8df f007 	tbb	[pc, r7]
 8004790:	1d180b0e 	.word	0x1d180b0e
 8004794:	030e      	.short	0x030e
 8004796:	f04f 0b00 	mov.w	fp, #0
 800479a:	46da      	mov	sl, fp
 800479c:	0728      	lsls	r0, r5, #28
 800479e:	d5c1      	bpl.n	8004724 <_strtod_l+0x84>
 80047a0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80047a4:	e7be      	b.n	8004724 <_strtod_l+0x84>
 80047a6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80047aa:	e7f7      	b.n	800479c <_strtod_l+0xfc>
 80047ac:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80047b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80047b2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80047b6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80047ba:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80047be:	e7ed      	b.n	800479c <_strtod_l+0xfc>
 80047c0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004948 <_strtod_l+0x2a8>
 80047c4:	f04f 0a00 	mov.w	sl, #0
 80047c8:	e7e8      	b.n	800479c <_strtod_l+0xfc>
 80047ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80047ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80047d2:	e7e3      	b.n	800479c <_strtod_l+0xfc>
 80047d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	921d      	str	r2, [sp, #116]	; 0x74
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d0f9      	beq.n	80047d4 <_strtod_l+0x134>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d09f      	beq.n	8004724 <_strtod_l+0x84>
 80047e4:	2301      	movs	r3, #1
 80047e6:	f04f 0900 	mov.w	r9, #0
 80047ea:	9304      	str	r3, [sp, #16]
 80047ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047ee:	930a      	str	r3, [sp, #40]	; 0x28
 80047f0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80047f4:	464f      	mov	r7, r9
 80047f6:	220a      	movs	r2, #10
 80047f8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80047fa:	7806      	ldrb	r6, [r0, #0]
 80047fc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004800:	b2d9      	uxtb	r1, r3
 8004802:	2909      	cmp	r1, #9
 8004804:	d92a      	bls.n	800485c <_strtod_l+0x1bc>
 8004806:	9907      	ldr	r1, [sp, #28]
 8004808:	462a      	mov	r2, r5
 800480a:	f002 fedd 	bl	80075c8 <strncmp>
 800480e:	b398      	cbz	r0, 8004878 <_strtod_l+0x1d8>
 8004810:	2000      	movs	r0, #0
 8004812:	4633      	mov	r3, r6
 8004814:	463d      	mov	r5, r7
 8004816:	9007      	str	r0, [sp, #28]
 8004818:	4602      	mov	r2, r0
 800481a:	2b65      	cmp	r3, #101	; 0x65
 800481c:	d001      	beq.n	8004822 <_strtod_l+0x182>
 800481e:	2b45      	cmp	r3, #69	; 0x45
 8004820:	d118      	bne.n	8004854 <_strtod_l+0x1b4>
 8004822:	b91d      	cbnz	r5, 800482c <_strtod_l+0x18c>
 8004824:	9b04      	ldr	r3, [sp, #16]
 8004826:	4303      	orrs	r3, r0
 8004828:	d098      	beq.n	800475c <_strtod_l+0xbc>
 800482a:	2500      	movs	r5, #0
 800482c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004830:	f108 0301 	add.w	r3, r8, #1
 8004834:	931d      	str	r3, [sp, #116]	; 0x74
 8004836:	f898 3001 	ldrb.w	r3, [r8, #1]
 800483a:	2b2b      	cmp	r3, #43	; 0x2b
 800483c:	d075      	beq.n	800492a <_strtod_l+0x28a>
 800483e:	2b2d      	cmp	r3, #45	; 0x2d
 8004840:	d07b      	beq.n	800493a <_strtod_l+0x29a>
 8004842:	f04f 0c00 	mov.w	ip, #0
 8004846:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800484a:	2909      	cmp	r1, #9
 800484c:	f240 8082 	bls.w	8004954 <_strtod_l+0x2b4>
 8004850:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004854:	2600      	movs	r6, #0
 8004856:	e09d      	b.n	8004994 <_strtod_l+0x2f4>
 8004858:	2300      	movs	r3, #0
 800485a:	e7c4      	b.n	80047e6 <_strtod_l+0x146>
 800485c:	2f08      	cmp	r7, #8
 800485e:	bfd8      	it	le
 8004860:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004862:	f100 0001 	add.w	r0, r0, #1
 8004866:	bfda      	itte	le
 8004868:	fb02 3301 	mlale	r3, r2, r1, r3
 800486c:	9309      	strle	r3, [sp, #36]	; 0x24
 800486e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004872:	3701      	adds	r7, #1
 8004874:	901d      	str	r0, [sp, #116]	; 0x74
 8004876:	e7bf      	b.n	80047f8 <_strtod_l+0x158>
 8004878:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800487a:	195a      	adds	r2, r3, r5
 800487c:	921d      	str	r2, [sp, #116]	; 0x74
 800487e:	5d5b      	ldrb	r3, [r3, r5]
 8004880:	2f00      	cmp	r7, #0
 8004882:	d037      	beq.n	80048f4 <_strtod_l+0x254>
 8004884:	9007      	str	r0, [sp, #28]
 8004886:	463d      	mov	r5, r7
 8004888:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800488c:	2a09      	cmp	r2, #9
 800488e:	d912      	bls.n	80048b6 <_strtod_l+0x216>
 8004890:	2201      	movs	r2, #1
 8004892:	e7c2      	b.n	800481a <_strtod_l+0x17a>
 8004894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004896:	1c5a      	adds	r2, r3, #1
 8004898:	921d      	str	r2, [sp, #116]	; 0x74
 800489a:	785b      	ldrb	r3, [r3, #1]
 800489c:	3001      	adds	r0, #1
 800489e:	2b30      	cmp	r3, #48	; 0x30
 80048a0:	d0f8      	beq.n	8004894 <_strtod_l+0x1f4>
 80048a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80048a6:	2a08      	cmp	r2, #8
 80048a8:	f200 84db 	bhi.w	8005262 <_strtod_l+0xbc2>
 80048ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80048ae:	9007      	str	r0, [sp, #28]
 80048b0:	2000      	movs	r0, #0
 80048b2:	920a      	str	r2, [sp, #40]	; 0x28
 80048b4:	4605      	mov	r5, r0
 80048b6:	3b30      	subs	r3, #48	; 0x30
 80048b8:	f100 0201 	add.w	r2, r0, #1
 80048bc:	d014      	beq.n	80048e8 <_strtod_l+0x248>
 80048be:	9907      	ldr	r1, [sp, #28]
 80048c0:	4411      	add	r1, r2
 80048c2:	9107      	str	r1, [sp, #28]
 80048c4:	462a      	mov	r2, r5
 80048c6:	eb00 0e05 	add.w	lr, r0, r5
 80048ca:	210a      	movs	r1, #10
 80048cc:	4572      	cmp	r2, lr
 80048ce:	d113      	bne.n	80048f8 <_strtod_l+0x258>
 80048d0:	182a      	adds	r2, r5, r0
 80048d2:	2a08      	cmp	r2, #8
 80048d4:	f105 0501 	add.w	r5, r5, #1
 80048d8:	4405      	add	r5, r0
 80048da:	dc1c      	bgt.n	8004916 <_strtod_l+0x276>
 80048dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048de:	220a      	movs	r2, #10
 80048e0:	fb02 3301 	mla	r3, r2, r1, r3
 80048e4:	9309      	str	r3, [sp, #36]	; 0x24
 80048e6:	2200      	movs	r2, #0
 80048e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048ea:	1c59      	adds	r1, r3, #1
 80048ec:	911d      	str	r1, [sp, #116]	; 0x74
 80048ee:	785b      	ldrb	r3, [r3, #1]
 80048f0:	4610      	mov	r0, r2
 80048f2:	e7c9      	b.n	8004888 <_strtod_l+0x1e8>
 80048f4:	4638      	mov	r0, r7
 80048f6:	e7d2      	b.n	800489e <_strtod_l+0x1fe>
 80048f8:	2a08      	cmp	r2, #8
 80048fa:	dc04      	bgt.n	8004906 <_strtod_l+0x266>
 80048fc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80048fe:	434e      	muls	r6, r1
 8004900:	9609      	str	r6, [sp, #36]	; 0x24
 8004902:	3201      	adds	r2, #1
 8004904:	e7e2      	b.n	80048cc <_strtod_l+0x22c>
 8004906:	f102 0c01 	add.w	ip, r2, #1
 800490a:	f1bc 0f10 	cmp.w	ip, #16
 800490e:	bfd8      	it	le
 8004910:	fb01 f909 	mulle.w	r9, r1, r9
 8004914:	e7f5      	b.n	8004902 <_strtod_l+0x262>
 8004916:	2d10      	cmp	r5, #16
 8004918:	bfdc      	itt	le
 800491a:	220a      	movle	r2, #10
 800491c:	fb02 3909 	mlale	r9, r2, r9, r3
 8004920:	e7e1      	b.n	80048e6 <_strtod_l+0x246>
 8004922:	2300      	movs	r3, #0
 8004924:	9307      	str	r3, [sp, #28]
 8004926:	2201      	movs	r2, #1
 8004928:	e77c      	b.n	8004824 <_strtod_l+0x184>
 800492a:	f04f 0c00 	mov.w	ip, #0
 800492e:	f108 0302 	add.w	r3, r8, #2
 8004932:	931d      	str	r3, [sp, #116]	; 0x74
 8004934:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004938:	e785      	b.n	8004846 <_strtod_l+0x1a6>
 800493a:	f04f 0c01 	mov.w	ip, #1
 800493e:	e7f6      	b.n	800492e <_strtod_l+0x28e>
 8004940:	08008a68 	.word	0x08008a68
 8004944:	08008814 	.word	0x08008814
 8004948:	7ff00000 	.word	0x7ff00000
 800494c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	911d      	str	r1, [sp, #116]	; 0x74
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b30      	cmp	r3, #48	; 0x30
 8004956:	d0f9      	beq.n	800494c <_strtod_l+0x2ac>
 8004958:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800495c:	2908      	cmp	r1, #8
 800495e:	f63f af79 	bhi.w	8004854 <_strtod_l+0x1b4>
 8004962:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004966:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004968:	9308      	str	r3, [sp, #32]
 800496a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800496c:	1c59      	adds	r1, r3, #1
 800496e:	911d      	str	r1, [sp, #116]	; 0x74
 8004970:	785b      	ldrb	r3, [r3, #1]
 8004972:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004976:	2e09      	cmp	r6, #9
 8004978:	d937      	bls.n	80049ea <_strtod_l+0x34a>
 800497a:	9e08      	ldr	r6, [sp, #32]
 800497c:	1b89      	subs	r1, r1, r6
 800497e:	2908      	cmp	r1, #8
 8004980:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004984:	dc02      	bgt.n	800498c <_strtod_l+0x2ec>
 8004986:	4576      	cmp	r6, lr
 8004988:	bfa8      	it	ge
 800498a:	4676      	movge	r6, lr
 800498c:	f1bc 0f00 	cmp.w	ip, #0
 8004990:	d000      	beq.n	8004994 <_strtod_l+0x2f4>
 8004992:	4276      	negs	r6, r6
 8004994:	2d00      	cmp	r5, #0
 8004996:	d14f      	bne.n	8004a38 <_strtod_l+0x398>
 8004998:	9904      	ldr	r1, [sp, #16]
 800499a:	4301      	orrs	r1, r0
 800499c:	f47f aec2 	bne.w	8004724 <_strtod_l+0x84>
 80049a0:	2a00      	cmp	r2, #0
 80049a2:	f47f aedb 	bne.w	800475c <_strtod_l+0xbc>
 80049a6:	2b69      	cmp	r3, #105	; 0x69
 80049a8:	d027      	beq.n	80049fa <_strtod_l+0x35a>
 80049aa:	dc24      	bgt.n	80049f6 <_strtod_l+0x356>
 80049ac:	2b49      	cmp	r3, #73	; 0x49
 80049ae:	d024      	beq.n	80049fa <_strtod_l+0x35a>
 80049b0:	2b4e      	cmp	r3, #78	; 0x4e
 80049b2:	f47f aed3 	bne.w	800475c <_strtod_l+0xbc>
 80049b6:	499e      	ldr	r1, [pc, #632]	; (8004c30 <_strtod_l+0x590>)
 80049b8:	a81d      	add	r0, sp, #116	; 0x74
 80049ba:	f001 fe41 	bl	8006640 <__match>
 80049be:	2800      	cmp	r0, #0
 80049c0:	f43f aecc 	beq.w	800475c <_strtod_l+0xbc>
 80049c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b28      	cmp	r3, #40	; 0x28
 80049ca:	d12d      	bne.n	8004a28 <_strtod_l+0x388>
 80049cc:	4999      	ldr	r1, [pc, #612]	; (8004c34 <_strtod_l+0x594>)
 80049ce:	aa20      	add	r2, sp, #128	; 0x80
 80049d0:	a81d      	add	r0, sp, #116	; 0x74
 80049d2:	f001 fe49 	bl	8006668 <__hexnan>
 80049d6:	2805      	cmp	r0, #5
 80049d8:	d126      	bne.n	8004a28 <_strtod_l+0x388>
 80049da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049dc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80049e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80049e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80049e8:	e69c      	b.n	8004724 <_strtod_l+0x84>
 80049ea:	210a      	movs	r1, #10
 80049ec:	fb01 3e0e 	mla	lr, r1, lr, r3
 80049f0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80049f4:	e7b9      	b.n	800496a <_strtod_l+0x2ca>
 80049f6:	2b6e      	cmp	r3, #110	; 0x6e
 80049f8:	e7db      	b.n	80049b2 <_strtod_l+0x312>
 80049fa:	498f      	ldr	r1, [pc, #572]	; (8004c38 <_strtod_l+0x598>)
 80049fc:	a81d      	add	r0, sp, #116	; 0x74
 80049fe:	f001 fe1f 	bl	8006640 <__match>
 8004a02:	2800      	cmp	r0, #0
 8004a04:	f43f aeaa 	beq.w	800475c <_strtod_l+0xbc>
 8004a08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a0a:	498c      	ldr	r1, [pc, #560]	; (8004c3c <_strtod_l+0x59c>)
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	a81d      	add	r0, sp, #116	; 0x74
 8004a10:	931d      	str	r3, [sp, #116]	; 0x74
 8004a12:	f001 fe15 	bl	8006640 <__match>
 8004a16:	b910      	cbnz	r0, 8004a1e <_strtod_l+0x37e>
 8004a18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	931d      	str	r3, [sp, #116]	; 0x74
 8004a1e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004c4c <_strtod_l+0x5ac>
 8004a22:	f04f 0a00 	mov.w	sl, #0
 8004a26:	e67d      	b.n	8004724 <_strtod_l+0x84>
 8004a28:	4885      	ldr	r0, [pc, #532]	; (8004c40 <_strtod_l+0x5a0>)
 8004a2a:	f002 fdb5 	bl	8007598 <nan>
 8004a2e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004a32:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004a36:	e675      	b.n	8004724 <_strtod_l+0x84>
 8004a38:	9b07      	ldr	r3, [sp, #28]
 8004a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3c:	1af3      	subs	r3, r6, r3
 8004a3e:	2f00      	cmp	r7, #0
 8004a40:	bf08      	it	eq
 8004a42:	462f      	moveq	r7, r5
 8004a44:	2d10      	cmp	r5, #16
 8004a46:	9308      	str	r3, [sp, #32]
 8004a48:	46a8      	mov	r8, r5
 8004a4a:	bfa8      	it	ge
 8004a4c:	f04f 0810 	movge.w	r8, #16
 8004a50:	f7fb fd58 	bl	8000504 <__aeabi_ui2d>
 8004a54:	2d09      	cmp	r5, #9
 8004a56:	4682      	mov	sl, r0
 8004a58:	468b      	mov	fp, r1
 8004a5a:	dd13      	ble.n	8004a84 <_strtod_l+0x3e4>
 8004a5c:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <_strtod_l+0x5a4>)
 8004a5e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004a62:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004a66:	f7fb fdc7 	bl	80005f8 <__aeabi_dmul>
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	4648      	mov	r0, r9
 8004a6e:	468b      	mov	fp, r1
 8004a70:	f7fb fd48 	bl	8000504 <__aeabi_ui2d>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	4650      	mov	r0, sl
 8004a7a:	4659      	mov	r1, fp
 8004a7c:	f7fb fc06 	bl	800028c <__adddf3>
 8004a80:	4682      	mov	sl, r0
 8004a82:	468b      	mov	fp, r1
 8004a84:	2d0f      	cmp	r5, #15
 8004a86:	dc38      	bgt.n	8004afa <_strtod_l+0x45a>
 8004a88:	9b08      	ldr	r3, [sp, #32]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f43f ae4a 	beq.w	8004724 <_strtod_l+0x84>
 8004a90:	dd24      	ble.n	8004adc <_strtod_l+0x43c>
 8004a92:	2b16      	cmp	r3, #22
 8004a94:	dc0b      	bgt.n	8004aae <_strtod_l+0x40e>
 8004a96:	4d6b      	ldr	r5, [pc, #428]	; (8004c44 <_strtod_l+0x5a4>)
 8004a98:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8004a9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004aa0:	4652      	mov	r2, sl
 8004aa2:	465b      	mov	r3, fp
 8004aa4:	f7fb fda8 	bl	80005f8 <__aeabi_dmul>
 8004aa8:	4682      	mov	sl, r0
 8004aaa:	468b      	mov	fp, r1
 8004aac:	e63a      	b.n	8004724 <_strtod_l+0x84>
 8004aae:	9a08      	ldr	r2, [sp, #32]
 8004ab0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	db20      	blt.n	8004afa <_strtod_l+0x45a>
 8004ab8:	4c62      	ldr	r4, [pc, #392]	; (8004c44 <_strtod_l+0x5a4>)
 8004aba:	f1c5 050f 	rsb	r5, r5, #15
 8004abe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aca:	f7fb fd95 	bl	80005f8 <__aeabi_dmul>
 8004ace:	9b08      	ldr	r3, [sp, #32]
 8004ad0:	1b5d      	subs	r5, r3, r5
 8004ad2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004ada:	e7e3      	b.n	8004aa4 <_strtod_l+0x404>
 8004adc:	9b08      	ldr	r3, [sp, #32]
 8004ade:	3316      	adds	r3, #22
 8004ae0:	db0b      	blt.n	8004afa <_strtod_l+0x45a>
 8004ae2:	9b07      	ldr	r3, [sp, #28]
 8004ae4:	4a57      	ldr	r2, [pc, #348]	; (8004c44 <_strtod_l+0x5a4>)
 8004ae6:	1b9e      	subs	r6, r3, r6
 8004ae8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8004aec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004af0:	4650      	mov	r0, sl
 8004af2:	4659      	mov	r1, fp
 8004af4:	f7fb feaa 	bl	800084c <__aeabi_ddiv>
 8004af8:	e7d6      	b.n	8004aa8 <_strtod_l+0x408>
 8004afa:	9b08      	ldr	r3, [sp, #32]
 8004afc:	eba5 0808 	sub.w	r8, r5, r8
 8004b00:	4498      	add	r8, r3
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	dd71      	ble.n	8004bec <_strtod_l+0x54c>
 8004b08:	f018 030f 	ands.w	r3, r8, #15
 8004b0c:	d00a      	beq.n	8004b24 <_strtod_l+0x484>
 8004b0e:	494d      	ldr	r1, [pc, #308]	; (8004c44 <_strtod_l+0x5a4>)
 8004b10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004b14:	4652      	mov	r2, sl
 8004b16:	465b      	mov	r3, fp
 8004b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b1c:	f7fb fd6c 	bl	80005f8 <__aeabi_dmul>
 8004b20:	4682      	mov	sl, r0
 8004b22:	468b      	mov	fp, r1
 8004b24:	f038 080f 	bics.w	r8, r8, #15
 8004b28:	d04d      	beq.n	8004bc6 <_strtod_l+0x526>
 8004b2a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004b2e:	dd22      	ble.n	8004b76 <_strtod_l+0x4d6>
 8004b30:	2500      	movs	r5, #0
 8004b32:	462e      	mov	r6, r5
 8004b34:	9509      	str	r5, [sp, #36]	; 0x24
 8004b36:	9507      	str	r5, [sp, #28]
 8004b38:	2322      	movs	r3, #34	; 0x22
 8004b3a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004c4c <_strtod_l+0x5ac>
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	f04f 0a00 	mov.w	sl, #0
 8004b44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f43f adec 	beq.w	8004724 <_strtod_l+0x84>
 8004b4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004b4e:	4620      	mov	r0, r4
 8004b50:	f001 fe92 	bl	8006878 <_Bfree>
 8004b54:	9907      	ldr	r1, [sp, #28]
 8004b56:	4620      	mov	r0, r4
 8004b58:	f001 fe8e 	bl	8006878 <_Bfree>
 8004b5c:	4631      	mov	r1, r6
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f001 fe8a 	bl	8006878 <_Bfree>
 8004b64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b66:	4620      	mov	r0, r4
 8004b68:	f001 fe86 	bl	8006878 <_Bfree>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	4620      	mov	r0, r4
 8004b70:	f001 fe82 	bl	8006878 <_Bfree>
 8004b74:	e5d6      	b.n	8004724 <_strtod_l+0x84>
 8004b76:	2300      	movs	r3, #0
 8004b78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004b7c:	4650      	mov	r0, sl
 8004b7e:	4659      	mov	r1, fp
 8004b80:	4699      	mov	r9, r3
 8004b82:	f1b8 0f01 	cmp.w	r8, #1
 8004b86:	dc21      	bgt.n	8004bcc <_strtod_l+0x52c>
 8004b88:	b10b      	cbz	r3, 8004b8e <_strtod_l+0x4ee>
 8004b8a:	4682      	mov	sl, r0
 8004b8c:	468b      	mov	fp, r1
 8004b8e:	4b2e      	ldr	r3, [pc, #184]	; (8004c48 <_strtod_l+0x5a8>)
 8004b90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004b94:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004b98:	4652      	mov	r2, sl
 8004b9a:	465b      	mov	r3, fp
 8004b9c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004ba0:	f7fb fd2a 	bl	80005f8 <__aeabi_dmul>
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <_strtod_l+0x5ac>)
 8004ba6:	460a      	mov	r2, r1
 8004ba8:	400b      	ands	r3, r1
 8004baa:	4929      	ldr	r1, [pc, #164]	; (8004c50 <_strtod_l+0x5b0>)
 8004bac:	428b      	cmp	r3, r1
 8004bae:	4682      	mov	sl, r0
 8004bb0:	d8be      	bhi.n	8004b30 <_strtod_l+0x490>
 8004bb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004bb6:	428b      	cmp	r3, r1
 8004bb8:	bf86      	itte	hi
 8004bba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004c54 <_strtod_l+0x5b4>
 8004bbe:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004bc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9304      	str	r3, [sp, #16]
 8004bca:	e081      	b.n	8004cd0 <_strtod_l+0x630>
 8004bcc:	f018 0f01 	tst.w	r8, #1
 8004bd0:	d007      	beq.n	8004be2 <_strtod_l+0x542>
 8004bd2:	4b1d      	ldr	r3, [pc, #116]	; (8004c48 <_strtod_l+0x5a8>)
 8004bd4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fd0c 	bl	80005f8 <__aeabi_dmul>
 8004be0:	2301      	movs	r3, #1
 8004be2:	f109 0901 	add.w	r9, r9, #1
 8004be6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004bea:	e7ca      	b.n	8004b82 <_strtod_l+0x4e2>
 8004bec:	d0eb      	beq.n	8004bc6 <_strtod_l+0x526>
 8004bee:	f1c8 0800 	rsb	r8, r8, #0
 8004bf2:	f018 020f 	ands.w	r2, r8, #15
 8004bf6:	d00a      	beq.n	8004c0e <_strtod_l+0x56e>
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <_strtod_l+0x5a4>)
 8004bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bfe:	4650      	mov	r0, sl
 8004c00:	4659      	mov	r1, fp
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	f7fb fe21 	bl	800084c <__aeabi_ddiv>
 8004c0a:	4682      	mov	sl, r0
 8004c0c:	468b      	mov	fp, r1
 8004c0e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004c12:	d0d8      	beq.n	8004bc6 <_strtod_l+0x526>
 8004c14:	f1b8 0f1f 	cmp.w	r8, #31
 8004c18:	dd1e      	ble.n	8004c58 <_strtod_l+0x5b8>
 8004c1a:	2500      	movs	r5, #0
 8004c1c:	462e      	mov	r6, r5
 8004c1e:	9509      	str	r5, [sp, #36]	; 0x24
 8004c20:	9507      	str	r5, [sp, #28]
 8004c22:	2322      	movs	r3, #34	; 0x22
 8004c24:	f04f 0a00 	mov.w	sl, #0
 8004c28:	f04f 0b00 	mov.w	fp, #0
 8004c2c:	6023      	str	r3, [r4, #0]
 8004c2e:	e789      	b.n	8004b44 <_strtod_l+0x4a4>
 8004c30:	080087e5 	.word	0x080087e5
 8004c34:	08008828 	.word	0x08008828
 8004c38:	080087dd 	.word	0x080087dd
 8004c3c:	0800896c 	.word	0x0800896c
 8004c40:	08008c28 	.word	0x08008c28
 8004c44:	08008b08 	.word	0x08008b08
 8004c48:	08008ae0 	.word	0x08008ae0
 8004c4c:	7ff00000 	.word	0x7ff00000
 8004c50:	7ca00000 	.word	0x7ca00000
 8004c54:	7fefffff 	.word	0x7fefffff
 8004c58:	f018 0310 	ands.w	r3, r8, #16
 8004c5c:	bf18      	it	ne
 8004c5e:	236a      	movne	r3, #106	; 0x6a
 8004c60:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8005018 <_strtod_l+0x978>
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	4650      	mov	r0, sl
 8004c68:	4659      	mov	r1, fp
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f018 0f01 	tst.w	r8, #1
 8004c70:	d004      	beq.n	8004c7c <_strtod_l+0x5dc>
 8004c72:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004c76:	f7fb fcbf 	bl	80005f8 <__aeabi_dmul>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004c80:	f109 0908 	add.w	r9, r9, #8
 8004c84:	d1f2      	bne.n	8004c6c <_strtod_l+0x5cc>
 8004c86:	b10b      	cbz	r3, 8004c8c <_strtod_l+0x5ec>
 8004c88:	4682      	mov	sl, r0
 8004c8a:	468b      	mov	fp, r1
 8004c8c:	9b04      	ldr	r3, [sp, #16]
 8004c8e:	b1bb      	cbz	r3, 8004cc0 <_strtod_l+0x620>
 8004c90:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004c94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	4659      	mov	r1, fp
 8004c9c:	dd10      	ble.n	8004cc0 <_strtod_l+0x620>
 8004c9e:	2b1f      	cmp	r3, #31
 8004ca0:	f340 8128 	ble.w	8004ef4 <_strtod_l+0x854>
 8004ca4:	2b34      	cmp	r3, #52	; 0x34
 8004ca6:	bfde      	ittt	le
 8004ca8:	3b20      	suble	r3, #32
 8004caa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004cae:	fa02 f303 	lslle.w	r3, r2, r3
 8004cb2:	f04f 0a00 	mov.w	sl, #0
 8004cb6:	bfcc      	ite	gt
 8004cb8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004cbc:	ea03 0b01 	andle.w	fp, r3, r1
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4650      	mov	r0, sl
 8004cc6:	4659      	mov	r1, fp
 8004cc8:	f7fb fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d1a4      	bne.n	8004c1a <_strtod_l+0x57a>
 8004cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	463a      	mov	r2, r7
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f001 fe38 	bl	8006950 <__s2b>
 8004ce0:	9009      	str	r0, [sp, #36]	; 0x24
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	f43f af24 	beq.w	8004b30 <_strtod_l+0x490>
 8004ce8:	9b07      	ldr	r3, [sp, #28]
 8004cea:	1b9e      	subs	r6, r3, r6
 8004cec:	9b08      	ldr	r3, [sp, #32]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfb4      	ite	lt
 8004cf2:	4633      	movlt	r3, r6
 8004cf4:	2300      	movge	r3, #0
 8004cf6:	9310      	str	r3, [sp, #64]	; 0x40
 8004cf8:	9b08      	ldr	r3, [sp, #32]
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004d00:	9318      	str	r3, [sp, #96]	; 0x60
 8004d02:	462e      	mov	r6, r5
 8004d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d06:	4620      	mov	r0, r4
 8004d08:	6859      	ldr	r1, [r3, #4]
 8004d0a:	f001 fd75 	bl	80067f8 <_Balloc>
 8004d0e:	9007      	str	r0, [sp, #28]
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f43f af11 	beq.w	8004b38 <_strtod_l+0x498>
 8004d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d18:	691a      	ldr	r2, [r3, #16]
 8004d1a:	3202      	adds	r2, #2
 8004d1c:	f103 010c 	add.w	r1, r3, #12
 8004d20:	0092      	lsls	r2, r2, #2
 8004d22:	300c      	adds	r0, #12
 8004d24:	f001 fd5a 	bl	80067dc <memcpy>
 8004d28:	ec4b ab10 	vmov	d0, sl, fp
 8004d2c:	aa20      	add	r2, sp, #128	; 0x80
 8004d2e:	a91f      	add	r1, sp, #124	; 0x7c
 8004d30:	4620      	mov	r0, r4
 8004d32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004d36:	f002 f947 	bl	8006fc8 <__d2b>
 8004d3a:	901e      	str	r0, [sp, #120]	; 0x78
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	f43f aefb 	beq.w	8004b38 <_strtod_l+0x498>
 8004d42:	2101      	movs	r1, #1
 8004d44:	4620      	mov	r0, r4
 8004d46:	f001 fe9d 	bl	8006a84 <__i2b>
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	f43f aef3 	beq.w	8004b38 <_strtod_l+0x498>
 8004d52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d54:	9904      	ldr	r1, [sp, #16]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfab      	itete	ge
 8004d5a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004d5c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004d5e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004d60:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004d64:	bfac      	ite	ge
 8004d66:	eb03 0902 	addge.w	r9, r3, r2
 8004d6a:	1ad7      	sublt	r7, r2, r3
 8004d6c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d6e:	eba3 0801 	sub.w	r8, r3, r1
 8004d72:	4490      	add	r8, r2
 8004d74:	4ba3      	ldr	r3, [pc, #652]	; (8005004 <_strtod_l+0x964>)
 8004d76:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004d7a:	4598      	cmp	r8, r3
 8004d7c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004d80:	f280 80cc 	bge.w	8004f1c <_strtod_l+0x87c>
 8004d84:	eba3 0308 	sub.w	r3, r3, r8
 8004d88:	2b1f      	cmp	r3, #31
 8004d8a:	eba2 0203 	sub.w	r2, r2, r3
 8004d8e:	f04f 0101 	mov.w	r1, #1
 8004d92:	f300 80b6 	bgt.w	8004f02 <_strtod_l+0x862>
 8004d96:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9a:	9311      	str	r3, [sp, #68]	; 0x44
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	930c      	str	r3, [sp, #48]	; 0x30
 8004da0:	eb09 0802 	add.w	r8, r9, r2
 8004da4:	9b04      	ldr	r3, [sp, #16]
 8004da6:	45c1      	cmp	r9, r8
 8004da8:	4417      	add	r7, r2
 8004daa:	441f      	add	r7, r3
 8004dac:	464b      	mov	r3, r9
 8004dae:	bfa8      	it	ge
 8004db0:	4643      	movge	r3, r8
 8004db2:	42bb      	cmp	r3, r7
 8004db4:	bfa8      	it	ge
 8004db6:	463b      	movge	r3, r7
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	bfc2      	ittt	gt
 8004dbc:	eba8 0803 	subgt.w	r8, r8, r3
 8004dc0:	1aff      	subgt	r7, r7, r3
 8004dc2:	eba9 0903 	subgt.w	r9, r9, r3
 8004dc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	dd17      	ble.n	8004dfc <_strtod_l+0x75c>
 8004dcc:	4631      	mov	r1, r6
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f001 ff13 	bl	8006bfc <__pow5mult>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	2800      	cmp	r0, #0
 8004dda:	f43f aead 	beq.w	8004b38 <_strtod_l+0x498>
 8004dde:	4601      	mov	r1, r0
 8004de0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004de2:	4620      	mov	r0, r4
 8004de4:	f001 fe64 	bl	8006ab0 <__multiply>
 8004de8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f43f aea4 	beq.w	8004b38 <_strtod_l+0x498>
 8004df0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004df2:	4620      	mov	r0, r4
 8004df4:	f001 fd40 	bl	8006878 <_Bfree>
 8004df8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dfa:	931e      	str	r3, [sp, #120]	; 0x78
 8004dfc:	f1b8 0f00 	cmp.w	r8, #0
 8004e00:	f300 8091 	bgt.w	8004f26 <_strtod_l+0x886>
 8004e04:	9b08      	ldr	r3, [sp, #32]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dd08      	ble.n	8004e1c <_strtod_l+0x77c>
 8004e0a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004e0c:	9907      	ldr	r1, [sp, #28]
 8004e0e:	4620      	mov	r0, r4
 8004e10:	f001 fef4 	bl	8006bfc <__pow5mult>
 8004e14:	9007      	str	r0, [sp, #28]
 8004e16:	2800      	cmp	r0, #0
 8004e18:	f43f ae8e 	beq.w	8004b38 <_strtod_l+0x498>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	dd08      	ble.n	8004e32 <_strtod_l+0x792>
 8004e20:	9907      	ldr	r1, [sp, #28]
 8004e22:	463a      	mov	r2, r7
 8004e24:	4620      	mov	r0, r4
 8004e26:	f001 ff43 	bl	8006cb0 <__lshift>
 8004e2a:	9007      	str	r0, [sp, #28]
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	f43f ae83 	beq.w	8004b38 <_strtod_l+0x498>
 8004e32:	f1b9 0f00 	cmp.w	r9, #0
 8004e36:	dd08      	ble.n	8004e4a <_strtod_l+0x7aa>
 8004e38:	4631      	mov	r1, r6
 8004e3a:	464a      	mov	r2, r9
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	f001 ff37 	bl	8006cb0 <__lshift>
 8004e42:	4606      	mov	r6, r0
 8004e44:	2800      	cmp	r0, #0
 8004e46:	f43f ae77 	beq.w	8004b38 <_strtod_l+0x498>
 8004e4a:	9a07      	ldr	r2, [sp, #28]
 8004e4c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f001 ffb6 	bl	8006dc0 <__mdiff>
 8004e54:	4605      	mov	r5, r0
 8004e56:	2800      	cmp	r0, #0
 8004e58:	f43f ae6e 	beq.w	8004b38 <_strtod_l+0x498>
 8004e5c:	68c3      	ldr	r3, [r0, #12]
 8004e5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e60:	2300      	movs	r3, #0
 8004e62:	60c3      	str	r3, [r0, #12]
 8004e64:	4631      	mov	r1, r6
 8004e66:	f001 ff8f 	bl	8006d88 <__mcmp>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	da65      	bge.n	8004f3a <_strtod_l+0x89a>
 8004e6e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e70:	ea53 030a 	orrs.w	r3, r3, sl
 8004e74:	f040 8087 	bne.w	8004f86 <_strtod_l+0x8e6>
 8004e78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f040 8082 	bne.w	8004f86 <_strtod_l+0x8e6>
 8004e82:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004e86:	0d1b      	lsrs	r3, r3, #20
 8004e88:	051b      	lsls	r3, r3, #20
 8004e8a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004e8e:	d97a      	bls.n	8004f86 <_strtod_l+0x8e6>
 8004e90:	696b      	ldr	r3, [r5, #20]
 8004e92:	b913      	cbnz	r3, 8004e9a <_strtod_l+0x7fa>
 8004e94:	692b      	ldr	r3, [r5, #16]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	dd75      	ble.n	8004f86 <_strtod_l+0x8e6>
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	4620      	mov	r0, r4
 8004ea0:	f001 ff06 	bl	8006cb0 <__lshift>
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4605      	mov	r5, r0
 8004ea8:	f001 ff6e 	bl	8006d88 <__mcmp>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	dd6a      	ble.n	8004f86 <_strtod_l+0x8e6>
 8004eb0:	9904      	ldr	r1, [sp, #16]
 8004eb2:	4a55      	ldr	r2, [pc, #340]	; (8005008 <_strtod_l+0x968>)
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	2900      	cmp	r1, #0
 8004eb8:	f000 8085 	beq.w	8004fc6 <_strtod_l+0x926>
 8004ebc:	ea02 010b 	and.w	r1, r2, fp
 8004ec0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004ec4:	dc7f      	bgt.n	8004fc6 <_strtod_l+0x926>
 8004ec6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004eca:	f77f aeaa 	ble.w	8004c22 <_strtod_l+0x582>
 8004ece:	4a4f      	ldr	r2, [pc, #316]	; (800500c <_strtod_l+0x96c>)
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004edc:	4659      	mov	r1, fp
 8004ede:	f7fb fb8b 	bl	80005f8 <__aeabi_dmul>
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4303      	orrs	r3, r0
 8004ee6:	bf08      	it	eq
 8004ee8:	2322      	moveq	r3, #34	; 0x22
 8004eea:	4682      	mov	sl, r0
 8004eec:	468b      	mov	fp, r1
 8004eee:	bf08      	it	eq
 8004ef0:	6023      	streq	r3, [r4, #0]
 8004ef2:	e62b      	b.n	8004b4c <_strtod_l+0x4ac>
 8004ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	ea03 0a0a 	and.w	sl, r3, sl
 8004f00:	e6de      	b.n	8004cc0 <_strtod_l+0x620>
 8004f02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004f06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004f0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004f0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004f12:	fa01 f308 	lsl.w	r3, r1, r8
 8004f16:	930c      	str	r3, [sp, #48]	; 0x30
 8004f18:	9111      	str	r1, [sp, #68]	; 0x44
 8004f1a:	e741      	b.n	8004da0 <_strtod_l+0x700>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f20:	2301      	movs	r3, #1
 8004f22:	9311      	str	r3, [sp, #68]	; 0x44
 8004f24:	e73c      	b.n	8004da0 <_strtod_l+0x700>
 8004f26:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f28:	4642      	mov	r2, r8
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f001 fec0 	bl	8006cb0 <__lshift>
 8004f30:	901e      	str	r0, [sp, #120]	; 0x78
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f47f af66 	bne.w	8004e04 <_strtod_l+0x764>
 8004f38:	e5fe      	b.n	8004b38 <_strtod_l+0x498>
 8004f3a:	465f      	mov	r7, fp
 8004f3c:	d16e      	bne.n	800501c <_strtod_l+0x97c>
 8004f3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f44:	b342      	cbz	r2, 8004f98 <_strtod_l+0x8f8>
 8004f46:	4a32      	ldr	r2, [pc, #200]	; (8005010 <_strtod_l+0x970>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d128      	bne.n	8004f9e <_strtod_l+0x8fe>
 8004f4c:	9b04      	ldr	r3, [sp, #16]
 8004f4e:	4650      	mov	r0, sl
 8004f50:	b1eb      	cbz	r3, 8004f8e <_strtod_l+0x8ee>
 8004f52:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <_strtod_l+0x968>)
 8004f54:	403a      	ands	r2, r7
 8004f56:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004f5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004f5e:	d819      	bhi.n	8004f94 <_strtod_l+0x8f4>
 8004f60:	0d12      	lsrs	r2, r2, #20
 8004f62:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004f66:	fa01 f303 	lsl.w	r3, r1, r3
 8004f6a:	4298      	cmp	r0, r3
 8004f6c:	d117      	bne.n	8004f9e <_strtod_l+0x8fe>
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <_strtod_l+0x974>)
 8004f70:	429f      	cmp	r7, r3
 8004f72:	d102      	bne.n	8004f7a <_strtod_l+0x8da>
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f addf 	beq.w	8004b38 <_strtod_l+0x498>
 8004f7a:	4b23      	ldr	r3, [pc, #140]	; (8005008 <_strtod_l+0x968>)
 8004f7c:	403b      	ands	r3, r7
 8004f7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004f82:	f04f 0a00 	mov.w	sl, #0
 8004f86:	9b04      	ldr	r3, [sp, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1a0      	bne.n	8004ece <_strtod_l+0x82e>
 8004f8c:	e5de      	b.n	8004b4c <_strtod_l+0x4ac>
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004f92:	e7ea      	b.n	8004f6a <_strtod_l+0x8ca>
 8004f94:	460b      	mov	r3, r1
 8004f96:	e7e8      	b.n	8004f6a <_strtod_l+0x8ca>
 8004f98:	ea53 030a 	orrs.w	r3, r3, sl
 8004f9c:	d088      	beq.n	8004eb0 <_strtod_l+0x810>
 8004f9e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fa0:	b1db      	cbz	r3, 8004fda <_strtod_l+0x93a>
 8004fa2:	423b      	tst	r3, r7
 8004fa4:	d0ef      	beq.n	8004f86 <_strtod_l+0x8e6>
 8004fa6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fa8:	9a04      	ldr	r2, [sp, #16]
 8004faa:	4650      	mov	r0, sl
 8004fac:	4659      	mov	r1, fp
 8004fae:	b1c3      	cbz	r3, 8004fe2 <_strtod_l+0x942>
 8004fb0:	f7ff fb5a 	bl	8004668 <sulp>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fbc:	f7fb f966 	bl	800028c <__adddf3>
 8004fc0:	4682      	mov	sl, r0
 8004fc2:	468b      	mov	fp, r1
 8004fc4:	e7df      	b.n	8004f86 <_strtod_l+0x8e6>
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004fcc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004fd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004fd4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004fd8:	e7d5      	b.n	8004f86 <_strtod_l+0x8e6>
 8004fda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004fdc:	ea13 0f0a 	tst.w	r3, sl
 8004fe0:	e7e0      	b.n	8004fa4 <_strtod_l+0x904>
 8004fe2:	f7ff fb41 	bl	8004668 <sulp>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fee:	f7fb f94b 	bl	8000288 <__aeabi_dsub>
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4682      	mov	sl, r0
 8004ff8:	468b      	mov	fp, r1
 8004ffa:	f7fb fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d0c1      	beq.n	8004f86 <_strtod_l+0x8e6>
 8005002:	e60e      	b.n	8004c22 <_strtod_l+0x582>
 8005004:	fffffc02 	.word	0xfffffc02
 8005008:	7ff00000 	.word	0x7ff00000
 800500c:	39500000 	.word	0x39500000
 8005010:	000fffff 	.word	0x000fffff
 8005014:	7fefffff 	.word	0x7fefffff
 8005018:	08008840 	.word	0x08008840
 800501c:	4631      	mov	r1, r6
 800501e:	4628      	mov	r0, r5
 8005020:	f002 f82e 	bl	8007080 <__ratio>
 8005024:	ec59 8b10 	vmov	r8, r9, d0
 8005028:	ee10 0a10 	vmov	r0, s0
 800502c:	2200      	movs	r2, #0
 800502e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005032:	4649      	mov	r1, r9
 8005034:	f7fb fd5c 	bl	8000af0 <__aeabi_dcmple>
 8005038:	2800      	cmp	r0, #0
 800503a:	d07c      	beq.n	8005136 <_strtod_l+0xa96>
 800503c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800503e:	2b00      	cmp	r3, #0
 8005040:	d04c      	beq.n	80050dc <_strtod_l+0xa3c>
 8005042:	4b95      	ldr	r3, [pc, #596]	; (8005298 <_strtod_l+0xbf8>)
 8005044:	2200      	movs	r2, #0
 8005046:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800504a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005298 <_strtod_l+0xbf8>
 800504e:	f04f 0800 	mov.w	r8, #0
 8005052:	4b92      	ldr	r3, [pc, #584]	; (800529c <_strtod_l+0xbfc>)
 8005054:	403b      	ands	r3, r7
 8005056:	9311      	str	r3, [sp, #68]	; 0x44
 8005058:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800505a:	4b91      	ldr	r3, [pc, #580]	; (80052a0 <_strtod_l+0xc00>)
 800505c:	429a      	cmp	r2, r3
 800505e:	f040 80b2 	bne.w	80051c6 <_strtod_l+0xb26>
 8005062:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800506a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800506e:	ec4b ab10 	vmov	d0, sl, fp
 8005072:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8005076:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800507a:	f001 ff29 	bl	8006ed0 <__ulp>
 800507e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005082:	ec53 2b10 	vmov	r2, r3, d0
 8005086:	f7fb fab7 	bl	80005f8 <__aeabi_dmul>
 800508a:	4652      	mov	r2, sl
 800508c:	465b      	mov	r3, fp
 800508e:	f7fb f8fd 	bl	800028c <__adddf3>
 8005092:	460b      	mov	r3, r1
 8005094:	4981      	ldr	r1, [pc, #516]	; (800529c <_strtod_l+0xbfc>)
 8005096:	4a83      	ldr	r2, [pc, #524]	; (80052a4 <_strtod_l+0xc04>)
 8005098:	4019      	ands	r1, r3
 800509a:	4291      	cmp	r1, r2
 800509c:	4682      	mov	sl, r0
 800509e:	d95e      	bls.n	800515e <_strtod_l+0xabe>
 80050a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d103      	bne.n	80050b2 <_strtod_l+0xa12>
 80050aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ac:	3301      	adds	r3, #1
 80050ae:	f43f ad43 	beq.w	8004b38 <_strtod_l+0x498>
 80050b2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80052b0 <_strtod_l+0xc10>
 80050b6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80050ba:	991e      	ldr	r1, [sp, #120]	; 0x78
 80050bc:	4620      	mov	r0, r4
 80050be:	f001 fbdb 	bl	8006878 <_Bfree>
 80050c2:	9907      	ldr	r1, [sp, #28]
 80050c4:	4620      	mov	r0, r4
 80050c6:	f001 fbd7 	bl	8006878 <_Bfree>
 80050ca:	4631      	mov	r1, r6
 80050cc:	4620      	mov	r0, r4
 80050ce:	f001 fbd3 	bl	8006878 <_Bfree>
 80050d2:	4629      	mov	r1, r5
 80050d4:	4620      	mov	r0, r4
 80050d6:	f001 fbcf 	bl	8006878 <_Bfree>
 80050da:	e613      	b.n	8004d04 <_strtod_l+0x664>
 80050dc:	f1ba 0f00 	cmp.w	sl, #0
 80050e0:	d11b      	bne.n	800511a <_strtod_l+0xa7a>
 80050e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80050e6:	b9f3      	cbnz	r3, 8005126 <_strtod_l+0xa86>
 80050e8:	4b6b      	ldr	r3, [pc, #428]	; (8005298 <_strtod_l+0xbf8>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	4640      	mov	r0, r8
 80050ee:	4649      	mov	r1, r9
 80050f0:	f7fb fcf4 	bl	8000adc <__aeabi_dcmplt>
 80050f4:	b9d0      	cbnz	r0, 800512c <_strtod_l+0xa8c>
 80050f6:	4640      	mov	r0, r8
 80050f8:	4649      	mov	r1, r9
 80050fa:	4b6b      	ldr	r3, [pc, #428]	; (80052a8 <_strtod_l+0xc08>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	f7fb fa7b 	bl	80005f8 <__aeabi_dmul>
 8005102:	4680      	mov	r8, r0
 8005104:	4689      	mov	r9, r1
 8005106:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800510a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800510e:	931b      	str	r3, [sp, #108]	; 0x6c
 8005110:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8005114:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8005118:	e79b      	b.n	8005052 <_strtod_l+0x9b2>
 800511a:	f1ba 0f01 	cmp.w	sl, #1
 800511e:	d102      	bne.n	8005126 <_strtod_l+0xa86>
 8005120:	2f00      	cmp	r7, #0
 8005122:	f43f ad7e 	beq.w	8004c22 <_strtod_l+0x582>
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <_strtod_l+0xc0c>)
 8005128:	2200      	movs	r2, #0
 800512a:	e78c      	b.n	8005046 <_strtod_l+0x9a6>
 800512c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80052a8 <_strtod_l+0xc08>
 8005130:	f04f 0800 	mov.w	r8, #0
 8005134:	e7e7      	b.n	8005106 <_strtod_l+0xa66>
 8005136:	4b5c      	ldr	r3, [pc, #368]	; (80052a8 <_strtod_l+0xc08>)
 8005138:	4640      	mov	r0, r8
 800513a:	4649      	mov	r1, r9
 800513c:	2200      	movs	r2, #0
 800513e:	f7fb fa5b 	bl	80005f8 <__aeabi_dmul>
 8005142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005144:	4680      	mov	r8, r0
 8005146:	4689      	mov	r9, r1
 8005148:	b933      	cbnz	r3, 8005158 <_strtod_l+0xab8>
 800514a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800514e:	9012      	str	r0, [sp, #72]	; 0x48
 8005150:	9313      	str	r3, [sp, #76]	; 0x4c
 8005152:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005156:	e7dd      	b.n	8005114 <_strtod_l+0xa74>
 8005158:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800515c:	e7f9      	b.n	8005152 <_strtod_l+0xab2>
 800515e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005162:	9b04      	ldr	r3, [sp, #16]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1a8      	bne.n	80050ba <_strtod_l+0xa1a>
 8005168:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800516c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800516e:	0d1b      	lsrs	r3, r3, #20
 8005170:	051b      	lsls	r3, r3, #20
 8005172:	429a      	cmp	r2, r3
 8005174:	d1a1      	bne.n	80050ba <_strtod_l+0xa1a>
 8005176:	4640      	mov	r0, r8
 8005178:	4649      	mov	r1, r9
 800517a:	f7fb fd9d 	bl	8000cb8 <__aeabi_d2lz>
 800517e:	f7fb fa0d 	bl	800059c <__aeabi_l2d>
 8005182:	4602      	mov	r2, r0
 8005184:	460b      	mov	r3, r1
 8005186:	4640      	mov	r0, r8
 8005188:	4649      	mov	r1, r9
 800518a:	f7fb f87d 	bl	8000288 <__aeabi_dsub>
 800518e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005190:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005194:	ea43 030a 	orr.w	r3, r3, sl
 8005198:	4313      	orrs	r3, r2
 800519a:	4680      	mov	r8, r0
 800519c:	4689      	mov	r9, r1
 800519e:	d053      	beq.n	8005248 <_strtod_l+0xba8>
 80051a0:	a335      	add	r3, pc, #212	; (adr r3, 8005278 <_strtod_l+0xbd8>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	f7fb fc99 	bl	8000adc <__aeabi_dcmplt>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	f47f acce 	bne.w	8004b4c <_strtod_l+0x4ac>
 80051b0:	a333      	add	r3, pc, #204	; (adr r3, 8005280 <_strtod_l+0xbe0>)
 80051b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b6:	4640      	mov	r0, r8
 80051b8:	4649      	mov	r1, r9
 80051ba:	f7fb fcad 	bl	8000b18 <__aeabi_dcmpgt>
 80051be:	2800      	cmp	r0, #0
 80051c0:	f43f af7b 	beq.w	80050ba <_strtod_l+0xa1a>
 80051c4:	e4c2      	b.n	8004b4c <_strtod_l+0x4ac>
 80051c6:	9b04      	ldr	r3, [sp, #16]
 80051c8:	b333      	cbz	r3, 8005218 <_strtod_l+0xb78>
 80051ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051cc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80051d0:	d822      	bhi.n	8005218 <_strtod_l+0xb78>
 80051d2:	a32d      	add	r3, pc, #180	; (adr r3, 8005288 <_strtod_l+0xbe8>)
 80051d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d8:	4640      	mov	r0, r8
 80051da:	4649      	mov	r1, r9
 80051dc:	f7fb fc88 	bl	8000af0 <__aeabi_dcmple>
 80051e0:	b1a0      	cbz	r0, 800520c <_strtod_l+0xb6c>
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	f7fb fcdf 	bl	8000ba8 <__aeabi_d2uiz>
 80051ea:	2801      	cmp	r0, #1
 80051ec:	bf38      	it	cc
 80051ee:	2001      	movcc	r0, #1
 80051f0:	f7fb f988 	bl	8000504 <__aeabi_ui2d>
 80051f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051f6:	4680      	mov	r8, r0
 80051f8:	4689      	mov	r9, r1
 80051fa:	bb13      	cbnz	r3, 8005242 <_strtod_l+0xba2>
 80051fc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005200:	9014      	str	r0, [sp, #80]	; 0x50
 8005202:	9315      	str	r3, [sp, #84]	; 0x54
 8005204:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005208:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800520c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800520e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005210:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	930d      	str	r3, [sp, #52]	; 0x34
 8005218:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800521c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005224:	f001 fe54 	bl	8006ed0 <__ulp>
 8005228:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800522c:	ec53 2b10 	vmov	r2, r3, d0
 8005230:	f7fb f9e2 	bl	80005f8 <__aeabi_dmul>
 8005234:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005238:	f7fb f828 	bl	800028c <__adddf3>
 800523c:	4682      	mov	sl, r0
 800523e:	468b      	mov	fp, r1
 8005240:	e78f      	b.n	8005162 <_strtod_l+0xac2>
 8005242:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005246:	e7dd      	b.n	8005204 <_strtod_l+0xb64>
 8005248:	a311      	add	r3, pc, #68	; (adr r3, 8005290 <_strtod_l+0xbf0>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb fc45 	bl	8000adc <__aeabi_dcmplt>
 8005252:	e7b4      	b.n	80051be <_strtod_l+0xb1e>
 8005254:	2300      	movs	r3, #0
 8005256:	930e      	str	r3, [sp, #56]	; 0x38
 8005258:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800525a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	f7ff ba65 	b.w	800472c <_strtod_l+0x8c>
 8005262:	2b65      	cmp	r3, #101	; 0x65
 8005264:	f43f ab5d 	beq.w	8004922 <_strtod_l+0x282>
 8005268:	2b45      	cmp	r3, #69	; 0x45
 800526a:	f43f ab5a 	beq.w	8004922 <_strtod_l+0x282>
 800526e:	2201      	movs	r2, #1
 8005270:	f7ff bb92 	b.w	8004998 <_strtod_l+0x2f8>
 8005274:	f3af 8000 	nop.w
 8005278:	94a03595 	.word	0x94a03595
 800527c:	3fdfffff 	.word	0x3fdfffff
 8005280:	35afe535 	.word	0x35afe535
 8005284:	3fe00000 	.word	0x3fe00000
 8005288:	ffc00000 	.word	0xffc00000
 800528c:	41dfffff 	.word	0x41dfffff
 8005290:	94a03595 	.word	0x94a03595
 8005294:	3fcfffff 	.word	0x3fcfffff
 8005298:	3ff00000 	.word	0x3ff00000
 800529c:	7ff00000 	.word	0x7ff00000
 80052a0:	7fe00000 	.word	0x7fe00000
 80052a4:	7c9fffff 	.word	0x7c9fffff
 80052a8:	3fe00000 	.word	0x3fe00000
 80052ac:	bff00000 	.word	0xbff00000
 80052b0:	7fefffff 	.word	0x7fefffff

080052b4 <_strtod_r>:
 80052b4:	4b01      	ldr	r3, [pc, #4]	; (80052bc <_strtod_r+0x8>)
 80052b6:	f7ff b9f3 	b.w	80046a0 <_strtod_l>
 80052ba:	bf00      	nop
 80052bc:	20000080 	.word	0x20000080

080052c0 <_strtol_l.isra.0>:
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c6:	d001      	beq.n	80052cc <_strtol_l.isra.0+0xc>
 80052c8:	2b24      	cmp	r3, #36	; 0x24
 80052ca:	d906      	bls.n	80052da <_strtol_l.isra.0+0x1a>
 80052cc:	f7fe fafa 	bl	80038c4 <__errno>
 80052d0:	2316      	movs	r3, #22
 80052d2:	6003      	str	r3, [r0, #0]
 80052d4:	2000      	movs	r0, #0
 80052d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052da:	4f3a      	ldr	r7, [pc, #232]	; (80053c4 <_strtol_l.isra.0+0x104>)
 80052dc:	468e      	mov	lr, r1
 80052de:	4676      	mov	r6, lr
 80052e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80052e4:	5de5      	ldrb	r5, [r4, r7]
 80052e6:	f015 0508 	ands.w	r5, r5, #8
 80052ea:	d1f8      	bne.n	80052de <_strtol_l.isra.0+0x1e>
 80052ec:	2c2d      	cmp	r4, #45	; 0x2d
 80052ee:	d134      	bne.n	800535a <_strtol_l.isra.0+0x9a>
 80052f0:	f89e 4000 	ldrb.w	r4, [lr]
 80052f4:	f04f 0801 	mov.w	r8, #1
 80052f8:	f106 0e02 	add.w	lr, r6, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d05c      	beq.n	80053ba <_strtol_l.isra.0+0xfa>
 8005300:	2b10      	cmp	r3, #16
 8005302:	d10c      	bne.n	800531e <_strtol_l.isra.0+0x5e>
 8005304:	2c30      	cmp	r4, #48	; 0x30
 8005306:	d10a      	bne.n	800531e <_strtol_l.isra.0+0x5e>
 8005308:	f89e 4000 	ldrb.w	r4, [lr]
 800530c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005310:	2c58      	cmp	r4, #88	; 0x58
 8005312:	d14d      	bne.n	80053b0 <_strtol_l.isra.0+0xf0>
 8005314:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005318:	2310      	movs	r3, #16
 800531a:	f10e 0e02 	add.w	lr, lr, #2
 800531e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005322:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005326:	2600      	movs	r6, #0
 8005328:	fbbc f9f3 	udiv	r9, ip, r3
 800532c:	4635      	mov	r5, r6
 800532e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005332:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005336:	2f09      	cmp	r7, #9
 8005338:	d818      	bhi.n	800536c <_strtol_l.isra.0+0xac>
 800533a:	463c      	mov	r4, r7
 800533c:	42a3      	cmp	r3, r4
 800533e:	dd24      	ble.n	800538a <_strtol_l.isra.0+0xca>
 8005340:	2e00      	cmp	r6, #0
 8005342:	db1f      	blt.n	8005384 <_strtol_l.isra.0+0xc4>
 8005344:	45a9      	cmp	r9, r5
 8005346:	d31d      	bcc.n	8005384 <_strtol_l.isra.0+0xc4>
 8005348:	d101      	bne.n	800534e <_strtol_l.isra.0+0x8e>
 800534a:	45a2      	cmp	sl, r4
 800534c:	db1a      	blt.n	8005384 <_strtol_l.isra.0+0xc4>
 800534e:	fb05 4503 	mla	r5, r5, r3, r4
 8005352:	2601      	movs	r6, #1
 8005354:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005358:	e7eb      	b.n	8005332 <_strtol_l.isra.0+0x72>
 800535a:	2c2b      	cmp	r4, #43	; 0x2b
 800535c:	bf08      	it	eq
 800535e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005362:	46a8      	mov	r8, r5
 8005364:	bf08      	it	eq
 8005366:	f106 0e02 	addeq.w	lr, r6, #2
 800536a:	e7c7      	b.n	80052fc <_strtol_l.isra.0+0x3c>
 800536c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005370:	2f19      	cmp	r7, #25
 8005372:	d801      	bhi.n	8005378 <_strtol_l.isra.0+0xb8>
 8005374:	3c37      	subs	r4, #55	; 0x37
 8005376:	e7e1      	b.n	800533c <_strtol_l.isra.0+0x7c>
 8005378:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800537c:	2f19      	cmp	r7, #25
 800537e:	d804      	bhi.n	800538a <_strtol_l.isra.0+0xca>
 8005380:	3c57      	subs	r4, #87	; 0x57
 8005382:	e7db      	b.n	800533c <_strtol_l.isra.0+0x7c>
 8005384:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005388:	e7e4      	b.n	8005354 <_strtol_l.isra.0+0x94>
 800538a:	2e00      	cmp	r6, #0
 800538c:	da05      	bge.n	800539a <_strtol_l.isra.0+0xda>
 800538e:	2322      	movs	r3, #34	; 0x22
 8005390:	6003      	str	r3, [r0, #0]
 8005392:	4665      	mov	r5, ip
 8005394:	b942      	cbnz	r2, 80053a8 <_strtol_l.isra.0+0xe8>
 8005396:	4628      	mov	r0, r5
 8005398:	e79d      	b.n	80052d6 <_strtol_l.isra.0+0x16>
 800539a:	f1b8 0f00 	cmp.w	r8, #0
 800539e:	d000      	beq.n	80053a2 <_strtol_l.isra.0+0xe2>
 80053a0:	426d      	negs	r5, r5
 80053a2:	2a00      	cmp	r2, #0
 80053a4:	d0f7      	beq.n	8005396 <_strtol_l.isra.0+0xd6>
 80053a6:	b10e      	cbz	r6, 80053ac <_strtol_l.isra.0+0xec>
 80053a8:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 80053ac:	6011      	str	r1, [r2, #0]
 80053ae:	e7f2      	b.n	8005396 <_strtol_l.isra.0+0xd6>
 80053b0:	2430      	movs	r4, #48	; 0x30
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1b3      	bne.n	800531e <_strtol_l.isra.0+0x5e>
 80053b6:	2308      	movs	r3, #8
 80053b8:	e7b1      	b.n	800531e <_strtol_l.isra.0+0x5e>
 80053ba:	2c30      	cmp	r4, #48	; 0x30
 80053bc:	d0a4      	beq.n	8005308 <_strtol_l.isra.0+0x48>
 80053be:	230a      	movs	r3, #10
 80053c0:	e7ad      	b.n	800531e <_strtol_l.isra.0+0x5e>
 80053c2:	bf00      	nop
 80053c4:	08008869 	.word	0x08008869

080053c8 <_strtol_r>:
 80053c8:	f7ff bf7a 	b.w	80052c0 <_strtol_l.isra.0>

080053cc <quorem>:
 80053cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	6903      	ldr	r3, [r0, #16]
 80053d2:	690c      	ldr	r4, [r1, #16]
 80053d4:	42a3      	cmp	r3, r4
 80053d6:	4607      	mov	r7, r0
 80053d8:	f2c0 8081 	blt.w	80054de <quorem+0x112>
 80053dc:	3c01      	subs	r4, #1
 80053de:	f101 0814 	add.w	r8, r1, #20
 80053e2:	f100 0514 	add.w	r5, r0, #20
 80053e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053f4:	3301      	adds	r3, #1
 80053f6:	429a      	cmp	r2, r3
 80053f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80053fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005400:	fbb2 f6f3 	udiv	r6, r2, r3
 8005404:	d331      	bcc.n	800546a <quorem+0x9e>
 8005406:	f04f 0e00 	mov.w	lr, #0
 800540a:	4640      	mov	r0, r8
 800540c:	46ac      	mov	ip, r5
 800540e:	46f2      	mov	sl, lr
 8005410:	f850 2b04 	ldr.w	r2, [r0], #4
 8005414:	b293      	uxth	r3, r2
 8005416:	fb06 e303 	mla	r3, r6, r3, lr
 800541a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800541e:	b29b      	uxth	r3, r3
 8005420:	ebaa 0303 	sub.w	r3, sl, r3
 8005424:	0c12      	lsrs	r2, r2, #16
 8005426:	f8dc a000 	ldr.w	sl, [ip]
 800542a:	fb06 e202 	mla	r2, r6, r2, lr
 800542e:	fa13 f38a 	uxtah	r3, r3, sl
 8005432:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005436:	fa1f fa82 	uxth.w	sl, r2
 800543a:	f8dc 2000 	ldr.w	r2, [ip]
 800543e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005442:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005446:	b29b      	uxth	r3, r3
 8005448:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800544c:	4581      	cmp	r9, r0
 800544e:	f84c 3b04 	str.w	r3, [ip], #4
 8005452:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005456:	d2db      	bcs.n	8005410 <quorem+0x44>
 8005458:	f855 300b 	ldr.w	r3, [r5, fp]
 800545c:	b92b      	cbnz	r3, 800546a <quorem+0x9e>
 800545e:	9b01      	ldr	r3, [sp, #4]
 8005460:	3b04      	subs	r3, #4
 8005462:	429d      	cmp	r5, r3
 8005464:	461a      	mov	r2, r3
 8005466:	d32e      	bcc.n	80054c6 <quorem+0xfa>
 8005468:	613c      	str	r4, [r7, #16]
 800546a:	4638      	mov	r0, r7
 800546c:	f001 fc8c 	bl	8006d88 <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	db24      	blt.n	80054be <quorem+0xf2>
 8005474:	3601      	adds	r6, #1
 8005476:	4628      	mov	r0, r5
 8005478:	f04f 0c00 	mov.w	ip, #0
 800547c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005480:	f8d0 e000 	ldr.w	lr, [r0]
 8005484:	b293      	uxth	r3, r2
 8005486:	ebac 0303 	sub.w	r3, ip, r3
 800548a:	0c12      	lsrs	r2, r2, #16
 800548c:	fa13 f38e 	uxtah	r3, r3, lr
 8005490:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005494:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800549e:	45c1      	cmp	r9, r8
 80054a0:	f840 3b04 	str.w	r3, [r0], #4
 80054a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80054a8:	d2e8      	bcs.n	800547c <quorem+0xb0>
 80054aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054b2:	b922      	cbnz	r2, 80054be <quorem+0xf2>
 80054b4:	3b04      	subs	r3, #4
 80054b6:	429d      	cmp	r5, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	d30a      	bcc.n	80054d2 <quorem+0x106>
 80054bc:	613c      	str	r4, [r7, #16]
 80054be:	4630      	mov	r0, r6
 80054c0:	b003      	add	sp, #12
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	3b04      	subs	r3, #4
 80054ca:	2a00      	cmp	r2, #0
 80054cc:	d1cc      	bne.n	8005468 <quorem+0x9c>
 80054ce:	3c01      	subs	r4, #1
 80054d0:	e7c7      	b.n	8005462 <quorem+0x96>
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	3b04      	subs	r3, #4
 80054d6:	2a00      	cmp	r2, #0
 80054d8:	d1f0      	bne.n	80054bc <quorem+0xf0>
 80054da:	3c01      	subs	r4, #1
 80054dc:	e7eb      	b.n	80054b6 <quorem+0xea>
 80054de:	2000      	movs	r0, #0
 80054e0:	e7ee      	b.n	80054c0 <quorem+0xf4>
 80054e2:	0000      	movs	r0, r0
 80054e4:	0000      	movs	r0, r0
	...

080054e8 <_dtoa_r>:
 80054e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ec:	ed2d 8b02 	vpush	{d8}
 80054f0:	ec57 6b10 	vmov	r6, r7, d0
 80054f4:	b095      	sub	sp, #84	; 0x54
 80054f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80054fc:	9105      	str	r1, [sp, #20]
 80054fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005502:	4604      	mov	r4, r0
 8005504:	9209      	str	r2, [sp, #36]	; 0x24
 8005506:	930f      	str	r3, [sp, #60]	; 0x3c
 8005508:	b975      	cbnz	r5, 8005528 <_dtoa_r+0x40>
 800550a:	2010      	movs	r0, #16
 800550c:	f001 f94c 	bl	80067a8 <malloc>
 8005510:	4602      	mov	r2, r0
 8005512:	6260      	str	r0, [r4, #36]	; 0x24
 8005514:	b920      	cbnz	r0, 8005520 <_dtoa_r+0x38>
 8005516:	4bb2      	ldr	r3, [pc, #712]	; (80057e0 <_dtoa_r+0x2f8>)
 8005518:	21ea      	movs	r1, #234	; 0xea
 800551a:	48b2      	ldr	r0, [pc, #712]	; (80057e4 <_dtoa_r+0x2fc>)
 800551c:	f002 f874 	bl	8007608 <__assert_func>
 8005520:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005524:	6005      	str	r5, [r0, #0]
 8005526:	60c5      	str	r5, [r0, #12]
 8005528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800552a:	6819      	ldr	r1, [r3, #0]
 800552c:	b151      	cbz	r1, 8005544 <_dtoa_r+0x5c>
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	604a      	str	r2, [r1, #4]
 8005532:	2301      	movs	r3, #1
 8005534:	4093      	lsls	r3, r2
 8005536:	608b      	str	r3, [r1, #8]
 8005538:	4620      	mov	r0, r4
 800553a:	f001 f99d 	bl	8006878 <_Bfree>
 800553e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005540:	2200      	movs	r2, #0
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	1e3b      	subs	r3, r7, #0
 8005546:	bfb9      	ittee	lt
 8005548:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800554c:	9303      	strlt	r3, [sp, #12]
 800554e:	2300      	movge	r3, #0
 8005550:	f8c8 3000 	strge.w	r3, [r8]
 8005554:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005558:	4ba3      	ldr	r3, [pc, #652]	; (80057e8 <_dtoa_r+0x300>)
 800555a:	bfbc      	itt	lt
 800555c:	2201      	movlt	r2, #1
 800555e:	f8c8 2000 	strlt.w	r2, [r8]
 8005562:	ea33 0309 	bics.w	r3, r3, r9
 8005566:	d11b      	bne.n	80055a0 <_dtoa_r+0xb8>
 8005568:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800556a:	f242 730f 	movw	r3, #9999	; 0x270f
 800556e:	6013      	str	r3, [r2, #0]
 8005570:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005574:	4333      	orrs	r3, r6
 8005576:	f000 857a 	beq.w	800606e <_dtoa_r+0xb86>
 800557a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800557c:	b963      	cbnz	r3, 8005598 <_dtoa_r+0xb0>
 800557e:	4b9b      	ldr	r3, [pc, #620]	; (80057ec <_dtoa_r+0x304>)
 8005580:	e024      	b.n	80055cc <_dtoa_r+0xe4>
 8005582:	4b9b      	ldr	r3, [pc, #620]	; (80057f0 <_dtoa_r+0x308>)
 8005584:	9300      	str	r3, [sp, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800558a:	6013      	str	r3, [r2, #0]
 800558c:	9800      	ldr	r0, [sp, #0]
 800558e:	b015      	add	sp, #84	; 0x54
 8005590:	ecbd 8b02 	vpop	{d8}
 8005594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005598:	4b94      	ldr	r3, [pc, #592]	; (80057ec <_dtoa_r+0x304>)
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	3303      	adds	r3, #3
 800559e:	e7f3      	b.n	8005588 <_dtoa_r+0xa0>
 80055a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80055a4:	2200      	movs	r2, #0
 80055a6:	ec51 0b17 	vmov	r0, r1, d7
 80055aa:	2300      	movs	r3, #0
 80055ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80055b0:	f7fb fa8a 	bl	8000ac8 <__aeabi_dcmpeq>
 80055b4:	4680      	mov	r8, r0
 80055b6:	b158      	cbz	r0, 80055d0 <_dtoa_r+0xe8>
 80055b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80055ba:	2301      	movs	r3, #1
 80055bc:	6013      	str	r3, [r2, #0]
 80055be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8551 	beq.w	8006068 <_dtoa_r+0xb80>
 80055c6:	488b      	ldr	r0, [pc, #556]	; (80057f4 <_dtoa_r+0x30c>)
 80055c8:	6018      	str	r0, [r3, #0]
 80055ca:	1e43      	subs	r3, r0, #1
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	e7dd      	b.n	800558c <_dtoa_r+0xa4>
 80055d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80055d4:	aa12      	add	r2, sp, #72	; 0x48
 80055d6:	a913      	add	r1, sp, #76	; 0x4c
 80055d8:	4620      	mov	r0, r4
 80055da:	f001 fcf5 	bl	8006fc8 <__d2b>
 80055de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80055e2:	4683      	mov	fp, r0
 80055e4:	2d00      	cmp	r5, #0
 80055e6:	d07c      	beq.n	80056e2 <_dtoa_r+0x1fa>
 80055e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80055ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80055f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80055fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80055fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005602:	4b7d      	ldr	r3, [pc, #500]	; (80057f8 <_dtoa_r+0x310>)
 8005604:	2200      	movs	r2, #0
 8005606:	4630      	mov	r0, r6
 8005608:	4639      	mov	r1, r7
 800560a:	f7fa fe3d 	bl	8000288 <__aeabi_dsub>
 800560e:	a36e      	add	r3, pc, #440	; (adr r3, 80057c8 <_dtoa_r+0x2e0>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa fff0 	bl	80005f8 <__aeabi_dmul>
 8005618:	a36d      	add	r3, pc, #436	; (adr r3, 80057d0 <_dtoa_r+0x2e8>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fa fe35 	bl	800028c <__adddf3>
 8005622:	4606      	mov	r6, r0
 8005624:	4628      	mov	r0, r5
 8005626:	460f      	mov	r7, r1
 8005628:	f7fa ff7c 	bl	8000524 <__aeabi_i2d>
 800562c:	a36a      	add	r3, pc, #424	; (adr r3, 80057d8 <_dtoa_r+0x2f0>)
 800562e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005632:	f7fa ffe1 	bl	80005f8 <__aeabi_dmul>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4630      	mov	r0, r6
 800563c:	4639      	mov	r1, r7
 800563e:	f7fa fe25 	bl	800028c <__adddf3>
 8005642:	4606      	mov	r6, r0
 8005644:	460f      	mov	r7, r1
 8005646:	f7fb fa87 	bl	8000b58 <__aeabi_d2iz>
 800564a:	2200      	movs	r2, #0
 800564c:	4682      	mov	sl, r0
 800564e:	2300      	movs	r3, #0
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fb fa42 	bl	8000adc <__aeabi_dcmplt>
 8005658:	b148      	cbz	r0, 800566e <_dtoa_r+0x186>
 800565a:	4650      	mov	r0, sl
 800565c:	f7fa ff62 	bl	8000524 <__aeabi_i2d>
 8005660:	4632      	mov	r2, r6
 8005662:	463b      	mov	r3, r7
 8005664:	f7fb fa30 	bl	8000ac8 <__aeabi_dcmpeq>
 8005668:	b908      	cbnz	r0, 800566e <_dtoa_r+0x186>
 800566a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800566e:	f1ba 0f16 	cmp.w	sl, #22
 8005672:	d854      	bhi.n	800571e <_dtoa_r+0x236>
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <_dtoa_r+0x314>)
 8005676:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005682:	f7fb fa2b 	bl	8000adc <__aeabi_dcmplt>
 8005686:	2800      	cmp	r0, #0
 8005688:	d04b      	beq.n	8005722 <_dtoa_r+0x23a>
 800568a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800568e:	2300      	movs	r3, #0
 8005690:	930e      	str	r3, [sp, #56]	; 0x38
 8005692:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005694:	1b5d      	subs	r5, r3, r5
 8005696:	1e6b      	subs	r3, r5, #1
 8005698:	9304      	str	r3, [sp, #16]
 800569a:	bf43      	ittte	mi
 800569c:	2300      	movmi	r3, #0
 800569e:	f1c5 0801 	rsbmi	r8, r5, #1
 80056a2:	9304      	strmi	r3, [sp, #16]
 80056a4:	f04f 0800 	movpl.w	r8, #0
 80056a8:	f1ba 0f00 	cmp.w	sl, #0
 80056ac:	db3b      	blt.n	8005726 <_dtoa_r+0x23e>
 80056ae:	9b04      	ldr	r3, [sp, #16]
 80056b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80056b4:	4453      	add	r3, sl
 80056b6:	9304      	str	r3, [sp, #16]
 80056b8:	2300      	movs	r3, #0
 80056ba:	9306      	str	r3, [sp, #24]
 80056bc:	9b05      	ldr	r3, [sp, #20]
 80056be:	2b09      	cmp	r3, #9
 80056c0:	d869      	bhi.n	8005796 <_dtoa_r+0x2ae>
 80056c2:	2b05      	cmp	r3, #5
 80056c4:	bfc4      	itt	gt
 80056c6:	3b04      	subgt	r3, #4
 80056c8:	9305      	strgt	r3, [sp, #20]
 80056ca:	9b05      	ldr	r3, [sp, #20]
 80056cc:	f1a3 0302 	sub.w	r3, r3, #2
 80056d0:	bfcc      	ite	gt
 80056d2:	2500      	movgt	r5, #0
 80056d4:	2501      	movle	r5, #1
 80056d6:	2b03      	cmp	r3, #3
 80056d8:	d869      	bhi.n	80057ae <_dtoa_r+0x2c6>
 80056da:	e8df f003 	tbb	[pc, r3]
 80056de:	4e2c      	.short	0x4e2c
 80056e0:	5a4c      	.short	0x5a4c
 80056e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80056e6:	441d      	add	r5, r3
 80056e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80056ec:	2b20      	cmp	r3, #32
 80056ee:	bfc1      	itttt	gt
 80056f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80056f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80056f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80056fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005700:	bfda      	itte	le
 8005702:	f1c3 0320 	rsble	r3, r3, #32
 8005706:	fa06 f003 	lslle.w	r0, r6, r3
 800570a:	4318      	orrgt	r0, r3
 800570c:	f7fa fefa 	bl	8000504 <__aeabi_ui2d>
 8005710:	2301      	movs	r3, #1
 8005712:	4606      	mov	r6, r0
 8005714:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005718:	3d01      	subs	r5, #1
 800571a:	9310      	str	r3, [sp, #64]	; 0x40
 800571c:	e771      	b.n	8005602 <_dtoa_r+0x11a>
 800571e:	2301      	movs	r3, #1
 8005720:	e7b6      	b.n	8005690 <_dtoa_r+0x1a8>
 8005722:	900e      	str	r0, [sp, #56]	; 0x38
 8005724:	e7b5      	b.n	8005692 <_dtoa_r+0x1aa>
 8005726:	f1ca 0300 	rsb	r3, sl, #0
 800572a:	9306      	str	r3, [sp, #24]
 800572c:	2300      	movs	r3, #0
 800572e:	eba8 080a 	sub.w	r8, r8, sl
 8005732:	930d      	str	r3, [sp, #52]	; 0x34
 8005734:	e7c2      	b.n	80056bc <_dtoa_r+0x1d4>
 8005736:	2300      	movs	r3, #0
 8005738:	9308      	str	r3, [sp, #32]
 800573a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	dc39      	bgt.n	80057b4 <_dtoa_r+0x2cc>
 8005740:	f04f 0901 	mov.w	r9, #1
 8005744:	f8cd 9004 	str.w	r9, [sp, #4]
 8005748:	464b      	mov	r3, r9
 800574a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800574e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005750:	2200      	movs	r2, #0
 8005752:	6042      	str	r2, [r0, #4]
 8005754:	2204      	movs	r2, #4
 8005756:	f102 0614 	add.w	r6, r2, #20
 800575a:	429e      	cmp	r6, r3
 800575c:	6841      	ldr	r1, [r0, #4]
 800575e:	d92f      	bls.n	80057c0 <_dtoa_r+0x2d8>
 8005760:	4620      	mov	r0, r4
 8005762:	f001 f849 	bl	80067f8 <_Balloc>
 8005766:	9000      	str	r0, [sp, #0]
 8005768:	2800      	cmp	r0, #0
 800576a:	d14b      	bne.n	8005804 <_dtoa_r+0x31c>
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <_dtoa_r+0x318>)
 800576e:	4602      	mov	r2, r0
 8005770:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005774:	e6d1      	b.n	800551a <_dtoa_r+0x32>
 8005776:	2301      	movs	r3, #1
 8005778:	e7de      	b.n	8005738 <_dtoa_r+0x250>
 800577a:	2300      	movs	r3, #0
 800577c:	9308      	str	r3, [sp, #32]
 800577e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005780:	eb0a 0903 	add.w	r9, sl, r3
 8005784:	f109 0301 	add.w	r3, r9, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	bfb8      	it	lt
 800578e:	2301      	movlt	r3, #1
 8005790:	e7dd      	b.n	800574e <_dtoa_r+0x266>
 8005792:	2301      	movs	r3, #1
 8005794:	e7f2      	b.n	800577c <_dtoa_r+0x294>
 8005796:	2501      	movs	r5, #1
 8005798:	2300      	movs	r3, #0
 800579a:	9305      	str	r3, [sp, #20]
 800579c:	9508      	str	r5, [sp, #32]
 800579e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80057a8:	2312      	movs	r3, #18
 80057aa:	9209      	str	r2, [sp, #36]	; 0x24
 80057ac:	e7cf      	b.n	800574e <_dtoa_r+0x266>
 80057ae:	2301      	movs	r3, #1
 80057b0:	9308      	str	r3, [sp, #32]
 80057b2:	e7f4      	b.n	800579e <_dtoa_r+0x2b6>
 80057b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80057b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80057bc:	464b      	mov	r3, r9
 80057be:	e7c6      	b.n	800574e <_dtoa_r+0x266>
 80057c0:	3101      	adds	r1, #1
 80057c2:	6041      	str	r1, [r0, #4]
 80057c4:	0052      	lsls	r2, r2, #1
 80057c6:	e7c6      	b.n	8005756 <_dtoa_r+0x26e>
 80057c8:	636f4361 	.word	0x636f4361
 80057cc:	3fd287a7 	.word	0x3fd287a7
 80057d0:	8b60c8b3 	.word	0x8b60c8b3
 80057d4:	3fc68a28 	.word	0x3fc68a28
 80057d8:	509f79fb 	.word	0x509f79fb
 80057dc:	3fd34413 	.word	0x3fd34413
 80057e0:	08008976 	.word	0x08008976
 80057e4:	0800898d 	.word	0x0800898d
 80057e8:	7ff00000 	.word	0x7ff00000
 80057ec:	08008972 	.word	0x08008972
 80057f0:	08008969 	.word	0x08008969
 80057f4:	080087e9 	.word	0x080087e9
 80057f8:	3ff80000 	.word	0x3ff80000
 80057fc:	08008b08 	.word	0x08008b08
 8005800:	080089ec 	.word	0x080089ec
 8005804:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005806:	9a00      	ldr	r2, [sp, #0]
 8005808:	601a      	str	r2, [r3, #0]
 800580a:	9b01      	ldr	r3, [sp, #4]
 800580c:	2b0e      	cmp	r3, #14
 800580e:	f200 80ad 	bhi.w	800596c <_dtoa_r+0x484>
 8005812:	2d00      	cmp	r5, #0
 8005814:	f000 80aa 	beq.w	800596c <_dtoa_r+0x484>
 8005818:	f1ba 0f00 	cmp.w	sl, #0
 800581c:	dd36      	ble.n	800588c <_dtoa_r+0x3a4>
 800581e:	4ac3      	ldr	r2, [pc, #780]	; (8005b2c <_dtoa_r+0x644>)
 8005820:	f00a 030f 	and.w	r3, sl, #15
 8005824:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005828:	ed93 7b00 	vldr	d7, [r3]
 800582c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005830:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005834:	eeb0 8a47 	vmov.f32	s16, s14
 8005838:	eef0 8a67 	vmov.f32	s17, s15
 800583c:	d016      	beq.n	800586c <_dtoa_r+0x384>
 800583e:	4bbc      	ldr	r3, [pc, #752]	; (8005b30 <_dtoa_r+0x648>)
 8005840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005848:	f7fb f800 	bl	800084c <__aeabi_ddiv>
 800584c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005850:	f007 070f 	and.w	r7, r7, #15
 8005854:	2503      	movs	r5, #3
 8005856:	4eb6      	ldr	r6, [pc, #728]	; (8005b30 <_dtoa_r+0x648>)
 8005858:	b957      	cbnz	r7, 8005870 <_dtoa_r+0x388>
 800585a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800585e:	ec53 2b18 	vmov	r2, r3, d8
 8005862:	f7fa fff3 	bl	800084c <__aeabi_ddiv>
 8005866:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800586a:	e029      	b.n	80058c0 <_dtoa_r+0x3d8>
 800586c:	2502      	movs	r5, #2
 800586e:	e7f2      	b.n	8005856 <_dtoa_r+0x36e>
 8005870:	07f9      	lsls	r1, r7, #31
 8005872:	d508      	bpl.n	8005886 <_dtoa_r+0x39e>
 8005874:	ec51 0b18 	vmov	r0, r1, d8
 8005878:	e9d6 2300 	ldrd	r2, r3, [r6]
 800587c:	f7fa febc 	bl	80005f8 <__aeabi_dmul>
 8005880:	ec41 0b18 	vmov	d8, r0, r1
 8005884:	3501      	adds	r5, #1
 8005886:	107f      	asrs	r7, r7, #1
 8005888:	3608      	adds	r6, #8
 800588a:	e7e5      	b.n	8005858 <_dtoa_r+0x370>
 800588c:	f000 80a6 	beq.w	80059dc <_dtoa_r+0x4f4>
 8005890:	f1ca 0600 	rsb	r6, sl, #0
 8005894:	4ba5      	ldr	r3, [pc, #660]	; (8005b2c <_dtoa_r+0x644>)
 8005896:	4fa6      	ldr	r7, [pc, #664]	; (8005b30 <_dtoa_r+0x648>)
 8005898:	f006 020f 	and.w	r2, r6, #15
 800589c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80058a8:	f7fa fea6 	bl	80005f8 <__aeabi_dmul>
 80058ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058b0:	1136      	asrs	r6, r6, #4
 80058b2:	2300      	movs	r3, #0
 80058b4:	2502      	movs	r5, #2
 80058b6:	2e00      	cmp	r6, #0
 80058b8:	f040 8085 	bne.w	80059c6 <_dtoa_r+0x4de>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1d2      	bne.n	8005866 <_dtoa_r+0x37e>
 80058c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 808c 	beq.w	80059e0 <_dtoa_r+0x4f8>
 80058c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80058cc:	4b99      	ldr	r3, [pc, #612]	; (8005b34 <_dtoa_r+0x64c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	4630      	mov	r0, r6
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fb f902 	bl	8000adc <__aeabi_dcmplt>
 80058d8:	2800      	cmp	r0, #0
 80058da:	f000 8081 	beq.w	80059e0 <_dtoa_r+0x4f8>
 80058de:	9b01      	ldr	r3, [sp, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d07d      	beq.n	80059e0 <_dtoa_r+0x4f8>
 80058e4:	f1b9 0f00 	cmp.w	r9, #0
 80058e8:	dd3c      	ble.n	8005964 <_dtoa_r+0x47c>
 80058ea:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80058ee:	9307      	str	r3, [sp, #28]
 80058f0:	2200      	movs	r2, #0
 80058f2:	4b91      	ldr	r3, [pc, #580]	; (8005b38 <_dtoa_r+0x650>)
 80058f4:	4630      	mov	r0, r6
 80058f6:	4639      	mov	r1, r7
 80058f8:	f7fa fe7e 	bl	80005f8 <__aeabi_dmul>
 80058fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005900:	3501      	adds	r5, #1
 8005902:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005906:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800590a:	4628      	mov	r0, r5
 800590c:	f7fa fe0a 	bl	8000524 <__aeabi_i2d>
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	f7fa fe70 	bl	80005f8 <__aeabi_dmul>
 8005918:	4b88      	ldr	r3, [pc, #544]	; (8005b3c <_dtoa_r+0x654>)
 800591a:	2200      	movs	r2, #0
 800591c:	f7fa fcb6 	bl	800028c <__adddf3>
 8005920:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005928:	9303      	str	r3, [sp, #12]
 800592a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800592c:	2b00      	cmp	r3, #0
 800592e:	d15c      	bne.n	80059ea <_dtoa_r+0x502>
 8005930:	4b83      	ldr	r3, [pc, #524]	; (8005b40 <_dtoa_r+0x658>)
 8005932:	2200      	movs	r2, #0
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	f7fa fca6 	bl	8000288 <__aeabi_dsub>
 800593c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005940:	4606      	mov	r6, r0
 8005942:	460f      	mov	r7, r1
 8005944:	f7fb f8e8 	bl	8000b18 <__aeabi_dcmpgt>
 8005948:	2800      	cmp	r0, #0
 800594a:	f040 8296 	bne.w	8005e7a <_dtoa_r+0x992>
 800594e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005952:	4630      	mov	r0, r6
 8005954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005958:	4639      	mov	r1, r7
 800595a:	f7fb f8bf 	bl	8000adc <__aeabi_dcmplt>
 800595e:	2800      	cmp	r0, #0
 8005960:	f040 8288 	bne.w	8005e74 <_dtoa_r+0x98c>
 8005964:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005968:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800596c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800596e:	2b00      	cmp	r3, #0
 8005970:	f2c0 8158 	blt.w	8005c24 <_dtoa_r+0x73c>
 8005974:	f1ba 0f0e 	cmp.w	sl, #14
 8005978:	f300 8154 	bgt.w	8005c24 <_dtoa_r+0x73c>
 800597c:	4b6b      	ldr	r3, [pc, #428]	; (8005b2c <_dtoa_r+0x644>)
 800597e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005982:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005988:	2b00      	cmp	r3, #0
 800598a:	f280 80e3 	bge.w	8005b54 <_dtoa_r+0x66c>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f300 80df 	bgt.w	8005b54 <_dtoa_r+0x66c>
 8005996:	f040 826d 	bne.w	8005e74 <_dtoa_r+0x98c>
 800599a:	4b69      	ldr	r3, [pc, #420]	; (8005b40 <_dtoa_r+0x658>)
 800599c:	2200      	movs	r2, #0
 800599e:	4640      	mov	r0, r8
 80059a0:	4649      	mov	r1, r9
 80059a2:	f7fa fe29 	bl	80005f8 <__aeabi_dmul>
 80059a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059aa:	f7fb f8ab 	bl	8000b04 <__aeabi_dcmpge>
 80059ae:	9e01      	ldr	r6, [sp, #4]
 80059b0:	4637      	mov	r7, r6
 80059b2:	2800      	cmp	r0, #0
 80059b4:	f040 8243 	bne.w	8005e3e <_dtoa_r+0x956>
 80059b8:	9d00      	ldr	r5, [sp, #0]
 80059ba:	2331      	movs	r3, #49	; 0x31
 80059bc:	f805 3b01 	strb.w	r3, [r5], #1
 80059c0:	f10a 0a01 	add.w	sl, sl, #1
 80059c4:	e23f      	b.n	8005e46 <_dtoa_r+0x95e>
 80059c6:	07f2      	lsls	r2, r6, #31
 80059c8:	d505      	bpl.n	80059d6 <_dtoa_r+0x4ee>
 80059ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059ce:	f7fa fe13 	bl	80005f8 <__aeabi_dmul>
 80059d2:	3501      	adds	r5, #1
 80059d4:	2301      	movs	r3, #1
 80059d6:	1076      	asrs	r6, r6, #1
 80059d8:	3708      	adds	r7, #8
 80059da:	e76c      	b.n	80058b6 <_dtoa_r+0x3ce>
 80059dc:	2502      	movs	r5, #2
 80059de:	e76f      	b.n	80058c0 <_dtoa_r+0x3d8>
 80059e0:	9b01      	ldr	r3, [sp, #4]
 80059e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80059e6:	930c      	str	r3, [sp, #48]	; 0x30
 80059e8:	e78d      	b.n	8005906 <_dtoa_r+0x41e>
 80059ea:	9900      	ldr	r1, [sp, #0]
 80059ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80059ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f0:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <_dtoa_r+0x644>)
 80059f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059f6:	4401      	add	r1, r0
 80059f8:	9102      	str	r1, [sp, #8]
 80059fa:	9908      	ldr	r1, [sp, #32]
 80059fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005a00:	eef0 8a67 	vmov.f32	s17, s15
 8005a04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005a0c:	2900      	cmp	r1, #0
 8005a0e:	d045      	beq.n	8005a9c <_dtoa_r+0x5b4>
 8005a10:	494c      	ldr	r1, [pc, #304]	; (8005b44 <_dtoa_r+0x65c>)
 8005a12:	2000      	movs	r0, #0
 8005a14:	f7fa ff1a 	bl	800084c <__aeabi_ddiv>
 8005a18:	ec53 2b18 	vmov	r2, r3, d8
 8005a1c:	f7fa fc34 	bl	8000288 <__aeabi_dsub>
 8005a20:	9d00      	ldr	r5, [sp, #0]
 8005a22:	ec41 0b18 	vmov	d8, r0, r1
 8005a26:	4639      	mov	r1, r7
 8005a28:	4630      	mov	r0, r6
 8005a2a:	f7fb f895 	bl	8000b58 <__aeabi_d2iz>
 8005a2e:	900c      	str	r0, [sp, #48]	; 0x30
 8005a30:	f7fa fd78 	bl	8000524 <__aeabi_i2d>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4630      	mov	r0, r6
 8005a3a:	4639      	mov	r1, r7
 8005a3c:	f7fa fc24 	bl	8000288 <__aeabi_dsub>
 8005a40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a42:	3330      	adds	r3, #48	; 0x30
 8005a44:	f805 3b01 	strb.w	r3, [r5], #1
 8005a48:	ec53 2b18 	vmov	r2, r3, d8
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
 8005a50:	f7fb f844 	bl	8000adc <__aeabi_dcmplt>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d165      	bne.n	8005b24 <_dtoa_r+0x63c>
 8005a58:	4632      	mov	r2, r6
 8005a5a:	463b      	mov	r3, r7
 8005a5c:	4935      	ldr	r1, [pc, #212]	; (8005b34 <_dtoa_r+0x64c>)
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7fa fc12 	bl	8000288 <__aeabi_dsub>
 8005a64:	ec53 2b18 	vmov	r2, r3, d8
 8005a68:	f7fb f838 	bl	8000adc <__aeabi_dcmplt>
 8005a6c:	2800      	cmp	r0, #0
 8005a6e:	f040 80b9 	bne.w	8005be4 <_dtoa_r+0x6fc>
 8005a72:	9b02      	ldr	r3, [sp, #8]
 8005a74:	429d      	cmp	r5, r3
 8005a76:	f43f af75 	beq.w	8005964 <_dtoa_r+0x47c>
 8005a7a:	4b2f      	ldr	r3, [pc, #188]	; (8005b38 <_dtoa_r+0x650>)
 8005a7c:	ec51 0b18 	vmov	r0, r1, d8
 8005a80:	2200      	movs	r2, #0
 8005a82:	f7fa fdb9 	bl	80005f8 <__aeabi_dmul>
 8005a86:	4b2c      	ldr	r3, [pc, #176]	; (8005b38 <_dtoa_r+0x650>)
 8005a88:	ec41 0b18 	vmov	d8, r0, r1
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4630      	mov	r0, r6
 8005a90:	4639      	mov	r1, r7
 8005a92:	f7fa fdb1 	bl	80005f8 <__aeabi_dmul>
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	e7c4      	b.n	8005a26 <_dtoa_r+0x53e>
 8005a9c:	ec51 0b17 	vmov	r0, r1, d7
 8005aa0:	f7fa fdaa 	bl	80005f8 <__aeabi_dmul>
 8005aa4:	9b02      	ldr	r3, [sp, #8]
 8005aa6:	9d00      	ldr	r5, [sp, #0]
 8005aa8:	930c      	str	r3, [sp, #48]	; 0x30
 8005aaa:	ec41 0b18 	vmov	d8, r0, r1
 8005aae:	4639      	mov	r1, r7
 8005ab0:	4630      	mov	r0, r6
 8005ab2:	f7fb f851 	bl	8000b58 <__aeabi_d2iz>
 8005ab6:	9011      	str	r0, [sp, #68]	; 0x44
 8005ab8:	f7fa fd34 	bl	8000524 <__aeabi_i2d>
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4630      	mov	r0, r6
 8005ac2:	4639      	mov	r1, r7
 8005ac4:	f7fa fbe0 	bl	8000288 <__aeabi_dsub>
 8005ac8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aca:	3330      	adds	r3, #48	; 0x30
 8005acc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ad0:	9b02      	ldr	r3, [sp, #8]
 8005ad2:	429d      	cmp	r5, r3
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	460f      	mov	r7, r1
 8005ad8:	f04f 0200 	mov.w	r2, #0
 8005adc:	d134      	bne.n	8005b48 <_dtoa_r+0x660>
 8005ade:	4b19      	ldr	r3, [pc, #100]	; (8005b44 <_dtoa_r+0x65c>)
 8005ae0:	ec51 0b18 	vmov	r0, r1, d8
 8005ae4:	f7fa fbd2 	bl	800028c <__adddf3>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4630      	mov	r0, r6
 8005aee:	4639      	mov	r1, r7
 8005af0:	f7fb f812 	bl	8000b18 <__aeabi_dcmpgt>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d175      	bne.n	8005be4 <_dtoa_r+0x6fc>
 8005af8:	ec53 2b18 	vmov	r2, r3, d8
 8005afc:	4911      	ldr	r1, [pc, #68]	; (8005b44 <_dtoa_r+0x65c>)
 8005afe:	2000      	movs	r0, #0
 8005b00:	f7fa fbc2 	bl	8000288 <__aeabi_dsub>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4630      	mov	r0, r6
 8005b0a:	4639      	mov	r1, r7
 8005b0c:	f7fa ffe6 	bl	8000adc <__aeabi_dcmplt>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	f43f af27 	beq.w	8005964 <_dtoa_r+0x47c>
 8005b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005b18:	1e6b      	subs	r3, r5, #1
 8005b1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005b1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b20:	2b30      	cmp	r3, #48	; 0x30
 8005b22:	d0f8      	beq.n	8005b16 <_dtoa_r+0x62e>
 8005b24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005b28:	e04a      	b.n	8005bc0 <_dtoa_r+0x6d8>
 8005b2a:	bf00      	nop
 8005b2c:	08008b08 	.word	0x08008b08
 8005b30:	08008ae0 	.word	0x08008ae0
 8005b34:	3ff00000 	.word	0x3ff00000
 8005b38:	40240000 	.word	0x40240000
 8005b3c:	401c0000 	.word	0x401c0000
 8005b40:	40140000 	.word	0x40140000
 8005b44:	3fe00000 	.word	0x3fe00000
 8005b48:	4baf      	ldr	r3, [pc, #700]	; (8005e08 <_dtoa_r+0x920>)
 8005b4a:	f7fa fd55 	bl	80005f8 <__aeabi_dmul>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	460f      	mov	r7, r1
 8005b52:	e7ac      	b.n	8005aae <_dtoa_r+0x5c6>
 8005b54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005b58:	9d00      	ldr	r5, [sp, #0]
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	464b      	mov	r3, r9
 8005b5e:	4630      	mov	r0, r6
 8005b60:	4639      	mov	r1, r7
 8005b62:	f7fa fe73 	bl	800084c <__aeabi_ddiv>
 8005b66:	f7fa fff7 	bl	8000b58 <__aeabi_d2iz>
 8005b6a:	9002      	str	r0, [sp, #8]
 8005b6c:	f7fa fcda 	bl	8000524 <__aeabi_i2d>
 8005b70:	4642      	mov	r2, r8
 8005b72:	464b      	mov	r3, r9
 8005b74:	f7fa fd40 	bl	80005f8 <__aeabi_dmul>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa fb82 	bl	8000288 <__aeabi_dsub>
 8005b84:	9e02      	ldr	r6, [sp, #8]
 8005b86:	9f01      	ldr	r7, [sp, #4]
 8005b88:	3630      	adds	r6, #48	; 0x30
 8005b8a:	f805 6b01 	strb.w	r6, [r5], #1
 8005b8e:	9e00      	ldr	r6, [sp, #0]
 8005b90:	1bae      	subs	r6, r5, r6
 8005b92:	42b7      	cmp	r7, r6
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	d137      	bne.n	8005c0a <_dtoa_r+0x722>
 8005b9a:	f7fa fb77 	bl	800028c <__adddf3>
 8005b9e:	4642      	mov	r2, r8
 8005ba0:	464b      	mov	r3, r9
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	460f      	mov	r7, r1
 8005ba6:	f7fa ffb7 	bl	8000b18 <__aeabi_dcmpgt>
 8005baa:	b9c8      	cbnz	r0, 8005be0 <_dtoa_r+0x6f8>
 8005bac:	4642      	mov	r2, r8
 8005bae:	464b      	mov	r3, r9
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	4639      	mov	r1, r7
 8005bb4:	f7fa ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bb8:	b110      	cbz	r0, 8005bc0 <_dtoa_r+0x6d8>
 8005bba:	9b02      	ldr	r3, [sp, #8]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	d40f      	bmi.n	8005be0 <_dtoa_r+0x6f8>
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	f000 fe58 	bl	8006878 <_Bfree>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	702b      	strb	r3, [r5, #0]
 8005bcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005bce:	f10a 0001 	add.w	r0, sl, #1
 8005bd2:	6018      	str	r0, [r3, #0]
 8005bd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f43f acd8 	beq.w	800558c <_dtoa_r+0xa4>
 8005bdc:	601d      	str	r5, [r3, #0]
 8005bde:	e4d5      	b.n	800558c <_dtoa_r+0xa4>
 8005be0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005be4:	462b      	mov	r3, r5
 8005be6:	461d      	mov	r5, r3
 8005be8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005bec:	2a39      	cmp	r2, #57	; 0x39
 8005bee:	d108      	bne.n	8005c02 <_dtoa_r+0x71a>
 8005bf0:	9a00      	ldr	r2, [sp, #0]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d1f7      	bne.n	8005be6 <_dtoa_r+0x6fe>
 8005bf6:	9a07      	ldr	r2, [sp, #28]
 8005bf8:	9900      	ldr	r1, [sp, #0]
 8005bfa:	3201      	adds	r2, #1
 8005bfc:	9207      	str	r2, [sp, #28]
 8005bfe:	2230      	movs	r2, #48	; 0x30
 8005c00:	700a      	strb	r2, [r1, #0]
 8005c02:	781a      	ldrb	r2, [r3, #0]
 8005c04:	3201      	adds	r2, #1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	e78c      	b.n	8005b24 <_dtoa_r+0x63c>
 8005c0a:	4b7f      	ldr	r3, [pc, #508]	; (8005e08 <_dtoa_r+0x920>)
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f7fa fcf3 	bl	80005f8 <__aeabi_dmul>
 8005c12:	2200      	movs	r2, #0
 8005c14:	2300      	movs	r3, #0
 8005c16:	4606      	mov	r6, r0
 8005c18:	460f      	mov	r7, r1
 8005c1a:	f7fa ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	d09b      	beq.n	8005b5a <_dtoa_r+0x672>
 8005c22:	e7cd      	b.n	8005bc0 <_dtoa_r+0x6d8>
 8005c24:	9a08      	ldr	r2, [sp, #32]
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	f000 80c4 	beq.w	8005db4 <_dtoa_r+0x8cc>
 8005c2c:	9a05      	ldr	r2, [sp, #20]
 8005c2e:	2a01      	cmp	r2, #1
 8005c30:	f300 80a8 	bgt.w	8005d84 <_dtoa_r+0x89c>
 8005c34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005c36:	2a00      	cmp	r2, #0
 8005c38:	f000 80a0 	beq.w	8005d7c <_dtoa_r+0x894>
 8005c3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005c40:	9e06      	ldr	r6, [sp, #24]
 8005c42:	4645      	mov	r5, r8
 8005c44:	9a04      	ldr	r2, [sp, #16]
 8005c46:	2101      	movs	r1, #1
 8005c48:	441a      	add	r2, r3
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	4498      	add	r8, r3
 8005c4e:	9204      	str	r2, [sp, #16]
 8005c50:	f000 ff18 	bl	8006a84 <__i2b>
 8005c54:	4607      	mov	r7, r0
 8005c56:	2d00      	cmp	r5, #0
 8005c58:	dd0b      	ble.n	8005c72 <_dtoa_r+0x78a>
 8005c5a:	9b04      	ldr	r3, [sp, #16]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dd08      	ble.n	8005c72 <_dtoa_r+0x78a>
 8005c60:	42ab      	cmp	r3, r5
 8005c62:	9a04      	ldr	r2, [sp, #16]
 8005c64:	bfa8      	it	ge
 8005c66:	462b      	movge	r3, r5
 8005c68:	eba8 0803 	sub.w	r8, r8, r3
 8005c6c:	1aed      	subs	r5, r5, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	9304      	str	r3, [sp, #16]
 8005c72:	9b06      	ldr	r3, [sp, #24]
 8005c74:	b1fb      	cbz	r3, 8005cb6 <_dtoa_r+0x7ce>
 8005c76:	9b08      	ldr	r3, [sp, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	f000 809f 	beq.w	8005dbc <_dtoa_r+0x8d4>
 8005c7e:	2e00      	cmp	r6, #0
 8005c80:	dd11      	ble.n	8005ca6 <_dtoa_r+0x7be>
 8005c82:	4639      	mov	r1, r7
 8005c84:	4632      	mov	r2, r6
 8005c86:	4620      	mov	r0, r4
 8005c88:	f000 ffb8 	bl	8006bfc <__pow5mult>
 8005c8c:	465a      	mov	r2, fp
 8005c8e:	4601      	mov	r1, r0
 8005c90:	4607      	mov	r7, r0
 8005c92:	4620      	mov	r0, r4
 8005c94:	f000 ff0c 	bl	8006ab0 <__multiply>
 8005c98:	4659      	mov	r1, fp
 8005c9a:	9007      	str	r0, [sp, #28]
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 fdeb 	bl	8006878 <_Bfree>
 8005ca2:	9b07      	ldr	r3, [sp, #28]
 8005ca4:	469b      	mov	fp, r3
 8005ca6:	9b06      	ldr	r3, [sp, #24]
 8005ca8:	1b9a      	subs	r2, r3, r6
 8005caa:	d004      	beq.n	8005cb6 <_dtoa_r+0x7ce>
 8005cac:	4659      	mov	r1, fp
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 ffa4 	bl	8006bfc <__pow5mult>
 8005cb4:	4683      	mov	fp, r0
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fee3 	bl	8006a84 <__i2b>
 8005cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	4606      	mov	r6, r0
 8005cc4:	dd7c      	ble.n	8005dc0 <_dtoa_r+0x8d8>
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	4601      	mov	r1, r0
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 ff96 	bl	8006bfc <__pow5mult>
 8005cd0:	9b05      	ldr	r3, [sp, #20]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	dd76      	ble.n	8005dc6 <_dtoa_r+0x8de>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	9306      	str	r3, [sp, #24]
 8005cdc:	6933      	ldr	r3, [r6, #16]
 8005cde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ce2:	6918      	ldr	r0, [r3, #16]
 8005ce4:	f000 fe7e 	bl	80069e4 <__hi0bits>
 8005ce8:	f1c0 0020 	rsb	r0, r0, #32
 8005cec:	9b04      	ldr	r3, [sp, #16]
 8005cee:	4418      	add	r0, r3
 8005cf0:	f010 001f 	ands.w	r0, r0, #31
 8005cf4:	f000 8086 	beq.w	8005e04 <_dtoa_r+0x91c>
 8005cf8:	f1c0 0320 	rsb	r3, r0, #32
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	dd7f      	ble.n	8005e00 <_dtoa_r+0x918>
 8005d00:	f1c0 001c 	rsb	r0, r0, #28
 8005d04:	9b04      	ldr	r3, [sp, #16]
 8005d06:	4403      	add	r3, r0
 8005d08:	4480      	add	r8, r0
 8005d0a:	4405      	add	r5, r0
 8005d0c:	9304      	str	r3, [sp, #16]
 8005d0e:	f1b8 0f00 	cmp.w	r8, #0
 8005d12:	dd05      	ble.n	8005d20 <_dtoa_r+0x838>
 8005d14:	4659      	mov	r1, fp
 8005d16:	4642      	mov	r2, r8
 8005d18:	4620      	mov	r0, r4
 8005d1a:	f000 ffc9 	bl	8006cb0 <__lshift>
 8005d1e:	4683      	mov	fp, r0
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	dd05      	ble.n	8005d32 <_dtoa_r+0x84a>
 8005d26:	4631      	mov	r1, r6
 8005d28:	461a      	mov	r2, r3
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f000 ffc0 	bl	8006cb0 <__lshift>
 8005d30:	4606      	mov	r6, r0
 8005d32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d069      	beq.n	8005e0c <_dtoa_r+0x924>
 8005d38:	4631      	mov	r1, r6
 8005d3a:	4658      	mov	r0, fp
 8005d3c:	f001 f824 	bl	8006d88 <__mcmp>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	da63      	bge.n	8005e0c <_dtoa_r+0x924>
 8005d44:	2300      	movs	r3, #0
 8005d46:	4659      	mov	r1, fp
 8005d48:	220a      	movs	r2, #10
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 fdb6 	bl	80068bc <__multadd>
 8005d50:	9b08      	ldr	r3, [sp, #32]
 8005d52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005d56:	4683      	mov	fp, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 818f 	beq.w	800607c <_dtoa_r+0xb94>
 8005d5e:	4639      	mov	r1, r7
 8005d60:	2300      	movs	r3, #0
 8005d62:	220a      	movs	r2, #10
 8005d64:	4620      	mov	r0, r4
 8005d66:	f000 fda9 	bl	80068bc <__multadd>
 8005d6a:	f1b9 0f00 	cmp.w	r9, #0
 8005d6e:	4607      	mov	r7, r0
 8005d70:	f300 808e 	bgt.w	8005e90 <_dtoa_r+0x9a8>
 8005d74:	9b05      	ldr	r3, [sp, #20]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	dc50      	bgt.n	8005e1c <_dtoa_r+0x934>
 8005d7a:	e089      	b.n	8005e90 <_dtoa_r+0x9a8>
 8005d7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005d82:	e75d      	b.n	8005c40 <_dtoa_r+0x758>
 8005d84:	9b01      	ldr	r3, [sp, #4]
 8005d86:	1e5e      	subs	r6, r3, #1
 8005d88:	9b06      	ldr	r3, [sp, #24]
 8005d8a:	42b3      	cmp	r3, r6
 8005d8c:	bfbf      	itttt	lt
 8005d8e:	9b06      	ldrlt	r3, [sp, #24]
 8005d90:	9606      	strlt	r6, [sp, #24]
 8005d92:	1af2      	sublt	r2, r6, r3
 8005d94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005d96:	bfb6      	itet	lt
 8005d98:	189b      	addlt	r3, r3, r2
 8005d9a:	1b9e      	subge	r6, r3, r6
 8005d9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005d9e:	9b01      	ldr	r3, [sp, #4]
 8005da0:	bfb8      	it	lt
 8005da2:	2600      	movlt	r6, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bfb5      	itete	lt
 8005da8:	eba8 0503 	sublt.w	r5, r8, r3
 8005dac:	9b01      	ldrge	r3, [sp, #4]
 8005dae:	2300      	movlt	r3, #0
 8005db0:	4645      	movge	r5, r8
 8005db2:	e747      	b.n	8005c44 <_dtoa_r+0x75c>
 8005db4:	9e06      	ldr	r6, [sp, #24]
 8005db6:	9f08      	ldr	r7, [sp, #32]
 8005db8:	4645      	mov	r5, r8
 8005dba:	e74c      	b.n	8005c56 <_dtoa_r+0x76e>
 8005dbc:	9a06      	ldr	r2, [sp, #24]
 8005dbe:	e775      	b.n	8005cac <_dtoa_r+0x7c4>
 8005dc0:	9b05      	ldr	r3, [sp, #20]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	dc18      	bgt.n	8005df8 <_dtoa_r+0x910>
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	b9b3      	cbnz	r3, 8005df8 <_dtoa_r+0x910>
 8005dca:	9b03      	ldr	r3, [sp, #12]
 8005dcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dd0:	b9a3      	cbnz	r3, 8005dfc <_dtoa_r+0x914>
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dd8:	0d1b      	lsrs	r3, r3, #20
 8005dda:	051b      	lsls	r3, r3, #20
 8005ddc:	b12b      	cbz	r3, 8005dea <_dtoa_r+0x902>
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	3301      	adds	r3, #1
 8005de2:	9304      	str	r3, [sp, #16]
 8005de4:	f108 0801 	add.w	r8, r8, #1
 8005de8:	2301      	movs	r3, #1
 8005dea:	9306      	str	r3, [sp, #24]
 8005dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f af74 	bne.w	8005cdc <_dtoa_r+0x7f4>
 8005df4:	2001      	movs	r0, #1
 8005df6:	e779      	b.n	8005cec <_dtoa_r+0x804>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	e7f6      	b.n	8005dea <_dtoa_r+0x902>
 8005dfc:	9b02      	ldr	r3, [sp, #8]
 8005dfe:	e7f4      	b.n	8005dea <_dtoa_r+0x902>
 8005e00:	d085      	beq.n	8005d0e <_dtoa_r+0x826>
 8005e02:	4618      	mov	r0, r3
 8005e04:	301c      	adds	r0, #28
 8005e06:	e77d      	b.n	8005d04 <_dtoa_r+0x81c>
 8005e08:	40240000 	.word	0x40240000
 8005e0c:	9b01      	ldr	r3, [sp, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dc38      	bgt.n	8005e84 <_dtoa_r+0x99c>
 8005e12:	9b05      	ldr	r3, [sp, #20]
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	dd35      	ble.n	8005e84 <_dtoa_r+0x99c>
 8005e18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e1c:	f1b9 0f00 	cmp.w	r9, #0
 8005e20:	d10d      	bne.n	8005e3e <_dtoa_r+0x956>
 8005e22:	4631      	mov	r1, r6
 8005e24:	464b      	mov	r3, r9
 8005e26:	2205      	movs	r2, #5
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f000 fd47 	bl	80068bc <__multadd>
 8005e2e:	4601      	mov	r1, r0
 8005e30:	4606      	mov	r6, r0
 8005e32:	4658      	mov	r0, fp
 8005e34:	f000 ffa8 	bl	8006d88 <__mcmp>
 8005e38:	2800      	cmp	r0, #0
 8005e3a:	f73f adbd 	bgt.w	80059b8 <_dtoa_r+0x4d0>
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	9d00      	ldr	r5, [sp, #0]
 8005e42:	ea6f 0a03 	mvn.w	sl, r3
 8005e46:	f04f 0800 	mov.w	r8, #0
 8005e4a:	4631      	mov	r1, r6
 8005e4c:	4620      	mov	r0, r4
 8005e4e:	f000 fd13 	bl	8006878 <_Bfree>
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	f43f aeb4 	beq.w	8005bc0 <_dtoa_r+0x6d8>
 8005e58:	f1b8 0f00 	cmp.w	r8, #0
 8005e5c:	d005      	beq.n	8005e6a <_dtoa_r+0x982>
 8005e5e:	45b8      	cmp	r8, r7
 8005e60:	d003      	beq.n	8005e6a <_dtoa_r+0x982>
 8005e62:	4641      	mov	r1, r8
 8005e64:	4620      	mov	r0, r4
 8005e66:	f000 fd07 	bl	8006878 <_Bfree>
 8005e6a:	4639      	mov	r1, r7
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f000 fd03 	bl	8006878 <_Bfree>
 8005e72:	e6a5      	b.n	8005bc0 <_dtoa_r+0x6d8>
 8005e74:	2600      	movs	r6, #0
 8005e76:	4637      	mov	r7, r6
 8005e78:	e7e1      	b.n	8005e3e <_dtoa_r+0x956>
 8005e7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005e7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e80:	4637      	mov	r7, r6
 8005e82:	e599      	b.n	80059b8 <_dtoa_r+0x4d0>
 8005e84:	9b08      	ldr	r3, [sp, #32]
 8005e86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 80fd 	beq.w	800608a <_dtoa_r+0xba2>
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	dd05      	ble.n	8005ea0 <_dtoa_r+0x9b8>
 8005e94:	4639      	mov	r1, r7
 8005e96:	462a      	mov	r2, r5
 8005e98:	4620      	mov	r0, r4
 8005e9a:	f000 ff09 	bl	8006cb0 <__lshift>
 8005e9e:	4607      	mov	r7, r0
 8005ea0:	9b06      	ldr	r3, [sp, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d05c      	beq.n	8005f60 <_dtoa_r+0xa78>
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f000 fca5 	bl	80067f8 <_Balloc>
 8005eae:	4605      	mov	r5, r0
 8005eb0:	b928      	cbnz	r0, 8005ebe <_dtoa_r+0x9d6>
 8005eb2:	4b80      	ldr	r3, [pc, #512]	; (80060b4 <_dtoa_r+0xbcc>)
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005eba:	f7ff bb2e 	b.w	800551a <_dtoa_r+0x32>
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	3202      	adds	r2, #2
 8005ec2:	0092      	lsls	r2, r2, #2
 8005ec4:	f107 010c 	add.w	r1, r7, #12
 8005ec8:	300c      	adds	r0, #12
 8005eca:	f000 fc87 	bl	80067dc <memcpy>
 8005ece:	2201      	movs	r2, #1
 8005ed0:	4629      	mov	r1, r5
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	f000 feec 	bl	8006cb0 <__lshift>
 8005ed8:	9b00      	ldr	r3, [sp, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	9301      	str	r3, [sp, #4]
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	444b      	add	r3, r9
 8005ee2:	9307      	str	r3, [sp, #28]
 8005ee4:	9b02      	ldr	r3, [sp, #8]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	46b8      	mov	r8, r7
 8005eec:	9306      	str	r3, [sp, #24]
 8005eee:	4607      	mov	r7, r0
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	9302      	str	r3, [sp, #8]
 8005efa:	f7ff fa67 	bl	80053cc <quorem>
 8005efe:	4603      	mov	r3, r0
 8005f00:	3330      	adds	r3, #48	; 0x30
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	4641      	mov	r1, r8
 8005f06:	4658      	mov	r0, fp
 8005f08:	9308      	str	r3, [sp, #32]
 8005f0a:	f000 ff3d 	bl	8006d88 <__mcmp>
 8005f0e:	463a      	mov	r2, r7
 8005f10:	4681      	mov	r9, r0
 8005f12:	4631      	mov	r1, r6
 8005f14:	4620      	mov	r0, r4
 8005f16:	f000 ff53 	bl	8006dc0 <__mdiff>
 8005f1a:	68c2      	ldr	r2, [r0, #12]
 8005f1c:	9b08      	ldr	r3, [sp, #32]
 8005f1e:	4605      	mov	r5, r0
 8005f20:	bb02      	cbnz	r2, 8005f64 <_dtoa_r+0xa7c>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4658      	mov	r0, fp
 8005f26:	f000 ff2f 	bl	8006d88 <__mcmp>
 8005f2a:	9b08      	ldr	r3, [sp, #32]
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	4629      	mov	r1, r5
 8005f30:	4620      	mov	r0, r4
 8005f32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005f36:	f000 fc9f 	bl	8006878 <_Bfree>
 8005f3a:	9b05      	ldr	r3, [sp, #20]
 8005f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f3e:	9d01      	ldr	r5, [sp, #4]
 8005f40:	ea43 0102 	orr.w	r1, r3, r2
 8005f44:	9b06      	ldr	r3, [sp, #24]
 8005f46:	430b      	orrs	r3, r1
 8005f48:	9b08      	ldr	r3, [sp, #32]
 8005f4a:	d10d      	bne.n	8005f68 <_dtoa_r+0xa80>
 8005f4c:	2b39      	cmp	r3, #57	; 0x39
 8005f4e:	d029      	beq.n	8005fa4 <_dtoa_r+0xabc>
 8005f50:	f1b9 0f00 	cmp.w	r9, #0
 8005f54:	dd01      	ble.n	8005f5a <_dtoa_r+0xa72>
 8005f56:	9b04      	ldr	r3, [sp, #16]
 8005f58:	3331      	adds	r3, #49	; 0x31
 8005f5a:	9a02      	ldr	r2, [sp, #8]
 8005f5c:	7013      	strb	r3, [r2, #0]
 8005f5e:	e774      	b.n	8005e4a <_dtoa_r+0x962>
 8005f60:	4638      	mov	r0, r7
 8005f62:	e7b9      	b.n	8005ed8 <_dtoa_r+0x9f0>
 8005f64:	2201      	movs	r2, #1
 8005f66:	e7e2      	b.n	8005f2e <_dtoa_r+0xa46>
 8005f68:	f1b9 0f00 	cmp.w	r9, #0
 8005f6c:	db06      	blt.n	8005f7c <_dtoa_r+0xa94>
 8005f6e:	9905      	ldr	r1, [sp, #20]
 8005f70:	ea41 0909 	orr.w	r9, r1, r9
 8005f74:	9906      	ldr	r1, [sp, #24]
 8005f76:	ea59 0101 	orrs.w	r1, r9, r1
 8005f7a:	d120      	bne.n	8005fbe <_dtoa_r+0xad6>
 8005f7c:	2a00      	cmp	r2, #0
 8005f7e:	ddec      	ble.n	8005f5a <_dtoa_r+0xa72>
 8005f80:	4659      	mov	r1, fp
 8005f82:	2201      	movs	r2, #1
 8005f84:	4620      	mov	r0, r4
 8005f86:	9301      	str	r3, [sp, #4]
 8005f88:	f000 fe92 	bl	8006cb0 <__lshift>
 8005f8c:	4631      	mov	r1, r6
 8005f8e:	4683      	mov	fp, r0
 8005f90:	f000 fefa 	bl	8006d88 <__mcmp>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	9b01      	ldr	r3, [sp, #4]
 8005f98:	dc02      	bgt.n	8005fa0 <_dtoa_r+0xab8>
 8005f9a:	d1de      	bne.n	8005f5a <_dtoa_r+0xa72>
 8005f9c:	07da      	lsls	r2, r3, #31
 8005f9e:	d5dc      	bpl.n	8005f5a <_dtoa_r+0xa72>
 8005fa0:	2b39      	cmp	r3, #57	; 0x39
 8005fa2:	d1d8      	bne.n	8005f56 <_dtoa_r+0xa6e>
 8005fa4:	9a02      	ldr	r2, [sp, #8]
 8005fa6:	2339      	movs	r3, #57	; 0x39
 8005fa8:	7013      	strb	r3, [r2, #0]
 8005faa:	462b      	mov	r3, r5
 8005fac:	461d      	mov	r5, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005fb4:	2a39      	cmp	r2, #57	; 0x39
 8005fb6:	d050      	beq.n	800605a <_dtoa_r+0xb72>
 8005fb8:	3201      	adds	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e745      	b.n	8005e4a <_dtoa_r+0x962>
 8005fbe:	2a00      	cmp	r2, #0
 8005fc0:	dd03      	ble.n	8005fca <_dtoa_r+0xae2>
 8005fc2:	2b39      	cmp	r3, #57	; 0x39
 8005fc4:	d0ee      	beq.n	8005fa4 <_dtoa_r+0xabc>
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	e7c7      	b.n	8005f5a <_dtoa_r+0xa72>
 8005fca:	9a01      	ldr	r2, [sp, #4]
 8005fcc:	9907      	ldr	r1, [sp, #28]
 8005fce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005fd2:	428a      	cmp	r2, r1
 8005fd4:	d02a      	beq.n	800602c <_dtoa_r+0xb44>
 8005fd6:	4659      	mov	r1, fp
 8005fd8:	2300      	movs	r3, #0
 8005fda:	220a      	movs	r2, #10
 8005fdc:	4620      	mov	r0, r4
 8005fde:	f000 fc6d 	bl	80068bc <__multadd>
 8005fe2:	45b8      	cmp	r8, r7
 8005fe4:	4683      	mov	fp, r0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	f04f 020a 	mov.w	r2, #10
 8005fee:	4641      	mov	r1, r8
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	d107      	bne.n	8006004 <_dtoa_r+0xb1c>
 8005ff4:	f000 fc62 	bl	80068bc <__multadd>
 8005ff8:	4680      	mov	r8, r0
 8005ffa:	4607      	mov	r7, r0
 8005ffc:	9b01      	ldr	r3, [sp, #4]
 8005ffe:	3301      	adds	r3, #1
 8006000:	9301      	str	r3, [sp, #4]
 8006002:	e775      	b.n	8005ef0 <_dtoa_r+0xa08>
 8006004:	f000 fc5a 	bl	80068bc <__multadd>
 8006008:	4639      	mov	r1, r7
 800600a:	4680      	mov	r8, r0
 800600c:	2300      	movs	r3, #0
 800600e:	220a      	movs	r2, #10
 8006010:	4620      	mov	r0, r4
 8006012:	f000 fc53 	bl	80068bc <__multadd>
 8006016:	4607      	mov	r7, r0
 8006018:	e7f0      	b.n	8005ffc <_dtoa_r+0xb14>
 800601a:	f1b9 0f00 	cmp.w	r9, #0
 800601e:	9a00      	ldr	r2, [sp, #0]
 8006020:	bfcc      	ite	gt
 8006022:	464d      	movgt	r5, r9
 8006024:	2501      	movle	r5, #1
 8006026:	4415      	add	r5, r2
 8006028:	f04f 0800 	mov.w	r8, #0
 800602c:	4659      	mov	r1, fp
 800602e:	2201      	movs	r2, #1
 8006030:	4620      	mov	r0, r4
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	f000 fe3c 	bl	8006cb0 <__lshift>
 8006038:	4631      	mov	r1, r6
 800603a:	4683      	mov	fp, r0
 800603c:	f000 fea4 	bl	8006d88 <__mcmp>
 8006040:	2800      	cmp	r0, #0
 8006042:	dcb2      	bgt.n	8005faa <_dtoa_r+0xac2>
 8006044:	d102      	bne.n	800604c <_dtoa_r+0xb64>
 8006046:	9b01      	ldr	r3, [sp, #4]
 8006048:	07db      	lsls	r3, r3, #31
 800604a:	d4ae      	bmi.n	8005faa <_dtoa_r+0xac2>
 800604c:	462b      	mov	r3, r5
 800604e:	461d      	mov	r5, r3
 8006050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006054:	2a30      	cmp	r2, #48	; 0x30
 8006056:	d0fa      	beq.n	800604e <_dtoa_r+0xb66>
 8006058:	e6f7      	b.n	8005e4a <_dtoa_r+0x962>
 800605a:	9a00      	ldr	r2, [sp, #0]
 800605c:	429a      	cmp	r2, r3
 800605e:	d1a5      	bne.n	8005fac <_dtoa_r+0xac4>
 8006060:	f10a 0a01 	add.w	sl, sl, #1
 8006064:	2331      	movs	r3, #49	; 0x31
 8006066:	e779      	b.n	8005f5c <_dtoa_r+0xa74>
 8006068:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <_dtoa_r+0xbd0>)
 800606a:	f7ff baaf 	b.w	80055cc <_dtoa_r+0xe4>
 800606e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006070:	2b00      	cmp	r3, #0
 8006072:	f47f aa86 	bne.w	8005582 <_dtoa_r+0x9a>
 8006076:	4b11      	ldr	r3, [pc, #68]	; (80060bc <_dtoa_r+0xbd4>)
 8006078:	f7ff baa8 	b.w	80055cc <_dtoa_r+0xe4>
 800607c:	f1b9 0f00 	cmp.w	r9, #0
 8006080:	dc03      	bgt.n	800608a <_dtoa_r+0xba2>
 8006082:	9b05      	ldr	r3, [sp, #20]
 8006084:	2b02      	cmp	r3, #2
 8006086:	f73f aec9 	bgt.w	8005e1c <_dtoa_r+0x934>
 800608a:	9d00      	ldr	r5, [sp, #0]
 800608c:	4631      	mov	r1, r6
 800608e:	4658      	mov	r0, fp
 8006090:	f7ff f99c 	bl	80053cc <quorem>
 8006094:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006098:	f805 3b01 	strb.w	r3, [r5], #1
 800609c:	9a00      	ldr	r2, [sp, #0]
 800609e:	1aaa      	subs	r2, r5, r2
 80060a0:	4591      	cmp	r9, r2
 80060a2:	ddba      	ble.n	800601a <_dtoa_r+0xb32>
 80060a4:	4659      	mov	r1, fp
 80060a6:	2300      	movs	r3, #0
 80060a8:	220a      	movs	r2, #10
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 fc06 	bl	80068bc <__multadd>
 80060b0:	4683      	mov	fp, r0
 80060b2:	e7eb      	b.n	800608c <_dtoa_r+0xba4>
 80060b4:	080089ec 	.word	0x080089ec
 80060b8:	080087e8 	.word	0x080087e8
 80060bc:	08008969 	.word	0x08008969

080060c0 <rshift>:
 80060c0:	6903      	ldr	r3, [r0, #16]
 80060c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80060c6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 80060ce:	f100 0414 	add.w	r4, r0, #20
 80060d2:	dd45      	ble.n	8006160 <rshift+0xa0>
 80060d4:	f011 011f 	ands.w	r1, r1, #31
 80060d8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80060dc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80060e0:	d10c      	bne.n	80060fc <rshift+0x3c>
 80060e2:	f100 0710 	add.w	r7, r0, #16
 80060e6:	4629      	mov	r1, r5
 80060e8:	42b1      	cmp	r1, r6
 80060ea:	d334      	bcc.n	8006156 <rshift+0x96>
 80060ec:	1a9b      	subs	r3, r3, r2
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	1eea      	subs	r2, r5, #3
 80060f2:	4296      	cmp	r6, r2
 80060f4:	bf38      	it	cc
 80060f6:	2300      	movcc	r3, #0
 80060f8:	4423      	add	r3, r4
 80060fa:	e015      	b.n	8006128 <rshift+0x68>
 80060fc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006100:	f1c1 0820 	rsb	r8, r1, #32
 8006104:	40cf      	lsrs	r7, r1
 8006106:	f105 0e04 	add.w	lr, r5, #4
 800610a:	46a1      	mov	r9, r4
 800610c:	4576      	cmp	r6, lr
 800610e:	46f4      	mov	ip, lr
 8006110:	d815      	bhi.n	800613e <rshift+0x7e>
 8006112:	1a9b      	subs	r3, r3, r2
 8006114:	009a      	lsls	r2, r3, #2
 8006116:	3a04      	subs	r2, #4
 8006118:	3501      	adds	r5, #1
 800611a:	42ae      	cmp	r6, r5
 800611c:	bf38      	it	cc
 800611e:	2200      	movcc	r2, #0
 8006120:	18a3      	adds	r3, r4, r2
 8006122:	50a7      	str	r7, [r4, r2]
 8006124:	b107      	cbz	r7, 8006128 <rshift+0x68>
 8006126:	3304      	adds	r3, #4
 8006128:	1b1a      	subs	r2, r3, r4
 800612a:	42a3      	cmp	r3, r4
 800612c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006130:	bf08      	it	eq
 8006132:	2300      	moveq	r3, #0
 8006134:	6102      	str	r2, [r0, #16]
 8006136:	bf08      	it	eq
 8006138:	6143      	streq	r3, [r0, #20]
 800613a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800613e:	f8dc c000 	ldr.w	ip, [ip]
 8006142:	fa0c fc08 	lsl.w	ip, ip, r8
 8006146:	ea4c 0707 	orr.w	r7, ip, r7
 800614a:	f849 7b04 	str.w	r7, [r9], #4
 800614e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006152:	40cf      	lsrs	r7, r1
 8006154:	e7da      	b.n	800610c <rshift+0x4c>
 8006156:	f851 cb04 	ldr.w	ip, [r1], #4
 800615a:	f847 cf04 	str.w	ip, [r7, #4]!
 800615e:	e7c3      	b.n	80060e8 <rshift+0x28>
 8006160:	4623      	mov	r3, r4
 8006162:	e7e1      	b.n	8006128 <rshift+0x68>

08006164 <__hexdig_fun>:
 8006164:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006168:	2b09      	cmp	r3, #9
 800616a:	d802      	bhi.n	8006172 <__hexdig_fun+0xe>
 800616c:	3820      	subs	r0, #32
 800616e:	b2c0      	uxtb	r0, r0
 8006170:	4770      	bx	lr
 8006172:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006176:	2b05      	cmp	r3, #5
 8006178:	d801      	bhi.n	800617e <__hexdig_fun+0x1a>
 800617a:	3847      	subs	r0, #71	; 0x47
 800617c:	e7f7      	b.n	800616e <__hexdig_fun+0xa>
 800617e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006182:	2b05      	cmp	r3, #5
 8006184:	d801      	bhi.n	800618a <__hexdig_fun+0x26>
 8006186:	3827      	subs	r0, #39	; 0x27
 8006188:	e7f1      	b.n	800616e <__hexdig_fun+0xa>
 800618a:	2000      	movs	r0, #0
 800618c:	4770      	bx	lr
	...

08006190 <__gethex>:
 8006190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006194:	ed2d 8b02 	vpush	{d8}
 8006198:	b089      	sub	sp, #36	; 0x24
 800619a:	ee08 0a10 	vmov	s16, r0
 800619e:	9304      	str	r3, [sp, #16]
 80061a0:	4bbc      	ldr	r3, [pc, #752]	; (8006494 <__gethex+0x304>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	9301      	str	r3, [sp, #4]
 80061a6:	4618      	mov	r0, r3
 80061a8:	468b      	mov	fp, r1
 80061aa:	4690      	mov	r8, r2
 80061ac:	f7fa f810 	bl	80001d0 <strlen>
 80061b0:	9b01      	ldr	r3, [sp, #4]
 80061b2:	f8db 2000 	ldr.w	r2, [fp]
 80061b6:	4403      	add	r3, r0
 80061b8:	4682      	mov	sl, r0
 80061ba:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061be:	9305      	str	r3, [sp, #20]
 80061c0:	1c93      	adds	r3, r2, #2
 80061c2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80061c6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80061ca:	32fe      	adds	r2, #254	; 0xfe
 80061cc:	18d1      	adds	r1, r2, r3
 80061ce:	461f      	mov	r7, r3
 80061d0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061d4:	9100      	str	r1, [sp, #0]
 80061d6:	2830      	cmp	r0, #48	; 0x30
 80061d8:	d0f8      	beq.n	80061cc <__gethex+0x3c>
 80061da:	f7ff ffc3 	bl	8006164 <__hexdig_fun>
 80061de:	4604      	mov	r4, r0
 80061e0:	2800      	cmp	r0, #0
 80061e2:	d13a      	bne.n	800625a <__gethex+0xca>
 80061e4:	9901      	ldr	r1, [sp, #4]
 80061e6:	4652      	mov	r2, sl
 80061e8:	4638      	mov	r0, r7
 80061ea:	f001 f9ed 	bl	80075c8 <strncmp>
 80061ee:	4605      	mov	r5, r0
 80061f0:	2800      	cmp	r0, #0
 80061f2:	d168      	bne.n	80062c6 <__gethex+0x136>
 80061f4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80061f8:	eb07 060a 	add.w	r6, r7, sl
 80061fc:	f7ff ffb2 	bl	8006164 <__hexdig_fun>
 8006200:	2800      	cmp	r0, #0
 8006202:	d062      	beq.n	80062ca <__gethex+0x13a>
 8006204:	4633      	mov	r3, r6
 8006206:	7818      	ldrb	r0, [r3, #0]
 8006208:	2830      	cmp	r0, #48	; 0x30
 800620a:	461f      	mov	r7, r3
 800620c:	f103 0301 	add.w	r3, r3, #1
 8006210:	d0f9      	beq.n	8006206 <__gethex+0x76>
 8006212:	f7ff ffa7 	bl	8006164 <__hexdig_fun>
 8006216:	2301      	movs	r3, #1
 8006218:	fab0 f480 	clz	r4, r0
 800621c:	0964      	lsrs	r4, r4, #5
 800621e:	4635      	mov	r5, r6
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	463a      	mov	r2, r7
 8006224:	4616      	mov	r6, r2
 8006226:	3201      	adds	r2, #1
 8006228:	7830      	ldrb	r0, [r6, #0]
 800622a:	f7ff ff9b 	bl	8006164 <__hexdig_fun>
 800622e:	2800      	cmp	r0, #0
 8006230:	d1f8      	bne.n	8006224 <__gethex+0x94>
 8006232:	9901      	ldr	r1, [sp, #4]
 8006234:	4652      	mov	r2, sl
 8006236:	4630      	mov	r0, r6
 8006238:	f001 f9c6 	bl	80075c8 <strncmp>
 800623c:	b980      	cbnz	r0, 8006260 <__gethex+0xd0>
 800623e:	b94d      	cbnz	r5, 8006254 <__gethex+0xc4>
 8006240:	eb06 050a 	add.w	r5, r6, sl
 8006244:	462a      	mov	r2, r5
 8006246:	4616      	mov	r6, r2
 8006248:	3201      	adds	r2, #1
 800624a:	7830      	ldrb	r0, [r6, #0]
 800624c:	f7ff ff8a 	bl	8006164 <__hexdig_fun>
 8006250:	2800      	cmp	r0, #0
 8006252:	d1f8      	bne.n	8006246 <__gethex+0xb6>
 8006254:	1bad      	subs	r5, r5, r6
 8006256:	00ad      	lsls	r5, r5, #2
 8006258:	e004      	b.n	8006264 <__gethex+0xd4>
 800625a:	2400      	movs	r4, #0
 800625c:	4625      	mov	r5, r4
 800625e:	e7e0      	b.n	8006222 <__gethex+0x92>
 8006260:	2d00      	cmp	r5, #0
 8006262:	d1f7      	bne.n	8006254 <__gethex+0xc4>
 8006264:	7833      	ldrb	r3, [r6, #0]
 8006266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800626a:	2b50      	cmp	r3, #80	; 0x50
 800626c:	d13b      	bne.n	80062e6 <__gethex+0x156>
 800626e:	7873      	ldrb	r3, [r6, #1]
 8006270:	2b2b      	cmp	r3, #43	; 0x2b
 8006272:	d02c      	beq.n	80062ce <__gethex+0x13e>
 8006274:	2b2d      	cmp	r3, #45	; 0x2d
 8006276:	d02e      	beq.n	80062d6 <__gethex+0x146>
 8006278:	1c71      	adds	r1, r6, #1
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	7808      	ldrb	r0, [r1, #0]
 8006280:	f7ff ff70 	bl	8006164 <__hexdig_fun>
 8006284:	1e43      	subs	r3, r0, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b18      	cmp	r3, #24
 800628a:	d82c      	bhi.n	80062e6 <__gethex+0x156>
 800628c:	f1a0 0210 	sub.w	r2, r0, #16
 8006290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006294:	f7ff ff66 	bl	8006164 <__hexdig_fun>
 8006298:	1e43      	subs	r3, r0, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b18      	cmp	r3, #24
 800629e:	d91d      	bls.n	80062dc <__gethex+0x14c>
 80062a0:	f1b9 0f00 	cmp.w	r9, #0
 80062a4:	d000      	beq.n	80062a8 <__gethex+0x118>
 80062a6:	4252      	negs	r2, r2
 80062a8:	4415      	add	r5, r2
 80062aa:	f8cb 1000 	str.w	r1, [fp]
 80062ae:	b1e4      	cbz	r4, 80062ea <__gethex+0x15a>
 80062b0:	9b00      	ldr	r3, [sp, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	bf14      	ite	ne
 80062b6:	2700      	movne	r7, #0
 80062b8:	2706      	moveq	r7, #6
 80062ba:	4638      	mov	r0, r7
 80062bc:	b009      	add	sp, #36	; 0x24
 80062be:	ecbd 8b02 	vpop	{d8}
 80062c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c6:	463e      	mov	r6, r7
 80062c8:	4625      	mov	r5, r4
 80062ca:	2401      	movs	r4, #1
 80062cc:	e7ca      	b.n	8006264 <__gethex+0xd4>
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	1cb1      	adds	r1, r6, #2
 80062d4:	e7d3      	b.n	800627e <__gethex+0xee>
 80062d6:	f04f 0901 	mov.w	r9, #1
 80062da:	e7fa      	b.n	80062d2 <__gethex+0x142>
 80062dc:	230a      	movs	r3, #10
 80062de:	fb03 0202 	mla	r2, r3, r2, r0
 80062e2:	3a10      	subs	r2, #16
 80062e4:	e7d4      	b.n	8006290 <__gethex+0x100>
 80062e6:	4631      	mov	r1, r6
 80062e8:	e7df      	b.n	80062aa <__gethex+0x11a>
 80062ea:	1bf3      	subs	r3, r6, r7
 80062ec:	3b01      	subs	r3, #1
 80062ee:	4621      	mov	r1, r4
 80062f0:	2b07      	cmp	r3, #7
 80062f2:	dc0b      	bgt.n	800630c <__gethex+0x17c>
 80062f4:	ee18 0a10 	vmov	r0, s16
 80062f8:	f000 fa7e 	bl	80067f8 <_Balloc>
 80062fc:	4604      	mov	r4, r0
 80062fe:	b940      	cbnz	r0, 8006312 <__gethex+0x182>
 8006300:	4b65      	ldr	r3, [pc, #404]	; (8006498 <__gethex+0x308>)
 8006302:	4602      	mov	r2, r0
 8006304:	21de      	movs	r1, #222	; 0xde
 8006306:	4865      	ldr	r0, [pc, #404]	; (800649c <__gethex+0x30c>)
 8006308:	f001 f97e 	bl	8007608 <__assert_func>
 800630c:	3101      	adds	r1, #1
 800630e:	105b      	asrs	r3, r3, #1
 8006310:	e7ee      	b.n	80062f0 <__gethex+0x160>
 8006312:	f100 0914 	add.w	r9, r0, #20
 8006316:	f04f 0b00 	mov.w	fp, #0
 800631a:	f1ca 0301 	rsb	r3, sl, #1
 800631e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006322:	f8cd b000 	str.w	fp, [sp]
 8006326:	9306      	str	r3, [sp, #24]
 8006328:	42b7      	cmp	r7, r6
 800632a:	d340      	bcc.n	80063ae <__gethex+0x21e>
 800632c:	9802      	ldr	r0, [sp, #8]
 800632e:	9b00      	ldr	r3, [sp, #0]
 8006330:	f840 3b04 	str.w	r3, [r0], #4
 8006334:	eba0 0009 	sub.w	r0, r0, r9
 8006338:	1080      	asrs	r0, r0, #2
 800633a:	0146      	lsls	r6, r0, #5
 800633c:	6120      	str	r0, [r4, #16]
 800633e:	4618      	mov	r0, r3
 8006340:	f000 fb50 	bl	80069e4 <__hi0bits>
 8006344:	1a30      	subs	r0, r6, r0
 8006346:	f8d8 6000 	ldr.w	r6, [r8]
 800634a:	42b0      	cmp	r0, r6
 800634c:	dd63      	ble.n	8006416 <__gethex+0x286>
 800634e:	1b87      	subs	r7, r0, r6
 8006350:	4639      	mov	r1, r7
 8006352:	4620      	mov	r0, r4
 8006354:	f000 feea 	bl	800712c <__any_on>
 8006358:	4682      	mov	sl, r0
 800635a:	b1a8      	cbz	r0, 8006388 <__gethex+0x1f8>
 800635c:	1e7b      	subs	r3, r7, #1
 800635e:	1159      	asrs	r1, r3, #5
 8006360:	f003 021f 	and.w	r2, r3, #31
 8006364:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006368:	f04f 0a01 	mov.w	sl, #1
 800636c:	fa0a f202 	lsl.w	r2, sl, r2
 8006370:	420a      	tst	r2, r1
 8006372:	d009      	beq.n	8006388 <__gethex+0x1f8>
 8006374:	4553      	cmp	r3, sl
 8006376:	dd05      	ble.n	8006384 <__gethex+0x1f4>
 8006378:	1eb9      	subs	r1, r7, #2
 800637a:	4620      	mov	r0, r4
 800637c:	f000 fed6 	bl	800712c <__any_on>
 8006380:	2800      	cmp	r0, #0
 8006382:	d145      	bne.n	8006410 <__gethex+0x280>
 8006384:	f04f 0a02 	mov.w	sl, #2
 8006388:	4639      	mov	r1, r7
 800638a:	4620      	mov	r0, r4
 800638c:	f7ff fe98 	bl	80060c0 <rshift>
 8006390:	443d      	add	r5, r7
 8006392:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006396:	42ab      	cmp	r3, r5
 8006398:	da4c      	bge.n	8006434 <__gethex+0x2a4>
 800639a:	ee18 0a10 	vmov	r0, s16
 800639e:	4621      	mov	r1, r4
 80063a0:	f000 fa6a 	bl	8006878 <_Bfree>
 80063a4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80063a6:	2300      	movs	r3, #0
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	27a3      	movs	r7, #163	; 0xa3
 80063ac:	e785      	b.n	80062ba <__gethex+0x12a>
 80063ae:	1e73      	subs	r3, r6, #1
 80063b0:	9a05      	ldr	r2, [sp, #20]
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d019      	beq.n	80063f0 <__gethex+0x260>
 80063bc:	f1bb 0f20 	cmp.w	fp, #32
 80063c0:	d107      	bne.n	80063d2 <__gethex+0x242>
 80063c2:	9b02      	ldr	r3, [sp, #8]
 80063c4:	9a00      	ldr	r2, [sp, #0]
 80063c6:	f843 2b04 	str.w	r2, [r3], #4
 80063ca:	9302      	str	r3, [sp, #8]
 80063cc:	2300      	movs	r3, #0
 80063ce:	9300      	str	r3, [sp, #0]
 80063d0:	469b      	mov	fp, r3
 80063d2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063d6:	f7ff fec5 	bl	8006164 <__hexdig_fun>
 80063da:	9b00      	ldr	r3, [sp, #0]
 80063dc:	f000 000f 	and.w	r0, r0, #15
 80063e0:	fa00 f00b 	lsl.w	r0, r0, fp
 80063e4:	4303      	orrs	r3, r0
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	f10b 0b04 	add.w	fp, fp, #4
 80063ec:	9b03      	ldr	r3, [sp, #12]
 80063ee:	e00d      	b.n	800640c <__gethex+0x27c>
 80063f0:	9b03      	ldr	r3, [sp, #12]
 80063f2:	9a06      	ldr	r2, [sp, #24]
 80063f4:	4413      	add	r3, r2
 80063f6:	42bb      	cmp	r3, r7
 80063f8:	d3e0      	bcc.n	80063bc <__gethex+0x22c>
 80063fa:	4618      	mov	r0, r3
 80063fc:	9901      	ldr	r1, [sp, #4]
 80063fe:	9307      	str	r3, [sp, #28]
 8006400:	4652      	mov	r2, sl
 8006402:	f001 f8e1 	bl	80075c8 <strncmp>
 8006406:	9b07      	ldr	r3, [sp, #28]
 8006408:	2800      	cmp	r0, #0
 800640a:	d1d7      	bne.n	80063bc <__gethex+0x22c>
 800640c:	461e      	mov	r6, r3
 800640e:	e78b      	b.n	8006328 <__gethex+0x198>
 8006410:	f04f 0a03 	mov.w	sl, #3
 8006414:	e7b8      	b.n	8006388 <__gethex+0x1f8>
 8006416:	da0a      	bge.n	800642e <__gethex+0x29e>
 8006418:	1a37      	subs	r7, r6, r0
 800641a:	4621      	mov	r1, r4
 800641c:	ee18 0a10 	vmov	r0, s16
 8006420:	463a      	mov	r2, r7
 8006422:	f000 fc45 	bl	8006cb0 <__lshift>
 8006426:	1bed      	subs	r5, r5, r7
 8006428:	4604      	mov	r4, r0
 800642a:	f100 0914 	add.w	r9, r0, #20
 800642e:	f04f 0a00 	mov.w	sl, #0
 8006432:	e7ae      	b.n	8006392 <__gethex+0x202>
 8006434:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006438:	42a8      	cmp	r0, r5
 800643a:	dd72      	ble.n	8006522 <__gethex+0x392>
 800643c:	1b45      	subs	r5, r0, r5
 800643e:	42ae      	cmp	r6, r5
 8006440:	dc36      	bgt.n	80064b0 <__gethex+0x320>
 8006442:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006446:	2b02      	cmp	r3, #2
 8006448:	d02a      	beq.n	80064a0 <__gethex+0x310>
 800644a:	2b03      	cmp	r3, #3
 800644c:	d02c      	beq.n	80064a8 <__gethex+0x318>
 800644e:	2b01      	cmp	r3, #1
 8006450:	d115      	bne.n	800647e <__gethex+0x2ee>
 8006452:	42ae      	cmp	r6, r5
 8006454:	d113      	bne.n	800647e <__gethex+0x2ee>
 8006456:	2e01      	cmp	r6, #1
 8006458:	d10b      	bne.n	8006472 <__gethex+0x2e2>
 800645a:	9a04      	ldr	r2, [sp, #16]
 800645c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006460:	6013      	str	r3, [r2, #0]
 8006462:	2301      	movs	r3, #1
 8006464:	6123      	str	r3, [r4, #16]
 8006466:	f8c9 3000 	str.w	r3, [r9]
 800646a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800646c:	2762      	movs	r7, #98	; 0x62
 800646e:	601c      	str	r4, [r3, #0]
 8006470:	e723      	b.n	80062ba <__gethex+0x12a>
 8006472:	1e71      	subs	r1, r6, #1
 8006474:	4620      	mov	r0, r4
 8006476:	f000 fe59 	bl	800712c <__any_on>
 800647a:	2800      	cmp	r0, #0
 800647c:	d1ed      	bne.n	800645a <__gethex+0x2ca>
 800647e:	ee18 0a10 	vmov	r0, s16
 8006482:	4621      	mov	r1, r4
 8006484:	f000 f9f8 	bl	8006878 <_Bfree>
 8006488:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800648a:	2300      	movs	r3, #0
 800648c:	6013      	str	r3, [r2, #0]
 800648e:	2750      	movs	r7, #80	; 0x50
 8006490:	e713      	b.n	80062ba <__gethex+0x12a>
 8006492:	bf00      	nop
 8006494:	08008a68 	.word	0x08008a68
 8006498:	080089ec 	.word	0x080089ec
 800649c:	080089fd 	.word	0x080089fd
 80064a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1eb      	bne.n	800647e <__gethex+0x2ee>
 80064a6:	e7d8      	b.n	800645a <__gethex+0x2ca>
 80064a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1d5      	bne.n	800645a <__gethex+0x2ca>
 80064ae:	e7e6      	b.n	800647e <__gethex+0x2ee>
 80064b0:	1e6f      	subs	r7, r5, #1
 80064b2:	f1ba 0f00 	cmp.w	sl, #0
 80064b6:	d131      	bne.n	800651c <__gethex+0x38c>
 80064b8:	b127      	cbz	r7, 80064c4 <__gethex+0x334>
 80064ba:	4639      	mov	r1, r7
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 fe35 	bl	800712c <__any_on>
 80064c2:	4682      	mov	sl, r0
 80064c4:	117b      	asrs	r3, r7, #5
 80064c6:	2101      	movs	r1, #1
 80064c8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80064cc:	f007 071f 	and.w	r7, r7, #31
 80064d0:	fa01 f707 	lsl.w	r7, r1, r7
 80064d4:	421f      	tst	r7, r3
 80064d6:	4629      	mov	r1, r5
 80064d8:	4620      	mov	r0, r4
 80064da:	bf18      	it	ne
 80064dc:	f04a 0a02 	orrne.w	sl, sl, #2
 80064e0:	1b76      	subs	r6, r6, r5
 80064e2:	f7ff fded 	bl	80060c0 <rshift>
 80064e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80064ea:	2702      	movs	r7, #2
 80064ec:	f1ba 0f00 	cmp.w	sl, #0
 80064f0:	d048      	beq.n	8006584 <__gethex+0x3f4>
 80064f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d015      	beq.n	8006526 <__gethex+0x396>
 80064fa:	2b03      	cmp	r3, #3
 80064fc:	d017      	beq.n	800652e <__gethex+0x39e>
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d109      	bne.n	8006516 <__gethex+0x386>
 8006502:	f01a 0f02 	tst.w	sl, #2
 8006506:	d006      	beq.n	8006516 <__gethex+0x386>
 8006508:	f8d9 0000 	ldr.w	r0, [r9]
 800650c:	ea4a 0a00 	orr.w	sl, sl, r0
 8006510:	f01a 0f01 	tst.w	sl, #1
 8006514:	d10e      	bne.n	8006534 <__gethex+0x3a4>
 8006516:	f047 0710 	orr.w	r7, r7, #16
 800651a:	e033      	b.n	8006584 <__gethex+0x3f4>
 800651c:	f04f 0a01 	mov.w	sl, #1
 8006520:	e7d0      	b.n	80064c4 <__gethex+0x334>
 8006522:	2701      	movs	r7, #1
 8006524:	e7e2      	b.n	80064ec <__gethex+0x35c>
 8006526:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006528:	f1c3 0301 	rsb	r3, r3, #1
 800652c:	9315      	str	r3, [sp, #84]	; 0x54
 800652e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0f0      	beq.n	8006516 <__gethex+0x386>
 8006534:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006538:	f104 0314 	add.w	r3, r4, #20
 800653c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006540:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006544:	f04f 0c00 	mov.w	ip, #0
 8006548:	4618      	mov	r0, r3
 800654a:	f853 2b04 	ldr.w	r2, [r3], #4
 800654e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006552:	d01c      	beq.n	800658e <__gethex+0x3fe>
 8006554:	3201      	adds	r2, #1
 8006556:	6002      	str	r2, [r0, #0]
 8006558:	2f02      	cmp	r7, #2
 800655a:	f104 0314 	add.w	r3, r4, #20
 800655e:	d13f      	bne.n	80065e0 <__gethex+0x450>
 8006560:	f8d8 2000 	ldr.w	r2, [r8]
 8006564:	3a01      	subs	r2, #1
 8006566:	42b2      	cmp	r2, r6
 8006568:	d10a      	bne.n	8006580 <__gethex+0x3f0>
 800656a:	1171      	asrs	r1, r6, #5
 800656c:	2201      	movs	r2, #1
 800656e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006572:	f006 061f 	and.w	r6, r6, #31
 8006576:	fa02 f606 	lsl.w	r6, r2, r6
 800657a:	421e      	tst	r6, r3
 800657c:	bf18      	it	ne
 800657e:	4617      	movne	r7, r2
 8006580:	f047 0720 	orr.w	r7, r7, #32
 8006584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006586:	601c      	str	r4, [r3, #0]
 8006588:	9b04      	ldr	r3, [sp, #16]
 800658a:	601d      	str	r5, [r3, #0]
 800658c:	e695      	b.n	80062ba <__gethex+0x12a>
 800658e:	4299      	cmp	r1, r3
 8006590:	f843 cc04 	str.w	ip, [r3, #-4]
 8006594:	d8d8      	bhi.n	8006548 <__gethex+0x3b8>
 8006596:	68a3      	ldr	r3, [r4, #8]
 8006598:	459b      	cmp	fp, r3
 800659a:	db19      	blt.n	80065d0 <__gethex+0x440>
 800659c:	6861      	ldr	r1, [r4, #4]
 800659e:	ee18 0a10 	vmov	r0, s16
 80065a2:	3101      	adds	r1, #1
 80065a4:	f000 f928 	bl	80067f8 <_Balloc>
 80065a8:	4681      	mov	r9, r0
 80065aa:	b918      	cbnz	r0, 80065b4 <__gethex+0x424>
 80065ac:	4b1a      	ldr	r3, [pc, #104]	; (8006618 <__gethex+0x488>)
 80065ae:	4602      	mov	r2, r0
 80065b0:	2184      	movs	r1, #132	; 0x84
 80065b2:	e6a8      	b.n	8006306 <__gethex+0x176>
 80065b4:	6922      	ldr	r2, [r4, #16]
 80065b6:	3202      	adds	r2, #2
 80065b8:	f104 010c 	add.w	r1, r4, #12
 80065bc:	0092      	lsls	r2, r2, #2
 80065be:	300c      	adds	r0, #12
 80065c0:	f000 f90c 	bl	80067dc <memcpy>
 80065c4:	4621      	mov	r1, r4
 80065c6:	ee18 0a10 	vmov	r0, s16
 80065ca:	f000 f955 	bl	8006878 <_Bfree>
 80065ce:	464c      	mov	r4, r9
 80065d0:	6923      	ldr	r3, [r4, #16]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80065d8:	6122      	str	r2, [r4, #16]
 80065da:	2201      	movs	r2, #1
 80065dc:	615a      	str	r2, [r3, #20]
 80065de:	e7bb      	b.n	8006558 <__gethex+0x3c8>
 80065e0:	6922      	ldr	r2, [r4, #16]
 80065e2:	455a      	cmp	r2, fp
 80065e4:	dd0b      	ble.n	80065fe <__gethex+0x46e>
 80065e6:	2101      	movs	r1, #1
 80065e8:	4620      	mov	r0, r4
 80065ea:	f7ff fd69 	bl	80060c0 <rshift>
 80065ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065f2:	3501      	adds	r5, #1
 80065f4:	42ab      	cmp	r3, r5
 80065f6:	f6ff aed0 	blt.w	800639a <__gethex+0x20a>
 80065fa:	2701      	movs	r7, #1
 80065fc:	e7c0      	b.n	8006580 <__gethex+0x3f0>
 80065fe:	f016 061f 	ands.w	r6, r6, #31
 8006602:	d0fa      	beq.n	80065fa <__gethex+0x46a>
 8006604:	449a      	add	sl, r3
 8006606:	f1c6 0620 	rsb	r6, r6, #32
 800660a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800660e:	f000 f9e9 	bl	80069e4 <__hi0bits>
 8006612:	42b0      	cmp	r0, r6
 8006614:	dbe7      	blt.n	80065e6 <__gethex+0x456>
 8006616:	e7f0      	b.n	80065fa <__gethex+0x46a>
 8006618:	080089ec 	.word	0x080089ec

0800661c <L_shift>:
 800661c:	f1c2 0208 	rsb	r2, r2, #8
 8006620:	0092      	lsls	r2, r2, #2
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	f1c2 0620 	rsb	r6, r2, #32
 8006628:	6843      	ldr	r3, [r0, #4]
 800662a:	6804      	ldr	r4, [r0, #0]
 800662c:	fa03 f506 	lsl.w	r5, r3, r6
 8006630:	432c      	orrs	r4, r5
 8006632:	40d3      	lsrs	r3, r2
 8006634:	6004      	str	r4, [r0, #0]
 8006636:	f840 3f04 	str.w	r3, [r0, #4]!
 800663a:	4288      	cmp	r0, r1
 800663c:	d3f4      	bcc.n	8006628 <L_shift+0xc>
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__match>:
 8006640:	b530      	push	{r4, r5, lr}
 8006642:	6803      	ldr	r3, [r0, #0]
 8006644:	3301      	adds	r3, #1
 8006646:	f811 4b01 	ldrb.w	r4, [r1], #1
 800664a:	b914      	cbnz	r4, 8006652 <__match+0x12>
 800664c:	6003      	str	r3, [r0, #0]
 800664e:	2001      	movs	r0, #1
 8006650:	bd30      	pop	{r4, r5, pc}
 8006652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006656:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800665a:	2d19      	cmp	r5, #25
 800665c:	bf98      	it	ls
 800665e:	3220      	addls	r2, #32
 8006660:	42a2      	cmp	r2, r4
 8006662:	d0f0      	beq.n	8006646 <__match+0x6>
 8006664:	2000      	movs	r0, #0
 8006666:	e7f3      	b.n	8006650 <__match+0x10>

08006668 <__hexnan>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	680b      	ldr	r3, [r1, #0]
 800666e:	6801      	ldr	r1, [r0, #0]
 8006670:	115e      	asrs	r6, r3, #5
 8006672:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006676:	f013 031f 	ands.w	r3, r3, #31
 800667a:	b087      	sub	sp, #28
 800667c:	bf18      	it	ne
 800667e:	3604      	addne	r6, #4
 8006680:	2500      	movs	r5, #0
 8006682:	1f37      	subs	r7, r6, #4
 8006684:	4682      	mov	sl, r0
 8006686:	4690      	mov	r8, r2
 8006688:	9301      	str	r3, [sp, #4]
 800668a:	f846 5c04 	str.w	r5, [r6, #-4]
 800668e:	46b9      	mov	r9, r7
 8006690:	463c      	mov	r4, r7
 8006692:	9502      	str	r5, [sp, #8]
 8006694:	46ab      	mov	fp, r5
 8006696:	784a      	ldrb	r2, [r1, #1]
 8006698:	1c4b      	adds	r3, r1, #1
 800669a:	9303      	str	r3, [sp, #12]
 800669c:	b342      	cbz	r2, 80066f0 <__hexnan+0x88>
 800669e:	4610      	mov	r0, r2
 80066a0:	9105      	str	r1, [sp, #20]
 80066a2:	9204      	str	r2, [sp, #16]
 80066a4:	f7ff fd5e 	bl	8006164 <__hexdig_fun>
 80066a8:	2800      	cmp	r0, #0
 80066aa:	d14f      	bne.n	800674c <__hexnan+0xe4>
 80066ac:	9a04      	ldr	r2, [sp, #16]
 80066ae:	9905      	ldr	r1, [sp, #20]
 80066b0:	2a20      	cmp	r2, #32
 80066b2:	d818      	bhi.n	80066e6 <__hexnan+0x7e>
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	459b      	cmp	fp, r3
 80066b8:	dd13      	ble.n	80066e2 <__hexnan+0x7a>
 80066ba:	454c      	cmp	r4, r9
 80066bc:	d206      	bcs.n	80066cc <__hexnan+0x64>
 80066be:	2d07      	cmp	r5, #7
 80066c0:	dc04      	bgt.n	80066cc <__hexnan+0x64>
 80066c2:	462a      	mov	r2, r5
 80066c4:	4649      	mov	r1, r9
 80066c6:	4620      	mov	r0, r4
 80066c8:	f7ff ffa8 	bl	800661c <L_shift>
 80066cc:	4544      	cmp	r4, r8
 80066ce:	d950      	bls.n	8006772 <__hexnan+0x10a>
 80066d0:	2300      	movs	r3, #0
 80066d2:	f1a4 0904 	sub.w	r9, r4, #4
 80066d6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066da:	f8cd b008 	str.w	fp, [sp, #8]
 80066de:	464c      	mov	r4, r9
 80066e0:	461d      	mov	r5, r3
 80066e2:	9903      	ldr	r1, [sp, #12]
 80066e4:	e7d7      	b.n	8006696 <__hexnan+0x2e>
 80066e6:	2a29      	cmp	r2, #41	; 0x29
 80066e8:	d156      	bne.n	8006798 <__hexnan+0x130>
 80066ea:	3102      	adds	r1, #2
 80066ec:	f8ca 1000 	str.w	r1, [sl]
 80066f0:	f1bb 0f00 	cmp.w	fp, #0
 80066f4:	d050      	beq.n	8006798 <__hexnan+0x130>
 80066f6:	454c      	cmp	r4, r9
 80066f8:	d206      	bcs.n	8006708 <__hexnan+0xa0>
 80066fa:	2d07      	cmp	r5, #7
 80066fc:	dc04      	bgt.n	8006708 <__hexnan+0xa0>
 80066fe:	462a      	mov	r2, r5
 8006700:	4649      	mov	r1, r9
 8006702:	4620      	mov	r0, r4
 8006704:	f7ff ff8a 	bl	800661c <L_shift>
 8006708:	4544      	cmp	r4, r8
 800670a:	d934      	bls.n	8006776 <__hexnan+0x10e>
 800670c:	f1a8 0204 	sub.w	r2, r8, #4
 8006710:	4623      	mov	r3, r4
 8006712:	f853 1b04 	ldr.w	r1, [r3], #4
 8006716:	f842 1f04 	str.w	r1, [r2, #4]!
 800671a:	429f      	cmp	r7, r3
 800671c:	d2f9      	bcs.n	8006712 <__hexnan+0xaa>
 800671e:	1b3b      	subs	r3, r7, r4
 8006720:	f023 0303 	bic.w	r3, r3, #3
 8006724:	3304      	adds	r3, #4
 8006726:	3401      	adds	r4, #1
 8006728:	3e03      	subs	r6, #3
 800672a:	42b4      	cmp	r4, r6
 800672c:	bf88      	it	hi
 800672e:	2304      	movhi	r3, #4
 8006730:	4443      	add	r3, r8
 8006732:	2200      	movs	r2, #0
 8006734:	f843 2b04 	str.w	r2, [r3], #4
 8006738:	429f      	cmp	r7, r3
 800673a:	d2fb      	bcs.n	8006734 <__hexnan+0xcc>
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b91b      	cbnz	r3, 8006748 <__hexnan+0xe0>
 8006740:	4547      	cmp	r7, r8
 8006742:	d127      	bne.n	8006794 <__hexnan+0x12c>
 8006744:	2301      	movs	r3, #1
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	2005      	movs	r0, #5
 800674a:	e026      	b.n	800679a <__hexnan+0x132>
 800674c:	3501      	adds	r5, #1
 800674e:	2d08      	cmp	r5, #8
 8006750:	f10b 0b01 	add.w	fp, fp, #1
 8006754:	dd06      	ble.n	8006764 <__hexnan+0xfc>
 8006756:	4544      	cmp	r4, r8
 8006758:	d9c3      	bls.n	80066e2 <__hexnan+0x7a>
 800675a:	2300      	movs	r3, #0
 800675c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006760:	2501      	movs	r5, #1
 8006762:	3c04      	subs	r4, #4
 8006764:	6822      	ldr	r2, [r4, #0]
 8006766:	f000 000f 	and.w	r0, r0, #15
 800676a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	e7b7      	b.n	80066e2 <__hexnan+0x7a>
 8006772:	2508      	movs	r5, #8
 8006774:	e7b5      	b.n	80066e2 <__hexnan+0x7a>
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d0df      	beq.n	800673c <__hexnan+0xd4>
 800677c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006780:	f1c3 0320 	rsb	r3, r3, #32
 8006784:	fa22 f303 	lsr.w	r3, r2, r3
 8006788:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800678c:	401a      	ands	r2, r3
 800678e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006792:	e7d3      	b.n	800673c <__hexnan+0xd4>
 8006794:	3f04      	subs	r7, #4
 8006796:	e7d1      	b.n	800673c <__hexnan+0xd4>
 8006798:	2004      	movs	r0, #4
 800679a:	b007      	add	sp, #28
 800679c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080067a0 <_localeconv_r>:
 80067a0:	4800      	ldr	r0, [pc, #0]	; (80067a4 <_localeconv_r+0x4>)
 80067a2:	4770      	bx	lr
 80067a4:	20000170 	.word	0x20000170

080067a8 <malloc>:
 80067a8:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <malloc+0xc>)
 80067aa:	4601      	mov	r1, r0
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	f000 bd3d 	b.w	800722c <_malloc_r>
 80067b2:	bf00      	nop
 80067b4:	20000018 	.word	0x20000018

080067b8 <__ascii_mbtowc>:
 80067b8:	b082      	sub	sp, #8
 80067ba:	b901      	cbnz	r1, 80067be <__ascii_mbtowc+0x6>
 80067bc:	a901      	add	r1, sp, #4
 80067be:	b142      	cbz	r2, 80067d2 <__ascii_mbtowc+0x1a>
 80067c0:	b14b      	cbz	r3, 80067d6 <__ascii_mbtowc+0x1e>
 80067c2:	7813      	ldrb	r3, [r2, #0]
 80067c4:	600b      	str	r3, [r1, #0]
 80067c6:	7812      	ldrb	r2, [r2, #0]
 80067c8:	1e10      	subs	r0, r2, #0
 80067ca:	bf18      	it	ne
 80067cc:	2001      	movne	r0, #1
 80067ce:	b002      	add	sp, #8
 80067d0:	4770      	bx	lr
 80067d2:	4610      	mov	r0, r2
 80067d4:	e7fb      	b.n	80067ce <__ascii_mbtowc+0x16>
 80067d6:	f06f 0001 	mvn.w	r0, #1
 80067da:	e7f8      	b.n	80067ce <__ascii_mbtowc+0x16>

080067dc <memcpy>:
 80067dc:	440a      	add	r2, r1
 80067de:	4291      	cmp	r1, r2
 80067e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067e4:	d100      	bne.n	80067e8 <memcpy+0xc>
 80067e6:	4770      	bx	lr
 80067e8:	b510      	push	{r4, lr}
 80067ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067f2:	4291      	cmp	r1, r2
 80067f4:	d1f9      	bne.n	80067ea <memcpy+0xe>
 80067f6:	bd10      	pop	{r4, pc}

080067f8 <_Balloc>:
 80067f8:	b570      	push	{r4, r5, r6, lr}
 80067fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067fc:	4604      	mov	r4, r0
 80067fe:	460d      	mov	r5, r1
 8006800:	b976      	cbnz	r6, 8006820 <_Balloc+0x28>
 8006802:	2010      	movs	r0, #16
 8006804:	f7ff ffd0 	bl	80067a8 <malloc>
 8006808:	4602      	mov	r2, r0
 800680a:	6260      	str	r0, [r4, #36]	; 0x24
 800680c:	b920      	cbnz	r0, 8006818 <_Balloc+0x20>
 800680e:	4b18      	ldr	r3, [pc, #96]	; (8006870 <_Balloc+0x78>)
 8006810:	4818      	ldr	r0, [pc, #96]	; (8006874 <_Balloc+0x7c>)
 8006812:	2166      	movs	r1, #102	; 0x66
 8006814:	f000 fef8 	bl	8007608 <__assert_func>
 8006818:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800681c:	6006      	str	r6, [r0, #0]
 800681e:	60c6      	str	r6, [r0, #12]
 8006820:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006822:	68f3      	ldr	r3, [r6, #12]
 8006824:	b183      	cbz	r3, 8006848 <_Balloc+0x50>
 8006826:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800682e:	b9b8      	cbnz	r0, 8006860 <_Balloc+0x68>
 8006830:	2101      	movs	r1, #1
 8006832:	fa01 f605 	lsl.w	r6, r1, r5
 8006836:	1d72      	adds	r2, r6, #5
 8006838:	0092      	lsls	r2, r2, #2
 800683a:	4620      	mov	r0, r4
 800683c:	f000 fc97 	bl	800716e <_calloc_r>
 8006840:	b160      	cbz	r0, 800685c <_Balloc+0x64>
 8006842:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006846:	e00e      	b.n	8006866 <_Balloc+0x6e>
 8006848:	2221      	movs	r2, #33	; 0x21
 800684a:	2104      	movs	r1, #4
 800684c:	4620      	mov	r0, r4
 800684e:	f000 fc8e 	bl	800716e <_calloc_r>
 8006852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006854:	60f0      	str	r0, [r6, #12]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e4      	bne.n	8006826 <_Balloc+0x2e>
 800685c:	2000      	movs	r0, #0
 800685e:	bd70      	pop	{r4, r5, r6, pc}
 8006860:	6802      	ldr	r2, [r0, #0]
 8006862:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006866:	2300      	movs	r3, #0
 8006868:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800686c:	e7f7      	b.n	800685e <_Balloc+0x66>
 800686e:	bf00      	nop
 8006870:	08008976 	.word	0x08008976
 8006874:	08008a7c 	.word	0x08008a7c

08006878 <_Bfree>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800687c:	4605      	mov	r5, r0
 800687e:	460c      	mov	r4, r1
 8006880:	b976      	cbnz	r6, 80068a0 <_Bfree+0x28>
 8006882:	2010      	movs	r0, #16
 8006884:	f7ff ff90 	bl	80067a8 <malloc>
 8006888:	4602      	mov	r2, r0
 800688a:	6268      	str	r0, [r5, #36]	; 0x24
 800688c:	b920      	cbnz	r0, 8006898 <_Bfree+0x20>
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <_Bfree+0x3c>)
 8006890:	4809      	ldr	r0, [pc, #36]	; (80068b8 <_Bfree+0x40>)
 8006892:	218a      	movs	r1, #138	; 0x8a
 8006894:	f000 feb8 	bl	8007608 <__assert_func>
 8006898:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800689c:	6006      	str	r6, [r0, #0]
 800689e:	60c6      	str	r6, [r0, #12]
 80068a0:	b13c      	cbz	r4, 80068b2 <_Bfree+0x3a>
 80068a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80068a4:	6862      	ldr	r2, [r4, #4]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068ac:	6021      	str	r1, [r4, #0]
 80068ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	08008976 	.word	0x08008976
 80068b8:	08008a7c 	.word	0x08008a7c

080068bc <__multadd>:
 80068bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c0:	690e      	ldr	r6, [r1, #16]
 80068c2:	4607      	mov	r7, r0
 80068c4:	4698      	mov	r8, r3
 80068c6:	460c      	mov	r4, r1
 80068c8:	f101 0014 	add.w	r0, r1, #20
 80068cc:	2300      	movs	r3, #0
 80068ce:	6805      	ldr	r5, [r0, #0]
 80068d0:	b2a9      	uxth	r1, r5
 80068d2:	fb02 8101 	mla	r1, r2, r1, r8
 80068d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80068da:	0c2d      	lsrs	r5, r5, #16
 80068dc:	fb02 c505 	mla	r5, r2, r5, ip
 80068e0:	b289      	uxth	r1, r1
 80068e2:	3301      	adds	r3, #1
 80068e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80068e8:	429e      	cmp	r6, r3
 80068ea:	f840 1b04 	str.w	r1, [r0], #4
 80068ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80068f2:	dcec      	bgt.n	80068ce <__multadd+0x12>
 80068f4:	f1b8 0f00 	cmp.w	r8, #0
 80068f8:	d022      	beq.n	8006940 <__multadd+0x84>
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	42b3      	cmp	r3, r6
 80068fe:	dc19      	bgt.n	8006934 <__multadd+0x78>
 8006900:	6861      	ldr	r1, [r4, #4]
 8006902:	4638      	mov	r0, r7
 8006904:	3101      	adds	r1, #1
 8006906:	f7ff ff77 	bl	80067f8 <_Balloc>
 800690a:	4605      	mov	r5, r0
 800690c:	b928      	cbnz	r0, 800691a <__multadd+0x5e>
 800690e:	4602      	mov	r2, r0
 8006910:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <__multadd+0x8c>)
 8006912:	480e      	ldr	r0, [pc, #56]	; (800694c <__multadd+0x90>)
 8006914:	21b5      	movs	r1, #181	; 0xb5
 8006916:	f000 fe77 	bl	8007608 <__assert_func>
 800691a:	6922      	ldr	r2, [r4, #16]
 800691c:	3202      	adds	r2, #2
 800691e:	f104 010c 	add.w	r1, r4, #12
 8006922:	0092      	lsls	r2, r2, #2
 8006924:	300c      	adds	r0, #12
 8006926:	f7ff ff59 	bl	80067dc <memcpy>
 800692a:	4621      	mov	r1, r4
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff ffa3 	bl	8006878 <_Bfree>
 8006932:	462c      	mov	r4, r5
 8006934:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006938:	3601      	adds	r6, #1
 800693a:	f8c3 8014 	str.w	r8, [r3, #20]
 800693e:	6126      	str	r6, [r4, #16]
 8006940:	4620      	mov	r0, r4
 8006942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006946:	bf00      	nop
 8006948:	080089ec 	.word	0x080089ec
 800694c:	08008a7c 	.word	0x08008a7c

08006950 <__s2b>:
 8006950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006954:	460c      	mov	r4, r1
 8006956:	4615      	mov	r5, r2
 8006958:	461f      	mov	r7, r3
 800695a:	2209      	movs	r2, #9
 800695c:	3308      	adds	r3, #8
 800695e:	4606      	mov	r6, r0
 8006960:	fb93 f3f2 	sdiv	r3, r3, r2
 8006964:	2100      	movs	r1, #0
 8006966:	2201      	movs	r2, #1
 8006968:	429a      	cmp	r2, r3
 800696a:	db09      	blt.n	8006980 <__s2b+0x30>
 800696c:	4630      	mov	r0, r6
 800696e:	f7ff ff43 	bl	80067f8 <_Balloc>
 8006972:	b940      	cbnz	r0, 8006986 <__s2b+0x36>
 8006974:	4602      	mov	r2, r0
 8006976:	4b19      	ldr	r3, [pc, #100]	; (80069dc <__s2b+0x8c>)
 8006978:	4819      	ldr	r0, [pc, #100]	; (80069e0 <__s2b+0x90>)
 800697a:	21ce      	movs	r1, #206	; 0xce
 800697c:	f000 fe44 	bl	8007608 <__assert_func>
 8006980:	0052      	lsls	r2, r2, #1
 8006982:	3101      	adds	r1, #1
 8006984:	e7f0      	b.n	8006968 <__s2b+0x18>
 8006986:	9b08      	ldr	r3, [sp, #32]
 8006988:	6143      	str	r3, [r0, #20]
 800698a:	2d09      	cmp	r5, #9
 800698c:	f04f 0301 	mov.w	r3, #1
 8006990:	6103      	str	r3, [r0, #16]
 8006992:	dd16      	ble.n	80069c2 <__s2b+0x72>
 8006994:	f104 0909 	add.w	r9, r4, #9
 8006998:	46c8      	mov	r8, r9
 800699a:	442c      	add	r4, r5
 800699c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80069a0:	4601      	mov	r1, r0
 80069a2:	3b30      	subs	r3, #48	; 0x30
 80069a4:	220a      	movs	r2, #10
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ff88 	bl	80068bc <__multadd>
 80069ac:	45a0      	cmp	r8, r4
 80069ae:	d1f5      	bne.n	800699c <__s2b+0x4c>
 80069b0:	f1a5 0408 	sub.w	r4, r5, #8
 80069b4:	444c      	add	r4, r9
 80069b6:	1b2d      	subs	r5, r5, r4
 80069b8:	1963      	adds	r3, r4, r5
 80069ba:	42bb      	cmp	r3, r7
 80069bc:	db04      	blt.n	80069c8 <__s2b+0x78>
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	340a      	adds	r4, #10
 80069c4:	2509      	movs	r5, #9
 80069c6:	e7f6      	b.n	80069b6 <__s2b+0x66>
 80069c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069cc:	4601      	mov	r1, r0
 80069ce:	3b30      	subs	r3, #48	; 0x30
 80069d0:	220a      	movs	r2, #10
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7ff ff72 	bl	80068bc <__multadd>
 80069d8:	e7ee      	b.n	80069b8 <__s2b+0x68>
 80069da:	bf00      	nop
 80069dc:	080089ec 	.word	0x080089ec
 80069e0:	08008a7c 	.word	0x08008a7c

080069e4 <__hi0bits>:
 80069e4:	0c03      	lsrs	r3, r0, #16
 80069e6:	041b      	lsls	r3, r3, #16
 80069e8:	b9d3      	cbnz	r3, 8006a20 <__hi0bits+0x3c>
 80069ea:	0400      	lsls	r0, r0, #16
 80069ec:	2310      	movs	r3, #16
 80069ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069f2:	bf04      	itt	eq
 80069f4:	0200      	lsleq	r0, r0, #8
 80069f6:	3308      	addeq	r3, #8
 80069f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069fc:	bf04      	itt	eq
 80069fe:	0100      	lsleq	r0, r0, #4
 8006a00:	3304      	addeq	r3, #4
 8006a02:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a06:	bf04      	itt	eq
 8006a08:	0080      	lsleq	r0, r0, #2
 8006a0a:	3302      	addeq	r3, #2
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	db05      	blt.n	8006a1c <__hi0bits+0x38>
 8006a10:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a14:	f103 0301 	add.w	r3, r3, #1
 8006a18:	bf08      	it	eq
 8006a1a:	2320      	moveq	r3, #32
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	4770      	bx	lr
 8006a20:	2300      	movs	r3, #0
 8006a22:	e7e4      	b.n	80069ee <__hi0bits+0xa>

08006a24 <__lo0bits>:
 8006a24:	6803      	ldr	r3, [r0, #0]
 8006a26:	f013 0207 	ands.w	r2, r3, #7
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	d00b      	beq.n	8006a46 <__lo0bits+0x22>
 8006a2e:	07da      	lsls	r2, r3, #31
 8006a30:	d424      	bmi.n	8006a7c <__lo0bits+0x58>
 8006a32:	0798      	lsls	r0, r3, #30
 8006a34:	bf49      	itett	mi
 8006a36:	085b      	lsrmi	r3, r3, #1
 8006a38:	089b      	lsrpl	r3, r3, #2
 8006a3a:	2001      	movmi	r0, #1
 8006a3c:	600b      	strmi	r3, [r1, #0]
 8006a3e:	bf5c      	itt	pl
 8006a40:	600b      	strpl	r3, [r1, #0]
 8006a42:	2002      	movpl	r0, #2
 8006a44:	4770      	bx	lr
 8006a46:	b298      	uxth	r0, r3
 8006a48:	b9b0      	cbnz	r0, 8006a78 <__lo0bits+0x54>
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	2010      	movs	r0, #16
 8006a4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006a52:	bf04      	itt	eq
 8006a54:	0a1b      	lsreq	r3, r3, #8
 8006a56:	3008      	addeq	r0, #8
 8006a58:	071a      	lsls	r2, r3, #28
 8006a5a:	bf04      	itt	eq
 8006a5c:	091b      	lsreq	r3, r3, #4
 8006a5e:	3004      	addeq	r0, #4
 8006a60:	079a      	lsls	r2, r3, #30
 8006a62:	bf04      	itt	eq
 8006a64:	089b      	lsreq	r3, r3, #2
 8006a66:	3002      	addeq	r0, #2
 8006a68:	07da      	lsls	r2, r3, #31
 8006a6a:	d403      	bmi.n	8006a74 <__lo0bits+0x50>
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	f100 0001 	add.w	r0, r0, #1
 8006a72:	d005      	beq.n	8006a80 <__lo0bits+0x5c>
 8006a74:	600b      	str	r3, [r1, #0]
 8006a76:	4770      	bx	lr
 8006a78:	4610      	mov	r0, r2
 8006a7a:	e7e8      	b.n	8006a4e <__lo0bits+0x2a>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	4770      	bx	lr
 8006a80:	2020      	movs	r0, #32
 8006a82:	4770      	bx	lr

08006a84 <__i2b>:
 8006a84:	b510      	push	{r4, lr}
 8006a86:	460c      	mov	r4, r1
 8006a88:	2101      	movs	r1, #1
 8006a8a:	f7ff feb5 	bl	80067f8 <_Balloc>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	b928      	cbnz	r0, 8006a9e <__i2b+0x1a>
 8006a92:	4b05      	ldr	r3, [pc, #20]	; (8006aa8 <__i2b+0x24>)
 8006a94:	4805      	ldr	r0, [pc, #20]	; (8006aac <__i2b+0x28>)
 8006a96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006a9a:	f000 fdb5 	bl	8007608 <__assert_func>
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	6144      	str	r4, [r0, #20]
 8006aa2:	6103      	str	r3, [r0, #16]
 8006aa4:	bd10      	pop	{r4, pc}
 8006aa6:	bf00      	nop
 8006aa8:	080089ec 	.word	0x080089ec
 8006aac:	08008a7c 	.word	0x08008a7c

08006ab0 <__multiply>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	4614      	mov	r4, r2
 8006ab6:	690a      	ldr	r2, [r1, #16]
 8006ab8:	6923      	ldr	r3, [r4, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	bfb8      	it	lt
 8006abe:	460b      	movlt	r3, r1
 8006ac0:	460d      	mov	r5, r1
 8006ac2:	bfbc      	itt	lt
 8006ac4:	4625      	movlt	r5, r4
 8006ac6:	461c      	movlt	r4, r3
 8006ac8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006acc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006ad0:	68ab      	ldr	r3, [r5, #8]
 8006ad2:	6869      	ldr	r1, [r5, #4]
 8006ad4:	eb0a 0709 	add.w	r7, sl, r9
 8006ad8:	42bb      	cmp	r3, r7
 8006ada:	b085      	sub	sp, #20
 8006adc:	bfb8      	it	lt
 8006ade:	3101      	addlt	r1, #1
 8006ae0:	f7ff fe8a 	bl	80067f8 <_Balloc>
 8006ae4:	b930      	cbnz	r0, 8006af4 <__multiply+0x44>
 8006ae6:	4602      	mov	r2, r0
 8006ae8:	4b42      	ldr	r3, [pc, #264]	; (8006bf4 <__multiply+0x144>)
 8006aea:	4843      	ldr	r0, [pc, #268]	; (8006bf8 <__multiply+0x148>)
 8006aec:	f240 115d 	movw	r1, #349	; 0x15d
 8006af0:	f000 fd8a 	bl	8007608 <__assert_func>
 8006af4:	f100 0614 	add.w	r6, r0, #20
 8006af8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006afc:	4633      	mov	r3, r6
 8006afe:	2200      	movs	r2, #0
 8006b00:	4543      	cmp	r3, r8
 8006b02:	d31e      	bcc.n	8006b42 <__multiply+0x92>
 8006b04:	f105 0c14 	add.w	ip, r5, #20
 8006b08:	f104 0314 	add.w	r3, r4, #20
 8006b0c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006b10:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006b14:	9202      	str	r2, [sp, #8]
 8006b16:	ebac 0205 	sub.w	r2, ip, r5
 8006b1a:	3a15      	subs	r2, #21
 8006b1c:	f022 0203 	bic.w	r2, r2, #3
 8006b20:	3204      	adds	r2, #4
 8006b22:	f105 0115 	add.w	r1, r5, #21
 8006b26:	458c      	cmp	ip, r1
 8006b28:	bf38      	it	cc
 8006b2a:	2204      	movcc	r2, #4
 8006b2c:	9201      	str	r2, [sp, #4]
 8006b2e:	9a02      	ldr	r2, [sp, #8]
 8006b30:	9303      	str	r3, [sp, #12]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d808      	bhi.n	8006b48 <__multiply+0x98>
 8006b36:	2f00      	cmp	r7, #0
 8006b38:	dc55      	bgt.n	8006be6 <__multiply+0x136>
 8006b3a:	6107      	str	r7, [r0, #16]
 8006b3c:	b005      	add	sp, #20
 8006b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b42:	f843 2b04 	str.w	r2, [r3], #4
 8006b46:	e7db      	b.n	8006b00 <__multiply+0x50>
 8006b48:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b4c:	f1ba 0f00 	cmp.w	sl, #0
 8006b50:	d020      	beq.n	8006b94 <__multiply+0xe4>
 8006b52:	f105 0e14 	add.w	lr, r5, #20
 8006b56:	46b1      	mov	r9, r6
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006b5e:	f8d9 b000 	ldr.w	fp, [r9]
 8006b62:	b2a1      	uxth	r1, r4
 8006b64:	fa1f fb8b 	uxth.w	fp, fp
 8006b68:	fb0a b101 	mla	r1, sl, r1, fp
 8006b6c:	4411      	add	r1, r2
 8006b6e:	f8d9 2000 	ldr.w	r2, [r9]
 8006b72:	0c24      	lsrs	r4, r4, #16
 8006b74:	0c12      	lsrs	r2, r2, #16
 8006b76:	fb0a 2404 	mla	r4, sl, r4, r2
 8006b7a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006b7e:	b289      	uxth	r1, r1
 8006b80:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006b84:	45f4      	cmp	ip, lr
 8006b86:	f849 1b04 	str.w	r1, [r9], #4
 8006b8a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006b8e:	d8e4      	bhi.n	8006b5a <__multiply+0xaa>
 8006b90:	9901      	ldr	r1, [sp, #4]
 8006b92:	5072      	str	r2, [r6, r1]
 8006b94:	9a03      	ldr	r2, [sp, #12]
 8006b96:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ba0:	d01f      	beq.n	8006be2 <__multiply+0x132>
 8006ba2:	6834      	ldr	r4, [r6, #0]
 8006ba4:	f105 0114 	add.w	r1, r5, #20
 8006ba8:	46b6      	mov	lr, r6
 8006baa:	f04f 0a00 	mov.w	sl, #0
 8006bae:	880a      	ldrh	r2, [r1, #0]
 8006bb0:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006bb4:	fb09 b202 	mla	r2, r9, r2, fp
 8006bb8:	4492      	add	sl, r2
 8006bba:	b2a4      	uxth	r4, r4
 8006bbc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006bc0:	f84e 4b04 	str.w	r4, [lr], #4
 8006bc4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006bc8:	f8be 2000 	ldrh.w	r2, [lr]
 8006bcc:	0c24      	lsrs	r4, r4, #16
 8006bce:	fb09 2404 	mla	r4, r9, r4, r2
 8006bd2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006bd6:	458c      	cmp	ip, r1
 8006bd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006bdc:	d8e7      	bhi.n	8006bae <__multiply+0xfe>
 8006bde:	9a01      	ldr	r2, [sp, #4]
 8006be0:	50b4      	str	r4, [r6, r2]
 8006be2:	3604      	adds	r6, #4
 8006be4:	e7a3      	b.n	8006b2e <__multiply+0x7e>
 8006be6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1a5      	bne.n	8006b3a <__multiply+0x8a>
 8006bee:	3f01      	subs	r7, #1
 8006bf0:	e7a1      	b.n	8006b36 <__multiply+0x86>
 8006bf2:	bf00      	nop
 8006bf4:	080089ec 	.word	0x080089ec
 8006bf8:	08008a7c 	.word	0x08008a7c

08006bfc <__pow5mult>:
 8006bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c00:	4615      	mov	r5, r2
 8006c02:	f012 0203 	ands.w	r2, r2, #3
 8006c06:	4606      	mov	r6, r0
 8006c08:	460f      	mov	r7, r1
 8006c0a:	d007      	beq.n	8006c1c <__pow5mult+0x20>
 8006c0c:	4c25      	ldr	r4, [pc, #148]	; (8006ca4 <__pow5mult+0xa8>)
 8006c0e:	3a01      	subs	r2, #1
 8006c10:	2300      	movs	r3, #0
 8006c12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c16:	f7ff fe51 	bl	80068bc <__multadd>
 8006c1a:	4607      	mov	r7, r0
 8006c1c:	10ad      	asrs	r5, r5, #2
 8006c1e:	d03d      	beq.n	8006c9c <__pow5mult+0xa0>
 8006c20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006c22:	b97c      	cbnz	r4, 8006c44 <__pow5mult+0x48>
 8006c24:	2010      	movs	r0, #16
 8006c26:	f7ff fdbf 	bl	80067a8 <malloc>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	6270      	str	r0, [r6, #36]	; 0x24
 8006c2e:	b928      	cbnz	r0, 8006c3c <__pow5mult+0x40>
 8006c30:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <__pow5mult+0xac>)
 8006c32:	481e      	ldr	r0, [pc, #120]	; (8006cac <__pow5mult+0xb0>)
 8006c34:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006c38:	f000 fce6 	bl	8007608 <__assert_func>
 8006c3c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c40:	6004      	str	r4, [r0, #0]
 8006c42:	60c4      	str	r4, [r0, #12]
 8006c44:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006c48:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c4c:	b94c      	cbnz	r4, 8006c62 <__pow5mult+0x66>
 8006c4e:	f240 2171 	movw	r1, #625	; 0x271
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7ff ff16 	bl	8006a84 <__i2b>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c5e:	4604      	mov	r4, r0
 8006c60:	6003      	str	r3, [r0, #0]
 8006c62:	f04f 0900 	mov.w	r9, #0
 8006c66:	07eb      	lsls	r3, r5, #31
 8006c68:	d50a      	bpl.n	8006c80 <__pow5mult+0x84>
 8006c6a:	4639      	mov	r1, r7
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ff1e 	bl	8006ab0 <__multiply>
 8006c74:	4639      	mov	r1, r7
 8006c76:	4680      	mov	r8, r0
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f7ff fdfd 	bl	8006878 <_Bfree>
 8006c7e:	4647      	mov	r7, r8
 8006c80:	106d      	asrs	r5, r5, #1
 8006c82:	d00b      	beq.n	8006c9c <__pow5mult+0xa0>
 8006c84:	6820      	ldr	r0, [r4, #0]
 8006c86:	b938      	cbnz	r0, 8006c98 <__pow5mult+0x9c>
 8006c88:	4622      	mov	r2, r4
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f7ff ff0f 	bl	8006ab0 <__multiply>
 8006c92:	6020      	str	r0, [r4, #0]
 8006c94:	f8c0 9000 	str.w	r9, [r0]
 8006c98:	4604      	mov	r4, r0
 8006c9a:	e7e4      	b.n	8006c66 <__pow5mult+0x6a>
 8006c9c:	4638      	mov	r0, r7
 8006c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca2:	bf00      	nop
 8006ca4:	08008bd0 	.word	0x08008bd0
 8006ca8:	08008976 	.word	0x08008976
 8006cac:	08008a7c 	.word	0x08008a7c

08006cb0 <__lshift>:
 8006cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb4:	460c      	mov	r4, r1
 8006cb6:	6849      	ldr	r1, [r1, #4]
 8006cb8:	6923      	ldr	r3, [r4, #16]
 8006cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	4607      	mov	r7, r0
 8006cc2:	4691      	mov	r9, r2
 8006cc4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cc8:	f108 0601 	add.w	r6, r8, #1
 8006ccc:	42b3      	cmp	r3, r6
 8006cce:	db0b      	blt.n	8006ce8 <__lshift+0x38>
 8006cd0:	4638      	mov	r0, r7
 8006cd2:	f7ff fd91 	bl	80067f8 <_Balloc>
 8006cd6:	4605      	mov	r5, r0
 8006cd8:	b948      	cbnz	r0, 8006cee <__lshift+0x3e>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	4b28      	ldr	r3, [pc, #160]	; (8006d80 <__lshift+0xd0>)
 8006cde:	4829      	ldr	r0, [pc, #164]	; (8006d84 <__lshift+0xd4>)
 8006ce0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ce4:	f000 fc90 	bl	8007608 <__assert_func>
 8006ce8:	3101      	adds	r1, #1
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	e7ee      	b.n	8006ccc <__lshift+0x1c>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	f100 0114 	add.w	r1, r0, #20
 8006cf4:	f100 0210 	add.w	r2, r0, #16
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	4553      	cmp	r3, sl
 8006cfc:	db33      	blt.n	8006d66 <__lshift+0xb6>
 8006cfe:	6920      	ldr	r0, [r4, #16]
 8006d00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d04:	f104 0314 	add.w	r3, r4, #20
 8006d08:	f019 091f 	ands.w	r9, r9, #31
 8006d0c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d10:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d14:	d02b      	beq.n	8006d6e <__lshift+0xbe>
 8006d16:	f1c9 0e20 	rsb	lr, r9, #32
 8006d1a:	468a      	mov	sl, r1
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	6818      	ldr	r0, [r3, #0]
 8006d20:	fa00 f009 	lsl.w	r0, r0, r9
 8006d24:	4302      	orrs	r2, r0
 8006d26:	f84a 2b04 	str.w	r2, [sl], #4
 8006d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2e:	459c      	cmp	ip, r3
 8006d30:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d34:	d8f3      	bhi.n	8006d1e <__lshift+0x6e>
 8006d36:	ebac 0304 	sub.w	r3, ip, r4
 8006d3a:	3b15      	subs	r3, #21
 8006d3c:	f023 0303 	bic.w	r3, r3, #3
 8006d40:	3304      	adds	r3, #4
 8006d42:	f104 0015 	add.w	r0, r4, #21
 8006d46:	4584      	cmp	ip, r0
 8006d48:	bf38      	it	cc
 8006d4a:	2304      	movcc	r3, #4
 8006d4c:	50ca      	str	r2, [r1, r3]
 8006d4e:	b10a      	cbz	r2, 8006d54 <__lshift+0xa4>
 8006d50:	f108 0602 	add.w	r6, r8, #2
 8006d54:	3e01      	subs	r6, #1
 8006d56:	4638      	mov	r0, r7
 8006d58:	612e      	str	r6, [r5, #16]
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	f7ff fd8c 	bl	8006878 <_Bfree>
 8006d60:	4628      	mov	r0, r5
 8006d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d66:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	e7c5      	b.n	8006cfa <__lshift+0x4a>
 8006d6e:	3904      	subs	r1, #4
 8006d70:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d74:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d78:	459c      	cmp	ip, r3
 8006d7a:	d8f9      	bhi.n	8006d70 <__lshift+0xc0>
 8006d7c:	e7ea      	b.n	8006d54 <__lshift+0xa4>
 8006d7e:	bf00      	nop
 8006d80:	080089ec 	.word	0x080089ec
 8006d84:	08008a7c 	.word	0x08008a7c

08006d88 <__mcmp>:
 8006d88:	b530      	push	{r4, r5, lr}
 8006d8a:	6902      	ldr	r2, [r0, #16]
 8006d8c:	690c      	ldr	r4, [r1, #16]
 8006d8e:	1b12      	subs	r2, r2, r4
 8006d90:	d10e      	bne.n	8006db0 <__mcmp+0x28>
 8006d92:	f100 0314 	add.w	r3, r0, #20
 8006d96:	3114      	adds	r1, #20
 8006d98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006da0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006da4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006da8:	42a5      	cmp	r5, r4
 8006daa:	d003      	beq.n	8006db4 <__mcmp+0x2c>
 8006dac:	d305      	bcc.n	8006dba <__mcmp+0x32>
 8006dae:	2201      	movs	r2, #1
 8006db0:	4610      	mov	r0, r2
 8006db2:	bd30      	pop	{r4, r5, pc}
 8006db4:	4283      	cmp	r3, r0
 8006db6:	d3f3      	bcc.n	8006da0 <__mcmp+0x18>
 8006db8:	e7fa      	b.n	8006db0 <__mcmp+0x28>
 8006dba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006dbe:	e7f7      	b.n	8006db0 <__mcmp+0x28>

08006dc0 <__mdiff>:
 8006dc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	4611      	mov	r1, r2
 8006dca:	4620      	mov	r0, r4
 8006dcc:	4617      	mov	r7, r2
 8006dce:	f7ff ffdb 	bl	8006d88 <__mcmp>
 8006dd2:	1e05      	subs	r5, r0, #0
 8006dd4:	d110      	bne.n	8006df8 <__mdiff+0x38>
 8006dd6:	4629      	mov	r1, r5
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fd0d 	bl	80067f8 <_Balloc>
 8006dde:	b930      	cbnz	r0, 8006dee <__mdiff+0x2e>
 8006de0:	4b39      	ldr	r3, [pc, #228]	; (8006ec8 <__mdiff+0x108>)
 8006de2:	4602      	mov	r2, r0
 8006de4:	f240 2132 	movw	r1, #562	; 0x232
 8006de8:	4838      	ldr	r0, [pc, #224]	; (8006ecc <__mdiff+0x10c>)
 8006dea:	f000 fc0d 	bl	8007608 <__assert_func>
 8006dee:	2301      	movs	r3, #1
 8006df0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006df4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	bfa4      	itt	ge
 8006dfa:	463b      	movge	r3, r7
 8006dfc:	4627      	movge	r7, r4
 8006dfe:	4630      	mov	r0, r6
 8006e00:	6879      	ldr	r1, [r7, #4]
 8006e02:	bfa6      	itte	ge
 8006e04:	461c      	movge	r4, r3
 8006e06:	2500      	movge	r5, #0
 8006e08:	2501      	movlt	r5, #1
 8006e0a:	f7ff fcf5 	bl	80067f8 <_Balloc>
 8006e0e:	b920      	cbnz	r0, 8006e1a <__mdiff+0x5a>
 8006e10:	4b2d      	ldr	r3, [pc, #180]	; (8006ec8 <__mdiff+0x108>)
 8006e12:	4602      	mov	r2, r0
 8006e14:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e18:	e7e6      	b.n	8006de8 <__mdiff+0x28>
 8006e1a:	693e      	ldr	r6, [r7, #16]
 8006e1c:	60c5      	str	r5, [r0, #12]
 8006e1e:	6925      	ldr	r5, [r4, #16]
 8006e20:	f107 0114 	add.w	r1, r7, #20
 8006e24:	f104 0914 	add.w	r9, r4, #20
 8006e28:	f100 0e14 	add.w	lr, r0, #20
 8006e2c:	f107 0210 	add.w	r2, r7, #16
 8006e30:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006e34:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006e38:	46f2      	mov	sl, lr
 8006e3a:	2700      	movs	r7, #0
 8006e3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e44:	fa1f f883 	uxth.w	r8, r3
 8006e48:	fa17 f78b 	uxtah	r7, r7, fp
 8006e4c:	0c1b      	lsrs	r3, r3, #16
 8006e4e:	eba7 0808 	sub.w	r8, r7, r8
 8006e52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e5a:	fa1f f888 	uxth.w	r8, r8
 8006e5e:	141f      	asrs	r7, r3, #16
 8006e60:	454d      	cmp	r5, r9
 8006e62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e66:	f84a 3b04 	str.w	r3, [sl], #4
 8006e6a:	d8e7      	bhi.n	8006e3c <__mdiff+0x7c>
 8006e6c:	1b2b      	subs	r3, r5, r4
 8006e6e:	3b15      	subs	r3, #21
 8006e70:	f023 0303 	bic.w	r3, r3, #3
 8006e74:	3304      	adds	r3, #4
 8006e76:	3415      	adds	r4, #21
 8006e78:	42a5      	cmp	r5, r4
 8006e7a:	bf38      	it	cc
 8006e7c:	2304      	movcc	r3, #4
 8006e7e:	4419      	add	r1, r3
 8006e80:	4473      	add	r3, lr
 8006e82:	469e      	mov	lr, r3
 8006e84:	460d      	mov	r5, r1
 8006e86:	4565      	cmp	r5, ip
 8006e88:	d30e      	bcc.n	8006ea8 <__mdiff+0xe8>
 8006e8a:	f10c 0203 	add.w	r2, ip, #3
 8006e8e:	1a52      	subs	r2, r2, r1
 8006e90:	f022 0203 	bic.w	r2, r2, #3
 8006e94:	3903      	subs	r1, #3
 8006e96:	458c      	cmp	ip, r1
 8006e98:	bf38      	it	cc
 8006e9a:	2200      	movcc	r2, #0
 8006e9c:	441a      	add	r2, r3
 8006e9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006ea2:	b17b      	cbz	r3, 8006ec4 <__mdiff+0x104>
 8006ea4:	6106      	str	r6, [r0, #16]
 8006ea6:	e7a5      	b.n	8006df4 <__mdiff+0x34>
 8006ea8:	f855 8b04 	ldr.w	r8, [r5], #4
 8006eac:	fa17 f488 	uxtah	r4, r7, r8
 8006eb0:	1422      	asrs	r2, r4, #16
 8006eb2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006eb6:	b2a4      	uxth	r4, r4
 8006eb8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ebc:	f84e 4b04 	str.w	r4, [lr], #4
 8006ec0:	1417      	asrs	r7, r2, #16
 8006ec2:	e7e0      	b.n	8006e86 <__mdiff+0xc6>
 8006ec4:	3e01      	subs	r6, #1
 8006ec6:	e7ea      	b.n	8006e9e <__mdiff+0xde>
 8006ec8:	080089ec 	.word	0x080089ec
 8006ecc:	08008a7c 	.word	0x08008a7c

08006ed0 <__ulp>:
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	ed8d 0b00 	vstr	d0, [sp]
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	4912      	ldr	r1, [pc, #72]	; (8006f24 <__ulp+0x54>)
 8006eda:	4019      	ands	r1, r3
 8006edc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006ee0:	2900      	cmp	r1, #0
 8006ee2:	dd05      	ble.n	8006ef0 <__ulp+0x20>
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	ec43 2b10 	vmov	d0, r2, r3
 8006eec:	b002      	add	sp, #8
 8006eee:	4770      	bx	lr
 8006ef0:	4249      	negs	r1, r1
 8006ef2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006ef6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006efa:	f04f 0200 	mov.w	r2, #0
 8006efe:	f04f 0300 	mov.w	r3, #0
 8006f02:	da04      	bge.n	8006f0e <__ulp+0x3e>
 8006f04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006f08:	fa41 f300 	asr.w	r3, r1, r0
 8006f0c:	e7ec      	b.n	8006ee8 <__ulp+0x18>
 8006f0e:	f1a0 0114 	sub.w	r1, r0, #20
 8006f12:	291e      	cmp	r1, #30
 8006f14:	bfda      	itte	le
 8006f16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006f1a:	fa20 f101 	lsrle.w	r1, r0, r1
 8006f1e:	2101      	movgt	r1, #1
 8006f20:	460a      	mov	r2, r1
 8006f22:	e7e1      	b.n	8006ee8 <__ulp+0x18>
 8006f24:	7ff00000 	.word	0x7ff00000

08006f28 <__b2d>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	6905      	ldr	r5, [r0, #16]
 8006f2c:	f100 0714 	add.w	r7, r0, #20
 8006f30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006f34:	1f2e      	subs	r6, r5, #4
 8006f36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7ff fd52 	bl	80069e4 <__hi0bits>
 8006f40:	f1c0 0320 	rsb	r3, r0, #32
 8006f44:	280a      	cmp	r0, #10
 8006f46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006fc4 <__b2d+0x9c>
 8006f4a:	600b      	str	r3, [r1, #0]
 8006f4c:	dc14      	bgt.n	8006f78 <__b2d+0x50>
 8006f4e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006f52:	fa24 f10e 	lsr.w	r1, r4, lr
 8006f56:	42b7      	cmp	r7, r6
 8006f58:	ea41 030c 	orr.w	r3, r1, ip
 8006f5c:	bf34      	ite	cc
 8006f5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f62:	2100      	movcs	r1, #0
 8006f64:	3015      	adds	r0, #21
 8006f66:	fa04 f000 	lsl.w	r0, r4, r0
 8006f6a:	fa21 f10e 	lsr.w	r1, r1, lr
 8006f6e:	ea40 0201 	orr.w	r2, r0, r1
 8006f72:	ec43 2b10 	vmov	d0, r2, r3
 8006f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f78:	42b7      	cmp	r7, r6
 8006f7a:	bf3a      	itte	cc
 8006f7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006f80:	f1a5 0608 	subcc.w	r6, r5, #8
 8006f84:	2100      	movcs	r1, #0
 8006f86:	380b      	subs	r0, #11
 8006f88:	d017      	beq.n	8006fba <__b2d+0x92>
 8006f8a:	f1c0 0c20 	rsb	ip, r0, #32
 8006f8e:	fa04 f500 	lsl.w	r5, r4, r0
 8006f92:	42be      	cmp	r6, r7
 8006f94:	fa21 f40c 	lsr.w	r4, r1, ip
 8006f98:	ea45 0504 	orr.w	r5, r5, r4
 8006f9c:	bf8c      	ite	hi
 8006f9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006fa2:	2400      	movls	r4, #0
 8006fa4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006fa8:	fa01 f000 	lsl.w	r0, r1, r0
 8006fac:	fa24 f40c 	lsr.w	r4, r4, ip
 8006fb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006fb4:	ea40 0204 	orr.w	r2, r0, r4
 8006fb8:	e7db      	b.n	8006f72 <__b2d+0x4a>
 8006fba:	ea44 030c 	orr.w	r3, r4, ip
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	e7d7      	b.n	8006f72 <__b2d+0x4a>
 8006fc2:	bf00      	nop
 8006fc4:	3ff00000 	.word	0x3ff00000

08006fc8 <__d2b>:
 8006fc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006fcc:	4689      	mov	r9, r1
 8006fce:	2101      	movs	r1, #1
 8006fd0:	ec57 6b10 	vmov	r6, r7, d0
 8006fd4:	4690      	mov	r8, r2
 8006fd6:	f7ff fc0f 	bl	80067f8 <_Balloc>
 8006fda:	4604      	mov	r4, r0
 8006fdc:	b930      	cbnz	r0, 8006fec <__d2b+0x24>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b25      	ldr	r3, [pc, #148]	; (8007078 <__d2b+0xb0>)
 8006fe2:	4826      	ldr	r0, [pc, #152]	; (800707c <__d2b+0xb4>)
 8006fe4:	f240 310a 	movw	r1, #778	; 0x30a
 8006fe8:	f000 fb0e 	bl	8007608 <__assert_func>
 8006fec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ff0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ff4:	bb35      	cbnz	r5, 8007044 <__d2b+0x7c>
 8006ff6:	2e00      	cmp	r6, #0
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	d028      	beq.n	800704e <__d2b+0x86>
 8006ffc:	4668      	mov	r0, sp
 8006ffe:	9600      	str	r6, [sp, #0]
 8007000:	f7ff fd10 	bl	8006a24 <__lo0bits>
 8007004:	9900      	ldr	r1, [sp, #0]
 8007006:	b300      	cbz	r0, 800704a <__d2b+0x82>
 8007008:	9a01      	ldr	r2, [sp, #4]
 800700a:	f1c0 0320 	rsb	r3, r0, #32
 800700e:	fa02 f303 	lsl.w	r3, r2, r3
 8007012:	430b      	orrs	r3, r1
 8007014:	40c2      	lsrs	r2, r0
 8007016:	6163      	str	r3, [r4, #20]
 8007018:	9201      	str	r2, [sp, #4]
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	61a3      	str	r3, [r4, #24]
 800701e:	2b00      	cmp	r3, #0
 8007020:	bf14      	ite	ne
 8007022:	2202      	movne	r2, #2
 8007024:	2201      	moveq	r2, #1
 8007026:	6122      	str	r2, [r4, #16]
 8007028:	b1d5      	cbz	r5, 8007060 <__d2b+0x98>
 800702a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800702e:	4405      	add	r5, r0
 8007030:	f8c9 5000 	str.w	r5, [r9]
 8007034:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007038:	f8c8 0000 	str.w	r0, [r8]
 800703c:	4620      	mov	r0, r4
 800703e:	b003      	add	sp, #12
 8007040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007044:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007048:	e7d5      	b.n	8006ff6 <__d2b+0x2e>
 800704a:	6161      	str	r1, [r4, #20]
 800704c:	e7e5      	b.n	800701a <__d2b+0x52>
 800704e:	a801      	add	r0, sp, #4
 8007050:	f7ff fce8 	bl	8006a24 <__lo0bits>
 8007054:	9b01      	ldr	r3, [sp, #4]
 8007056:	6163      	str	r3, [r4, #20]
 8007058:	2201      	movs	r2, #1
 800705a:	6122      	str	r2, [r4, #16]
 800705c:	3020      	adds	r0, #32
 800705e:	e7e3      	b.n	8007028 <__d2b+0x60>
 8007060:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007064:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007068:	f8c9 0000 	str.w	r0, [r9]
 800706c:	6918      	ldr	r0, [r3, #16]
 800706e:	f7ff fcb9 	bl	80069e4 <__hi0bits>
 8007072:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007076:	e7df      	b.n	8007038 <__d2b+0x70>
 8007078:	080089ec 	.word	0x080089ec
 800707c:	08008a7c 	.word	0x08008a7c

08007080 <__ratio>:
 8007080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	4688      	mov	r8, r1
 8007086:	4669      	mov	r1, sp
 8007088:	4681      	mov	r9, r0
 800708a:	f7ff ff4d 	bl	8006f28 <__b2d>
 800708e:	a901      	add	r1, sp, #4
 8007090:	4640      	mov	r0, r8
 8007092:	ec55 4b10 	vmov	r4, r5, d0
 8007096:	f7ff ff47 	bl	8006f28 <__b2d>
 800709a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800709e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80070a2:	eba3 0c02 	sub.w	ip, r3, r2
 80070a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80070b0:	ec51 0b10 	vmov	r0, r1, d0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfd6      	itet	le
 80070b8:	460a      	movle	r2, r1
 80070ba:	462a      	movgt	r2, r5
 80070bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80070c0:	468b      	mov	fp, r1
 80070c2:	462f      	mov	r7, r5
 80070c4:	bfd4      	ite	le
 80070c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80070ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80070ce:	4620      	mov	r0, r4
 80070d0:	ee10 2a10 	vmov	r2, s0
 80070d4:	465b      	mov	r3, fp
 80070d6:	4639      	mov	r1, r7
 80070d8:	f7f9 fbb8 	bl	800084c <__aeabi_ddiv>
 80070dc:	ec41 0b10 	vmov	d0, r0, r1
 80070e0:	b003      	add	sp, #12
 80070e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070e6 <__copybits>:
 80070e6:	3901      	subs	r1, #1
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	1149      	asrs	r1, r1, #5
 80070ec:	6914      	ldr	r4, [r2, #16]
 80070ee:	3101      	adds	r1, #1
 80070f0:	f102 0314 	add.w	r3, r2, #20
 80070f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070fc:	1f05      	subs	r5, r0, #4
 80070fe:	42a3      	cmp	r3, r4
 8007100:	d30c      	bcc.n	800711c <__copybits+0x36>
 8007102:	1aa3      	subs	r3, r4, r2
 8007104:	3b11      	subs	r3, #17
 8007106:	f023 0303 	bic.w	r3, r3, #3
 800710a:	3211      	adds	r2, #17
 800710c:	42a2      	cmp	r2, r4
 800710e:	bf88      	it	hi
 8007110:	2300      	movhi	r3, #0
 8007112:	4418      	add	r0, r3
 8007114:	2300      	movs	r3, #0
 8007116:	4288      	cmp	r0, r1
 8007118:	d305      	bcc.n	8007126 <__copybits+0x40>
 800711a:	bd70      	pop	{r4, r5, r6, pc}
 800711c:	f853 6b04 	ldr.w	r6, [r3], #4
 8007120:	f845 6f04 	str.w	r6, [r5, #4]!
 8007124:	e7eb      	b.n	80070fe <__copybits+0x18>
 8007126:	f840 3b04 	str.w	r3, [r0], #4
 800712a:	e7f4      	b.n	8007116 <__copybits+0x30>

0800712c <__any_on>:
 800712c:	f100 0214 	add.w	r2, r0, #20
 8007130:	6900      	ldr	r0, [r0, #16]
 8007132:	114b      	asrs	r3, r1, #5
 8007134:	4298      	cmp	r0, r3
 8007136:	b510      	push	{r4, lr}
 8007138:	db11      	blt.n	800715e <__any_on+0x32>
 800713a:	dd0a      	ble.n	8007152 <__any_on+0x26>
 800713c:	f011 011f 	ands.w	r1, r1, #31
 8007140:	d007      	beq.n	8007152 <__any_on+0x26>
 8007142:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007146:	fa24 f001 	lsr.w	r0, r4, r1
 800714a:	fa00 f101 	lsl.w	r1, r0, r1
 800714e:	428c      	cmp	r4, r1
 8007150:	d10b      	bne.n	800716a <__any_on+0x3e>
 8007152:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007156:	4293      	cmp	r3, r2
 8007158:	d803      	bhi.n	8007162 <__any_on+0x36>
 800715a:	2000      	movs	r0, #0
 800715c:	bd10      	pop	{r4, pc}
 800715e:	4603      	mov	r3, r0
 8007160:	e7f7      	b.n	8007152 <__any_on+0x26>
 8007162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007166:	2900      	cmp	r1, #0
 8007168:	d0f5      	beq.n	8007156 <__any_on+0x2a>
 800716a:	2001      	movs	r0, #1
 800716c:	e7f6      	b.n	800715c <__any_on+0x30>

0800716e <_calloc_r>:
 800716e:	b513      	push	{r0, r1, r4, lr}
 8007170:	434a      	muls	r2, r1
 8007172:	4611      	mov	r1, r2
 8007174:	9201      	str	r2, [sp, #4]
 8007176:	f000 f859 	bl	800722c <_malloc_r>
 800717a:	4604      	mov	r4, r0
 800717c:	b118      	cbz	r0, 8007186 <_calloc_r+0x18>
 800717e:	9a01      	ldr	r2, [sp, #4]
 8007180:	2100      	movs	r1, #0
 8007182:	f7fc fbc9 	bl	8003918 <memset>
 8007186:	4620      	mov	r0, r4
 8007188:	b002      	add	sp, #8
 800718a:	bd10      	pop	{r4, pc}

0800718c <_free_r>:
 800718c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800718e:	2900      	cmp	r1, #0
 8007190:	d048      	beq.n	8007224 <_free_r+0x98>
 8007192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007196:	9001      	str	r0, [sp, #4]
 8007198:	2b00      	cmp	r3, #0
 800719a:	f1a1 0404 	sub.w	r4, r1, #4
 800719e:	bfb8      	it	lt
 80071a0:	18e4      	addlt	r4, r4, r3
 80071a2:	f000 fa7b 	bl	800769c <__malloc_lock>
 80071a6:	4a20      	ldr	r2, [pc, #128]	; (8007228 <_free_r+0x9c>)
 80071a8:	9801      	ldr	r0, [sp, #4]
 80071aa:	6813      	ldr	r3, [r2, #0]
 80071ac:	4615      	mov	r5, r2
 80071ae:	b933      	cbnz	r3, 80071be <_free_r+0x32>
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	6014      	str	r4, [r2, #0]
 80071b4:	b003      	add	sp, #12
 80071b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ba:	f000 ba75 	b.w	80076a8 <__malloc_unlock>
 80071be:	42a3      	cmp	r3, r4
 80071c0:	d90b      	bls.n	80071da <_free_r+0x4e>
 80071c2:	6821      	ldr	r1, [r4, #0]
 80071c4:	1862      	adds	r2, r4, r1
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bf04      	itt	eq
 80071ca:	681a      	ldreq	r2, [r3, #0]
 80071cc:	685b      	ldreq	r3, [r3, #4]
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	bf04      	itt	eq
 80071d2:	1852      	addeq	r2, r2, r1
 80071d4:	6022      	streq	r2, [r4, #0]
 80071d6:	602c      	str	r4, [r5, #0]
 80071d8:	e7ec      	b.n	80071b4 <_free_r+0x28>
 80071da:	461a      	mov	r2, r3
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	b10b      	cbz	r3, 80071e4 <_free_r+0x58>
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d9fa      	bls.n	80071da <_free_r+0x4e>
 80071e4:	6811      	ldr	r1, [r2, #0]
 80071e6:	1855      	adds	r5, r2, r1
 80071e8:	42a5      	cmp	r5, r4
 80071ea:	d10b      	bne.n	8007204 <_free_r+0x78>
 80071ec:	6824      	ldr	r4, [r4, #0]
 80071ee:	4421      	add	r1, r4
 80071f0:	1854      	adds	r4, r2, r1
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6011      	str	r1, [r2, #0]
 80071f6:	d1dd      	bne.n	80071b4 <_free_r+0x28>
 80071f8:	681c      	ldr	r4, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	6053      	str	r3, [r2, #4]
 80071fe:	4421      	add	r1, r4
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	e7d7      	b.n	80071b4 <_free_r+0x28>
 8007204:	d902      	bls.n	800720c <_free_r+0x80>
 8007206:	230c      	movs	r3, #12
 8007208:	6003      	str	r3, [r0, #0]
 800720a:	e7d3      	b.n	80071b4 <_free_r+0x28>
 800720c:	6825      	ldr	r5, [r4, #0]
 800720e:	1961      	adds	r1, r4, r5
 8007210:	428b      	cmp	r3, r1
 8007212:	bf04      	itt	eq
 8007214:	6819      	ldreq	r1, [r3, #0]
 8007216:	685b      	ldreq	r3, [r3, #4]
 8007218:	6063      	str	r3, [r4, #4]
 800721a:	bf04      	itt	eq
 800721c:	1949      	addeq	r1, r1, r5
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	6054      	str	r4, [r2, #4]
 8007222:	e7c7      	b.n	80071b4 <_free_r+0x28>
 8007224:	b003      	add	sp, #12
 8007226:	bd30      	pop	{r4, r5, pc}
 8007228:	20000418 	.word	0x20000418

0800722c <_malloc_r>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	1ccd      	adds	r5, r1, #3
 8007230:	f025 0503 	bic.w	r5, r5, #3
 8007234:	3508      	adds	r5, #8
 8007236:	2d0c      	cmp	r5, #12
 8007238:	bf38      	it	cc
 800723a:	250c      	movcc	r5, #12
 800723c:	2d00      	cmp	r5, #0
 800723e:	4606      	mov	r6, r0
 8007240:	db01      	blt.n	8007246 <_malloc_r+0x1a>
 8007242:	42a9      	cmp	r1, r5
 8007244:	d903      	bls.n	800724e <_malloc_r+0x22>
 8007246:	230c      	movs	r3, #12
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	2000      	movs	r0, #0
 800724c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800724e:	f000 fa25 	bl	800769c <__malloc_lock>
 8007252:	4921      	ldr	r1, [pc, #132]	; (80072d8 <_malloc_r+0xac>)
 8007254:	680a      	ldr	r2, [r1, #0]
 8007256:	4614      	mov	r4, r2
 8007258:	b99c      	cbnz	r4, 8007282 <_malloc_r+0x56>
 800725a:	4f20      	ldr	r7, [pc, #128]	; (80072dc <_malloc_r+0xb0>)
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	b923      	cbnz	r3, 800726a <_malloc_r+0x3e>
 8007260:	4621      	mov	r1, r4
 8007262:	4630      	mov	r0, r6
 8007264:	f000 f9a0 	bl	80075a8 <_sbrk_r>
 8007268:	6038      	str	r0, [r7, #0]
 800726a:	4629      	mov	r1, r5
 800726c:	4630      	mov	r0, r6
 800726e:	f000 f99b 	bl	80075a8 <_sbrk_r>
 8007272:	1c43      	adds	r3, r0, #1
 8007274:	d123      	bne.n	80072be <_malloc_r+0x92>
 8007276:	230c      	movs	r3, #12
 8007278:	6033      	str	r3, [r6, #0]
 800727a:	4630      	mov	r0, r6
 800727c:	f000 fa14 	bl	80076a8 <__malloc_unlock>
 8007280:	e7e3      	b.n	800724a <_malloc_r+0x1e>
 8007282:	6823      	ldr	r3, [r4, #0]
 8007284:	1b5b      	subs	r3, r3, r5
 8007286:	d417      	bmi.n	80072b8 <_malloc_r+0x8c>
 8007288:	2b0b      	cmp	r3, #11
 800728a:	d903      	bls.n	8007294 <_malloc_r+0x68>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	441c      	add	r4, r3
 8007290:	6025      	str	r5, [r4, #0]
 8007292:	e004      	b.n	800729e <_malloc_r+0x72>
 8007294:	6863      	ldr	r3, [r4, #4]
 8007296:	42a2      	cmp	r2, r4
 8007298:	bf0c      	ite	eq
 800729a:	600b      	streq	r3, [r1, #0]
 800729c:	6053      	strne	r3, [r2, #4]
 800729e:	4630      	mov	r0, r6
 80072a0:	f000 fa02 	bl	80076a8 <__malloc_unlock>
 80072a4:	f104 000b 	add.w	r0, r4, #11
 80072a8:	1d23      	adds	r3, r4, #4
 80072aa:	f020 0007 	bic.w	r0, r0, #7
 80072ae:	1ac2      	subs	r2, r0, r3
 80072b0:	d0cc      	beq.n	800724c <_malloc_r+0x20>
 80072b2:	1a1b      	subs	r3, r3, r0
 80072b4:	50a3      	str	r3, [r4, r2]
 80072b6:	e7c9      	b.n	800724c <_malloc_r+0x20>
 80072b8:	4622      	mov	r2, r4
 80072ba:	6864      	ldr	r4, [r4, #4]
 80072bc:	e7cc      	b.n	8007258 <_malloc_r+0x2c>
 80072be:	1cc4      	adds	r4, r0, #3
 80072c0:	f024 0403 	bic.w	r4, r4, #3
 80072c4:	42a0      	cmp	r0, r4
 80072c6:	d0e3      	beq.n	8007290 <_malloc_r+0x64>
 80072c8:	1a21      	subs	r1, r4, r0
 80072ca:	4630      	mov	r0, r6
 80072cc:	f000 f96c 	bl	80075a8 <_sbrk_r>
 80072d0:	3001      	adds	r0, #1
 80072d2:	d1dd      	bne.n	8007290 <_malloc_r+0x64>
 80072d4:	e7cf      	b.n	8007276 <_malloc_r+0x4a>
 80072d6:	bf00      	nop
 80072d8:	20000418 	.word	0x20000418
 80072dc:	2000041c 	.word	0x2000041c

080072e0 <__ssputs_r>:
 80072e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e4:	688e      	ldr	r6, [r1, #8]
 80072e6:	429e      	cmp	r6, r3
 80072e8:	4682      	mov	sl, r0
 80072ea:	460c      	mov	r4, r1
 80072ec:	4690      	mov	r8, r2
 80072ee:	461f      	mov	r7, r3
 80072f0:	d838      	bhi.n	8007364 <__ssputs_r+0x84>
 80072f2:	898a      	ldrh	r2, [r1, #12]
 80072f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80072f8:	d032      	beq.n	8007360 <__ssputs_r+0x80>
 80072fa:	6825      	ldr	r5, [r4, #0]
 80072fc:	6909      	ldr	r1, [r1, #16]
 80072fe:	eba5 0901 	sub.w	r9, r5, r1
 8007302:	6965      	ldr	r5, [r4, #20]
 8007304:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007308:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800730c:	3301      	adds	r3, #1
 800730e:	444b      	add	r3, r9
 8007310:	106d      	asrs	r5, r5, #1
 8007312:	429d      	cmp	r5, r3
 8007314:	bf38      	it	cc
 8007316:	461d      	movcc	r5, r3
 8007318:	0553      	lsls	r3, r2, #21
 800731a:	d531      	bpl.n	8007380 <__ssputs_r+0xa0>
 800731c:	4629      	mov	r1, r5
 800731e:	f7ff ff85 	bl	800722c <_malloc_r>
 8007322:	4606      	mov	r6, r0
 8007324:	b950      	cbnz	r0, 800733c <__ssputs_r+0x5c>
 8007326:	230c      	movs	r3, #12
 8007328:	f8ca 3000 	str.w	r3, [sl]
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007332:	81a3      	strh	r3, [r4, #12]
 8007334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800733c:	6921      	ldr	r1, [r4, #16]
 800733e:	464a      	mov	r2, r9
 8007340:	f7ff fa4c 	bl	80067dc <memcpy>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800734a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800734e:	81a3      	strh	r3, [r4, #12]
 8007350:	6126      	str	r6, [r4, #16]
 8007352:	6165      	str	r5, [r4, #20]
 8007354:	444e      	add	r6, r9
 8007356:	eba5 0509 	sub.w	r5, r5, r9
 800735a:	6026      	str	r6, [r4, #0]
 800735c:	60a5      	str	r5, [r4, #8]
 800735e:	463e      	mov	r6, r7
 8007360:	42be      	cmp	r6, r7
 8007362:	d900      	bls.n	8007366 <__ssputs_r+0x86>
 8007364:	463e      	mov	r6, r7
 8007366:	4632      	mov	r2, r6
 8007368:	6820      	ldr	r0, [r4, #0]
 800736a:	4641      	mov	r1, r8
 800736c:	f000 f97c 	bl	8007668 <memmove>
 8007370:	68a3      	ldr	r3, [r4, #8]
 8007372:	6822      	ldr	r2, [r4, #0]
 8007374:	1b9b      	subs	r3, r3, r6
 8007376:	4432      	add	r2, r6
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	6022      	str	r2, [r4, #0]
 800737c:	2000      	movs	r0, #0
 800737e:	e7db      	b.n	8007338 <__ssputs_r+0x58>
 8007380:	462a      	mov	r2, r5
 8007382:	f000 f997 	bl	80076b4 <_realloc_r>
 8007386:	4606      	mov	r6, r0
 8007388:	2800      	cmp	r0, #0
 800738a:	d1e1      	bne.n	8007350 <__ssputs_r+0x70>
 800738c:	6921      	ldr	r1, [r4, #16]
 800738e:	4650      	mov	r0, sl
 8007390:	f7ff fefc 	bl	800718c <_free_r>
 8007394:	e7c7      	b.n	8007326 <__ssputs_r+0x46>
	...

08007398 <_svfiprintf_r>:
 8007398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800739c:	4698      	mov	r8, r3
 800739e:	898b      	ldrh	r3, [r1, #12]
 80073a0:	061b      	lsls	r3, r3, #24
 80073a2:	b09d      	sub	sp, #116	; 0x74
 80073a4:	4607      	mov	r7, r0
 80073a6:	460d      	mov	r5, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	d50e      	bpl.n	80073ca <_svfiprintf_r+0x32>
 80073ac:	690b      	ldr	r3, [r1, #16]
 80073ae:	b963      	cbnz	r3, 80073ca <_svfiprintf_r+0x32>
 80073b0:	2140      	movs	r1, #64	; 0x40
 80073b2:	f7ff ff3b 	bl	800722c <_malloc_r>
 80073b6:	6028      	str	r0, [r5, #0]
 80073b8:	6128      	str	r0, [r5, #16]
 80073ba:	b920      	cbnz	r0, 80073c6 <_svfiprintf_r+0x2e>
 80073bc:	230c      	movs	r3, #12
 80073be:	603b      	str	r3, [r7, #0]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80073c4:	e0d1      	b.n	800756a <_svfiprintf_r+0x1d2>
 80073c6:	2340      	movs	r3, #64	; 0x40
 80073c8:	616b      	str	r3, [r5, #20]
 80073ca:	2300      	movs	r3, #0
 80073cc:	9309      	str	r3, [sp, #36]	; 0x24
 80073ce:	2320      	movs	r3, #32
 80073d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80073d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80073d8:	2330      	movs	r3, #48	; 0x30
 80073da:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007584 <_svfiprintf_r+0x1ec>
 80073de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80073e2:	f04f 0901 	mov.w	r9, #1
 80073e6:	4623      	mov	r3, r4
 80073e8:	469a      	mov	sl, r3
 80073ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80073ee:	b10a      	cbz	r2, 80073f4 <_svfiprintf_r+0x5c>
 80073f0:	2a25      	cmp	r2, #37	; 0x25
 80073f2:	d1f9      	bne.n	80073e8 <_svfiprintf_r+0x50>
 80073f4:	ebba 0b04 	subs.w	fp, sl, r4
 80073f8:	d00b      	beq.n	8007412 <_svfiprintf_r+0x7a>
 80073fa:	465b      	mov	r3, fp
 80073fc:	4622      	mov	r2, r4
 80073fe:	4629      	mov	r1, r5
 8007400:	4638      	mov	r0, r7
 8007402:	f7ff ff6d 	bl	80072e0 <__ssputs_r>
 8007406:	3001      	adds	r0, #1
 8007408:	f000 80aa 	beq.w	8007560 <_svfiprintf_r+0x1c8>
 800740c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800740e:	445a      	add	r2, fp
 8007410:	9209      	str	r2, [sp, #36]	; 0x24
 8007412:	f89a 3000 	ldrb.w	r3, [sl]
 8007416:	2b00      	cmp	r3, #0
 8007418:	f000 80a2 	beq.w	8007560 <_svfiprintf_r+0x1c8>
 800741c:	2300      	movs	r3, #0
 800741e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007422:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007426:	f10a 0a01 	add.w	sl, sl, #1
 800742a:	9304      	str	r3, [sp, #16]
 800742c:	9307      	str	r3, [sp, #28]
 800742e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007432:	931a      	str	r3, [sp, #104]	; 0x68
 8007434:	4654      	mov	r4, sl
 8007436:	2205      	movs	r2, #5
 8007438:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743c:	4851      	ldr	r0, [pc, #324]	; (8007584 <_svfiprintf_r+0x1ec>)
 800743e:	f7f8 fecf 	bl	80001e0 <memchr>
 8007442:	9a04      	ldr	r2, [sp, #16]
 8007444:	b9d8      	cbnz	r0, 800747e <_svfiprintf_r+0xe6>
 8007446:	06d0      	lsls	r0, r2, #27
 8007448:	bf44      	itt	mi
 800744a:	2320      	movmi	r3, #32
 800744c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007450:	0711      	lsls	r1, r2, #28
 8007452:	bf44      	itt	mi
 8007454:	232b      	movmi	r3, #43	; 0x2b
 8007456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800745a:	f89a 3000 	ldrb.w	r3, [sl]
 800745e:	2b2a      	cmp	r3, #42	; 0x2a
 8007460:	d015      	beq.n	800748e <_svfiprintf_r+0xf6>
 8007462:	9a07      	ldr	r2, [sp, #28]
 8007464:	4654      	mov	r4, sl
 8007466:	2000      	movs	r0, #0
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	4621      	mov	r1, r4
 800746e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007472:	3b30      	subs	r3, #48	; 0x30
 8007474:	2b09      	cmp	r3, #9
 8007476:	d94e      	bls.n	8007516 <_svfiprintf_r+0x17e>
 8007478:	b1b0      	cbz	r0, 80074a8 <_svfiprintf_r+0x110>
 800747a:	9207      	str	r2, [sp, #28]
 800747c:	e014      	b.n	80074a8 <_svfiprintf_r+0x110>
 800747e:	eba0 0308 	sub.w	r3, r0, r8
 8007482:	fa09 f303 	lsl.w	r3, r9, r3
 8007486:	4313      	orrs	r3, r2
 8007488:	9304      	str	r3, [sp, #16]
 800748a:	46a2      	mov	sl, r4
 800748c:	e7d2      	b.n	8007434 <_svfiprintf_r+0x9c>
 800748e:	9b03      	ldr	r3, [sp, #12]
 8007490:	1d19      	adds	r1, r3, #4
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	9103      	str	r1, [sp, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	bfbb      	ittet	lt
 800749a:	425b      	neglt	r3, r3
 800749c:	f042 0202 	orrlt.w	r2, r2, #2
 80074a0:	9307      	strge	r3, [sp, #28]
 80074a2:	9307      	strlt	r3, [sp, #28]
 80074a4:	bfb8      	it	lt
 80074a6:	9204      	strlt	r2, [sp, #16]
 80074a8:	7823      	ldrb	r3, [r4, #0]
 80074aa:	2b2e      	cmp	r3, #46	; 0x2e
 80074ac:	d10c      	bne.n	80074c8 <_svfiprintf_r+0x130>
 80074ae:	7863      	ldrb	r3, [r4, #1]
 80074b0:	2b2a      	cmp	r3, #42	; 0x2a
 80074b2:	d135      	bne.n	8007520 <_svfiprintf_r+0x188>
 80074b4:	9b03      	ldr	r3, [sp, #12]
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	9203      	str	r2, [sp, #12]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	bfb8      	it	lt
 80074c0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80074c4:	3402      	adds	r4, #2
 80074c6:	9305      	str	r3, [sp, #20]
 80074c8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007594 <_svfiprintf_r+0x1fc>
 80074cc:	7821      	ldrb	r1, [r4, #0]
 80074ce:	2203      	movs	r2, #3
 80074d0:	4650      	mov	r0, sl
 80074d2:	f7f8 fe85 	bl	80001e0 <memchr>
 80074d6:	b140      	cbz	r0, 80074ea <_svfiprintf_r+0x152>
 80074d8:	2340      	movs	r3, #64	; 0x40
 80074da:	eba0 000a 	sub.w	r0, r0, sl
 80074de:	fa03 f000 	lsl.w	r0, r3, r0
 80074e2:	9b04      	ldr	r3, [sp, #16]
 80074e4:	4303      	orrs	r3, r0
 80074e6:	3401      	adds	r4, #1
 80074e8:	9304      	str	r3, [sp, #16]
 80074ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ee:	4826      	ldr	r0, [pc, #152]	; (8007588 <_svfiprintf_r+0x1f0>)
 80074f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80074f4:	2206      	movs	r2, #6
 80074f6:	f7f8 fe73 	bl	80001e0 <memchr>
 80074fa:	2800      	cmp	r0, #0
 80074fc:	d038      	beq.n	8007570 <_svfiprintf_r+0x1d8>
 80074fe:	4b23      	ldr	r3, [pc, #140]	; (800758c <_svfiprintf_r+0x1f4>)
 8007500:	bb1b      	cbnz	r3, 800754a <_svfiprintf_r+0x1b2>
 8007502:	9b03      	ldr	r3, [sp, #12]
 8007504:	3307      	adds	r3, #7
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	3308      	adds	r3, #8
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007510:	4433      	add	r3, r6
 8007512:	9309      	str	r3, [sp, #36]	; 0x24
 8007514:	e767      	b.n	80073e6 <_svfiprintf_r+0x4e>
 8007516:	fb0c 3202 	mla	r2, ip, r2, r3
 800751a:	460c      	mov	r4, r1
 800751c:	2001      	movs	r0, #1
 800751e:	e7a5      	b.n	800746c <_svfiprintf_r+0xd4>
 8007520:	2300      	movs	r3, #0
 8007522:	3401      	adds	r4, #1
 8007524:	9305      	str	r3, [sp, #20]
 8007526:	4619      	mov	r1, r3
 8007528:	f04f 0c0a 	mov.w	ip, #10
 800752c:	4620      	mov	r0, r4
 800752e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007532:	3a30      	subs	r2, #48	; 0x30
 8007534:	2a09      	cmp	r2, #9
 8007536:	d903      	bls.n	8007540 <_svfiprintf_r+0x1a8>
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0c5      	beq.n	80074c8 <_svfiprintf_r+0x130>
 800753c:	9105      	str	r1, [sp, #20]
 800753e:	e7c3      	b.n	80074c8 <_svfiprintf_r+0x130>
 8007540:	fb0c 2101 	mla	r1, ip, r1, r2
 8007544:	4604      	mov	r4, r0
 8007546:	2301      	movs	r3, #1
 8007548:	e7f0      	b.n	800752c <_svfiprintf_r+0x194>
 800754a:	ab03      	add	r3, sp, #12
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	462a      	mov	r2, r5
 8007550:	4b0f      	ldr	r3, [pc, #60]	; (8007590 <_svfiprintf_r+0x1f8>)
 8007552:	a904      	add	r1, sp, #16
 8007554:	4638      	mov	r0, r7
 8007556:	f7fc fa87 	bl	8003a68 <_printf_float>
 800755a:	1c42      	adds	r2, r0, #1
 800755c:	4606      	mov	r6, r0
 800755e:	d1d6      	bne.n	800750e <_svfiprintf_r+0x176>
 8007560:	89ab      	ldrh	r3, [r5, #12]
 8007562:	065b      	lsls	r3, r3, #25
 8007564:	f53f af2c 	bmi.w	80073c0 <_svfiprintf_r+0x28>
 8007568:	9809      	ldr	r0, [sp, #36]	; 0x24
 800756a:	b01d      	add	sp, #116	; 0x74
 800756c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007570:	ab03      	add	r3, sp, #12
 8007572:	9300      	str	r3, [sp, #0]
 8007574:	462a      	mov	r2, r5
 8007576:	4b06      	ldr	r3, [pc, #24]	; (8007590 <_svfiprintf_r+0x1f8>)
 8007578:	a904      	add	r1, sp, #16
 800757a:	4638      	mov	r0, r7
 800757c:	f7fc fd18 	bl	8003fb0 <_printf_i>
 8007580:	e7eb      	b.n	800755a <_svfiprintf_r+0x1c2>
 8007582:	bf00      	nop
 8007584:	08008bdc 	.word	0x08008bdc
 8007588:	08008be6 	.word	0x08008be6
 800758c:	08003a69 	.word	0x08003a69
 8007590:	080072e1 	.word	0x080072e1
 8007594:	08008be2 	.word	0x08008be2

08007598 <nan>:
 8007598:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80075a0 <nan+0x8>
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	00000000 	.word	0x00000000
 80075a4:	7ff80000 	.word	0x7ff80000

080075a8 <_sbrk_r>:
 80075a8:	b538      	push	{r3, r4, r5, lr}
 80075aa:	4d06      	ldr	r5, [pc, #24]	; (80075c4 <_sbrk_r+0x1c>)
 80075ac:	2300      	movs	r3, #0
 80075ae:	4604      	mov	r4, r0
 80075b0:	4608      	mov	r0, r1
 80075b2:	602b      	str	r3, [r5, #0]
 80075b4:	f7fa fd4a 	bl	800204c <_sbrk>
 80075b8:	1c43      	adds	r3, r0, #1
 80075ba:	d102      	bne.n	80075c2 <_sbrk_r+0x1a>
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	b103      	cbz	r3, 80075c2 <_sbrk_r+0x1a>
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	bd38      	pop	{r3, r4, r5, pc}
 80075c4:	200005d8 	.word	0x200005d8

080075c8 <strncmp>:
 80075c8:	b510      	push	{r4, lr}
 80075ca:	b16a      	cbz	r2, 80075e8 <strncmp+0x20>
 80075cc:	3901      	subs	r1, #1
 80075ce:	1884      	adds	r4, r0, r2
 80075d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80075d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80075d8:	4293      	cmp	r3, r2
 80075da:	d103      	bne.n	80075e4 <strncmp+0x1c>
 80075dc:	42a0      	cmp	r0, r4
 80075de:	d001      	beq.n	80075e4 <strncmp+0x1c>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1f5      	bne.n	80075d0 <strncmp+0x8>
 80075e4:	1a98      	subs	r0, r3, r2
 80075e6:	bd10      	pop	{r4, pc}
 80075e8:	4610      	mov	r0, r2
 80075ea:	e7fc      	b.n	80075e6 <strncmp+0x1e>

080075ec <__ascii_wctomb>:
 80075ec:	b149      	cbz	r1, 8007602 <__ascii_wctomb+0x16>
 80075ee:	2aff      	cmp	r2, #255	; 0xff
 80075f0:	bf85      	ittet	hi
 80075f2:	238a      	movhi	r3, #138	; 0x8a
 80075f4:	6003      	strhi	r3, [r0, #0]
 80075f6:	700a      	strbls	r2, [r1, #0]
 80075f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80075fc:	bf98      	it	ls
 80075fe:	2001      	movls	r0, #1
 8007600:	4770      	bx	lr
 8007602:	4608      	mov	r0, r1
 8007604:	4770      	bx	lr
	...

08007608 <__assert_func>:
 8007608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800760a:	4614      	mov	r4, r2
 800760c:	461a      	mov	r2, r3
 800760e:	4b09      	ldr	r3, [pc, #36]	; (8007634 <__assert_func+0x2c>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4605      	mov	r5, r0
 8007614:	68d8      	ldr	r0, [r3, #12]
 8007616:	b14c      	cbz	r4, 800762c <__assert_func+0x24>
 8007618:	4b07      	ldr	r3, [pc, #28]	; (8007638 <__assert_func+0x30>)
 800761a:	9100      	str	r1, [sp, #0]
 800761c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007620:	4906      	ldr	r1, [pc, #24]	; (800763c <__assert_func+0x34>)
 8007622:	462b      	mov	r3, r5
 8007624:	f000 f80e 	bl	8007644 <fiprintf>
 8007628:	f000 fa84 	bl	8007b34 <abort>
 800762c:	4b04      	ldr	r3, [pc, #16]	; (8007640 <__assert_func+0x38>)
 800762e:	461c      	mov	r4, r3
 8007630:	e7f3      	b.n	800761a <__assert_func+0x12>
 8007632:	bf00      	nop
 8007634:	20000018 	.word	0x20000018
 8007638:	08008bed 	.word	0x08008bed
 800763c:	08008bfa 	.word	0x08008bfa
 8007640:	08008c28 	.word	0x08008c28

08007644 <fiprintf>:
 8007644:	b40e      	push	{r1, r2, r3}
 8007646:	b503      	push	{r0, r1, lr}
 8007648:	4601      	mov	r1, r0
 800764a:	ab03      	add	r3, sp, #12
 800764c:	4805      	ldr	r0, [pc, #20]	; (8007664 <fiprintf+0x20>)
 800764e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007652:	6800      	ldr	r0, [r0, #0]
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	f000 f87d 	bl	8007754 <_vfiprintf_r>
 800765a:	b002      	add	sp, #8
 800765c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007660:	b003      	add	sp, #12
 8007662:	4770      	bx	lr
 8007664:	20000018 	.word	0x20000018

08007668 <memmove>:
 8007668:	4288      	cmp	r0, r1
 800766a:	b510      	push	{r4, lr}
 800766c:	eb01 0402 	add.w	r4, r1, r2
 8007670:	d902      	bls.n	8007678 <memmove+0x10>
 8007672:	4284      	cmp	r4, r0
 8007674:	4623      	mov	r3, r4
 8007676:	d807      	bhi.n	8007688 <memmove+0x20>
 8007678:	1e43      	subs	r3, r0, #1
 800767a:	42a1      	cmp	r1, r4
 800767c:	d008      	beq.n	8007690 <memmove+0x28>
 800767e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007682:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007686:	e7f8      	b.n	800767a <memmove+0x12>
 8007688:	4402      	add	r2, r0
 800768a:	4601      	mov	r1, r0
 800768c:	428a      	cmp	r2, r1
 800768e:	d100      	bne.n	8007692 <memmove+0x2a>
 8007690:	bd10      	pop	{r4, pc}
 8007692:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007696:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800769a:	e7f7      	b.n	800768c <memmove+0x24>

0800769c <__malloc_lock>:
 800769c:	4801      	ldr	r0, [pc, #4]	; (80076a4 <__malloc_lock+0x8>)
 800769e:	f000 bc09 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 80076a2:	bf00      	nop
 80076a4:	200005e0 	.word	0x200005e0

080076a8 <__malloc_unlock>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__malloc_unlock+0x8>)
 80076aa:	f000 bc04 	b.w	8007eb6 <__retarget_lock_release_recursive>
 80076ae:	bf00      	nop
 80076b0:	200005e0 	.word	0x200005e0

080076b4 <_realloc_r>:
 80076b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b6:	4607      	mov	r7, r0
 80076b8:	4614      	mov	r4, r2
 80076ba:	460e      	mov	r6, r1
 80076bc:	b921      	cbnz	r1, 80076c8 <_realloc_r+0x14>
 80076be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076c2:	4611      	mov	r1, r2
 80076c4:	f7ff bdb2 	b.w	800722c <_malloc_r>
 80076c8:	b922      	cbnz	r2, 80076d4 <_realloc_r+0x20>
 80076ca:	f7ff fd5f 	bl	800718c <_free_r>
 80076ce:	4625      	mov	r5, r4
 80076d0:	4628      	mov	r0, r5
 80076d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d4:	f000 fc54 	bl	8007f80 <_malloc_usable_size_r>
 80076d8:	42a0      	cmp	r0, r4
 80076da:	d20f      	bcs.n	80076fc <_realloc_r+0x48>
 80076dc:	4621      	mov	r1, r4
 80076de:	4638      	mov	r0, r7
 80076e0:	f7ff fda4 	bl	800722c <_malloc_r>
 80076e4:	4605      	mov	r5, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d0f2      	beq.n	80076d0 <_realloc_r+0x1c>
 80076ea:	4631      	mov	r1, r6
 80076ec:	4622      	mov	r2, r4
 80076ee:	f7ff f875 	bl	80067dc <memcpy>
 80076f2:	4631      	mov	r1, r6
 80076f4:	4638      	mov	r0, r7
 80076f6:	f7ff fd49 	bl	800718c <_free_r>
 80076fa:	e7e9      	b.n	80076d0 <_realloc_r+0x1c>
 80076fc:	4635      	mov	r5, r6
 80076fe:	e7e7      	b.n	80076d0 <_realloc_r+0x1c>

08007700 <__sfputc_r>:
 8007700:	6893      	ldr	r3, [r2, #8]
 8007702:	3b01      	subs	r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	b410      	push	{r4}
 8007708:	6093      	str	r3, [r2, #8]
 800770a:	da08      	bge.n	800771e <__sfputc_r+0x1e>
 800770c:	6994      	ldr	r4, [r2, #24]
 800770e:	42a3      	cmp	r3, r4
 8007710:	db01      	blt.n	8007716 <__sfputc_r+0x16>
 8007712:	290a      	cmp	r1, #10
 8007714:	d103      	bne.n	800771e <__sfputc_r+0x1e>
 8007716:	f85d 4b04 	ldr.w	r4, [sp], #4
 800771a:	f000 b94b 	b.w	80079b4 <__swbuf_r>
 800771e:	6813      	ldr	r3, [r2, #0]
 8007720:	1c58      	adds	r0, r3, #1
 8007722:	6010      	str	r0, [r2, #0]
 8007724:	7019      	strb	r1, [r3, #0]
 8007726:	4608      	mov	r0, r1
 8007728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800772c:	4770      	bx	lr

0800772e <__sfputs_r>:
 800772e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007730:	4606      	mov	r6, r0
 8007732:	460f      	mov	r7, r1
 8007734:	4614      	mov	r4, r2
 8007736:	18d5      	adds	r5, r2, r3
 8007738:	42ac      	cmp	r4, r5
 800773a:	d101      	bne.n	8007740 <__sfputs_r+0x12>
 800773c:	2000      	movs	r0, #0
 800773e:	e007      	b.n	8007750 <__sfputs_r+0x22>
 8007740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007744:	463a      	mov	r2, r7
 8007746:	4630      	mov	r0, r6
 8007748:	f7ff ffda 	bl	8007700 <__sfputc_r>
 800774c:	1c43      	adds	r3, r0, #1
 800774e:	d1f3      	bne.n	8007738 <__sfputs_r+0xa>
 8007750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007754 <_vfiprintf_r>:
 8007754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007758:	460d      	mov	r5, r1
 800775a:	b09d      	sub	sp, #116	; 0x74
 800775c:	4614      	mov	r4, r2
 800775e:	4698      	mov	r8, r3
 8007760:	4606      	mov	r6, r0
 8007762:	b118      	cbz	r0, 800776c <_vfiprintf_r+0x18>
 8007764:	6983      	ldr	r3, [r0, #24]
 8007766:	b90b      	cbnz	r3, 800776c <_vfiprintf_r+0x18>
 8007768:	f000 fb06 	bl	8007d78 <__sinit>
 800776c:	4b89      	ldr	r3, [pc, #548]	; (8007994 <_vfiprintf_r+0x240>)
 800776e:	429d      	cmp	r5, r3
 8007770:	d11b      	bne.n	80077aa <_vfiprintf_r+0x56>
 8007772:	6875      	ldr	r5, [r6, #4]
 8007774:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007776:	07d9      	lsls	r1, r3, #31
 8007778:	d405      	bmi.n	8007786 <_vfiprintf_r+0x32>
 800777a:	89ab      	ldrh	r3, [r5, #12]
 800777c:	059a      	lsls	r2, r3, #22
 800777e:	d402      	bmi.n	8007786 <_vfiprintf_r+0x32>
 8007780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007782:	f000 fb97 	bl	8007eb4 <__retarget_lock_acquire_recursive>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	071b      	lsls	r3, r3, #28
 800778a:	d501      	bpl.n	8007790 <_vfiprintf_r+0x3c>
 800778c:	692b      	ldr	r3, [r5, #16]
 800778e:	b9eb      	cbnz	r3, 80077cc <_vfiprintf_r+0x78>
 8007790:	4629      	mov	r1, r5
 8007792:	4630      	mov	r0, r6
 8007794:	f000 f960 	bl	8007a58 <__swsetup_r>
 8007798:	b1c0      	cbz	r0, 80077cc <_vfiprintf_r+0x78>
 800779a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800779c:	07dc      	lsls	r4, r3, #31
 800779e:	d50e      	bpl.n	80077be <_vfiprintf_r+0x6a>
 80077a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077a4:	b01d      	add	sp, #116	; 0x74
 80077a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077aa:	4b7b      	ldr	r3, [pc, #492]	; (8007998 <_vfiprintf_r+0x244>)
 80077ac:	429d      	cmp	r5, r3
 80077ae:	d101      	bne.n	80077b4 <_vfiprintf_r+0x60>
 80077b0:	68b5      	ldr	r5, [r6, #8]
 80077b2:	e7df      	b.n	8007774 <_vfiprintf_r+0x20>
 80077b4:	4b79      	ldr	r3, [pc, #484]	; (800799c <_vfiprintf_r+0x248>)
 80077b6:	429d      	cmp	r5, r3
 80077b8:	bf08      	it	eq
 80077ba:	68f5      	ldreq	r5, [r6, #12]
 80077bc:	e7da      	b.n	8007774 <_vfiprintf_r+0x20>
 80077be:	89ab      	ldrh	r3, [r5, #12]
 80077c0:	0598      	lsls	r0, r3, #22
 80077c2:	d4ed      	bmi.n	80077a0 <_vfiprintf_r+0x4c>
 80077c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c6:	f000 fb76 	bl	8007eb6 <__retarget_lock_release_recursive>
 80077ca:	e7e9      	b.n	80077a0 <_vfiprintf_r+0x4c>
 80077cc:	2300      	movs	r3, #0
 80077ce:	9309      	str	r3, [sp, #36]	; 0x24
 80077d0:	2320      	movs	r3, #32
 80077d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80077da:	2330      	movs	r3, #48	; 0x30
 80077dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80079a0 <_vfiprintf_r+0x24c>
 80077e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e4:	f04f 0901 	mov.w	r9, #1
 80077e8:	4623      	mov	r3, r4
 80077ea:	469a      	mov	sl, r3
 80077ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077f0:	b10a      	cbz	r2, 80077f6 <_vfiprintf_r+0xa2>
 80077f2:	2a25      	cmp	r2, #37	; 0x25
 80077f4:	d1f9      	bne.n	80077ea <_vfiprintf_r+0x96>
 80077f6:	ebba 0b04 	subs.w	fp, sl, r4
 80077fa:	d00b      	beq.n	8007814 <_vfiprintf_r+0xc0>
 80077fc:	465b      	mov	r3, fp
 80077fe:	4622      	mov	r2, r4
 8007800:	4629      	mov	r1, r5
 8007802:	4630      	mov	r0, r6
 8007804:	f7ff ff93 	bl	800772e <__sfputs_r>
 8007808:	3001      	adds	r0, #1
 800780a:	f000 80aa 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800780e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007810:	445a      	add	r2, fp
 8007812:	9209      	str	r2, [sp, #36]	; 0x24
 8007814:	f89a 3000 	ldrb.w	r3, [sl]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80a2 	beq.w	8007962 <_vfiprintf_r+0x20e>
 800781e:	2300      	movs	r3, #0
 8007820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007824:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007828:	f10a 0a01 	add.w	sl, sl, #1
 800782c:	9304      	str	r3, [sp, #16]
 800782e:	9307      	str	r3, [sp, #28]
 8007830:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007834:	931a      	str	r3, [sp, #104]	; 0x68
 8007836:	4654      	mov	r4, sl
 8007838:	2205      	movs	r2, #5
 800783a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783e:	4858      	ldr	r0, [pc, #352]	; (80079a0 <_vfiprintf_r+0x24c>)
 8007840:	f7f8 fcce 	bl	80001e0 <memchr>
 8007844:	9a04      	ldr	r2, [sp, #16]
 8007846:	b9d8      	cbnz	r0, 8007880 <_vfiprintf_r+0x12c>
 8007848:	06d1      	lsls	r1, r2, #27
 800784a:	bf44      	itt	mi
 800784c:	2320      	movmi	r3, #32
 800784e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007852:	0713      	lsls	r3, r2, #28
 8007854:	bf44      	itt	mi
 8007856:	232b      	movmi	r3, #43	; 0x2b
 8007858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800785c:	f89a 3000 	ldrb.w	r3, [sl]
 8007860:	2b2a      	cmp	r3, #42	; 0x2a
 8007862:	d015      	beq.n	8007890 <_vfiprintf_r+0x13c>
 8007864:	9a07      	ldr	r2, [sp, #28]
 8007866:	4654      	mov	r4, sl
 8007868:	2000      	movs	r0, #0
 800786a:	f04f 0c0a 	mov.w	ip, #10
 800786e:	4621      	mov	r1, r4
 8007870:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007874:	3b30      	subs	r3, #48	; 0x30
 8007876:	2b09      	cmp	r3, #9
 8007878:	d94e      	bls.n	8007918 <_vfiprintf_r+0x1c4>
 800787a:	b1b0      	cbz	r0, 80078aa <_vfiprintf_r+0x156>
 800787c:	9207      	str	r2, [sp, #28]
 800787e:	e014      	b.n	80078aa <_vfiprintf_r+0x156>
 8007880:	eba0 0308 	sub.w	r3, r0, r8
 8007884:	fa09 f303 	lsl.w	r3, r9, r3
 8007888:	4313      	orrs	r3, r2
 800788a:	9304      	str	r3, [sp, #16]
 800788c:	46a2      	mov	sl, r4
 800788e:	e7d2      	b.n	8007836 <_vfiprintf_r+0xe2>
 8007890:	9b03      	ldr	r3, [sp, #12]
 8007892:	1d19      	adds	r1, r3, #4
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	9103      	str	r1, [sp, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	bfbb      	ittet	lt
 800789c:	425b      	neglt	r3, r3
 800789e:	f042 0202 	orrlt.w	r2, r2, #2
 80078a2:	9307      	strge	r3, [sp, #28]
 80078a4:	9307      	strlt	r3, [sp, #28]
 80078a6:	bfb8      	it	lt
 80078a8:	9204      	strlt	r2, [sp, #16]
 80078aa:	7823      	ldrb	r3, [r4, #0]
 80078ac:	2b2e      	cmp	r3, #46	; 0x2e
 80078ae:	d10c      	bne.n	80078ca <_vfiprintf_r+0x176>
 80078b0:	7863      	ldrb	r3, [r4, #1]
 80078b2:	2b2a      	cmp	r3, #42	; 0x2a
 80078b4:	d135      	bne.n	8007922 <_vfiprintf_r+0x1ce>
 80078b6:	9b03      	ldr	r3, [sp, #12]
 80078b8:	1d1a      	adds	r2, r3, #4
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	9203      	str	r2, [sp, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	bfb8      	it	lt
 80078c2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80078c6:	3402      	adds	r4, #2
 80078c8:	9305      	str	r3, [sp, #20]
 80078ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079b0 <_vfiprintf_r+0x25c>
 80078ce:	7821      	ldrb	r1, [r4, #0]
 80078d0:	2203      	movs	r2, #3
 80078d2:	4650      	mov	r0, sl
 80078d4:	f7f8 fc84 	bl	80001e0 <memchr>
 80078d8:	b140      	cbz	r0, 80078ec <_vfiprintf_r+0x198>
 80078da:	2340      	movs	r3, #64	; 0x40
 80078dc:	eba0 000a 	sub.w	r0, r0, sl
 80078e0:	fa03 f000 	lsl.w	r0, r3, r0
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	4303      	orrs	r3, r0
 80078e8:	3401      	adds	r4, #1
 80078ea:	9304      	str	r3, [sp, #16]
 80078ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078f0:	482c      	ldr	r0, [pc, #176]	; (80079a4 <_vfiprintf_r+0x250>)
 80078f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f6:	2206      	movs	r2, #6
 80078f8:	f7f8 fc72 	bl	80001e0 <memchr>
 80078fc:	2800      	cmp	r0, #0
 80078fe:	d03f      	beq.n	8007980 <_vfiprintf_r+0x22c>
 8007900:	4b29      	ldr	r3, [pc, #164]	; (80079a8 <_vfiprintf_r+0x254>)
 8007902:	bb1b      	cbnz	r3, 800794c <_vfiprintf_r+0x1f8>
 8007904:	9b03      	ldr	r3, [sp, #12]
 8007906:	3307      	adds	r3, #7
 8007908:	f023 0307 	bic.w	r3, r3, #7
 800790c:	3308      	adds	r3, #8
 800790e:	9303      	str	r3, [sp, #12]
 8007910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007912:	443b      	add	r3, r7
 8007914:	9309      	str	r3, [sp, #36]	; 0x24
 8007916:	e767      	b.n	80077e8 <_vfiprintf_r+0x94>
 8007918:	fb0c 3202 	mla	r2, ip, r2, r3
 800791c:	460c      	mov	r4, r1
 800791e:	2001      	movs	r0, #1
 8007920:	e7a5      	b.n	800786e <_vfiprintf_r+0x11a>
 8007922:	2300      	movs	r3, #0
 8007924:	3401      	adds	r4, #1
 8007926:	9305      	str	r3, [sp, #20]
 8007928:	4619      	mov	r1, r3
 800792a:	f04f 0c0a 	mov.w	ip, #10
 800792e:	4620      	mov	r0, r4
 8007930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007934:	3a30      	subs	r2, #48	; 0x30
 8007936:	2a09      	cmp	r2, #9
 8007938:	d903      	bls.n	8007942 <_vfiprintf_r+0x1ee>
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0c5      	beq.n	80078ca <_vfiprintf_r+0x176>
 800793e:	9105      	str	r1, [sp, #20]
 8007940:	e7c3      	b.n	80078ca <_vfiprintf_r+0x176>
 8007942:	fb0c 2101 	mla	r1, ip, r1, r2
 8007946:	4604      	mov	r4, r0
 8007948:	2301      	movs	r3, #1
 800794a:	e7f0      	b.n	800792e <_vfiprintf_r+0x1da>
 800794c:	ab03      	add	r3, sp, #12
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	462a      	mov	r2, r5
 8007952:	4b16      	ldr	r3, [pc, #88]	; (80079ac <_vfiprintf_r+0x258>)
 8007954:	a904      	add	r1, sp, #16
 8007956:	4630      	mov	r0, r6
 8007958:	f7fc f886 	bl	8003a68 <_printf_float>
 800795c:	4607      	mov	r7, r0
 800795e:	1c78      	adds	r0, r7, #1
 8007960:	d1d6      	bne.n	8007910 <_vfiprintf_r+0x1bc>
 8007962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007964:	07d9      	lsls	r1, r3, #31
 8007966:	d405      	bmi.n	8007974 <_vfiprintf_r+0x220>
 8007968:	89ab      	ldrh	r3, [r5, #12]
 800796a:	059a      	lsls	r2, r3, #22
 800796c:	d402      	bmi.n	8007974 <_vfiprintf_r+0x220>
 800796e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007970:	f000 faa1 	bl	8007eb6 <__retarget_lock_release_recursive>
 8007974:	89ab      	ldrh	r3, [r5, #12]
 8007976:	065b      	lsls	r3, r3, #25
 8007978:	f53f af12 	bmi.w	80077a0 <_vfiprintf_r+0x4c>
 800797c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797e:	e711      	b.n	80077a4 <_vfiprintf_r+0x50>
 8007980:	ab03      	add	r3, sp, #12
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	462a      	mov	r2, r5
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <_vfiprintf_r+0x258>)
 8007988:	a904      	add	r1, sp, #16
 800798a:	4630      	mov	r0, r6
 800798c:	f7fc fb10 	bl	8003fb0 <_printf_i>
 8007990:	e7e4      	b.n	800795c <_vfiprintf_r+0x208>
 8007992:	bf00      	nop
 8007994:	08008c4c 	.word	0x08008c4c
 8007998:	08008c6c 	.word	0x08008c6c
 800799c:	08008c2c 	.word	0x08008c2c
 80079a0:	08008bdc 	.word	0x08008bdc
 80079a4:	08008be6 	.word	0x08008be6
 80079a8:	08003a69 	.word	0x08003a69
 80079ac:	0800772f 	.word	0x0800772f
 80079b0:	08008be2 	.word	0x08008be2

080079b4 <__swbuf_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	4605      	mov	r5, r0
 80079bc:	b118      	cbz	r0, 80079c6 <__swbuf_r+0x12>
 80079be:	6983      	ldr	r3, [r0, #24]
 80079c0:	b90b      	cbnz	r3, 80079c6 <__swbuf_r+0x12>
 80079c2:	f000 f9d9 	bl	8007d78 <__sinit>
 80079c6:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <__swbuf_r+0x98>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	d12b      	bne.n	8007a24 <__swbuf_r+0x70>
 80079cc:	686c      	ldr	r4, [r5, #4]
 80079ce:	69a3      	ldr	r3, [r4, #24]
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d52f      	bpl.n	8007a38 <__swbuf_r+0x84>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b36b      	cbz	r3, 8007a38 <__swbuf_r+0x84>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	1ac0      	subs	r0, r0, r3
 80079e2:	6963      	ldr	r3, [r4, #20]
 80079e4:	b2f6      	uxtb	r6, r6
 80079e6:	4283      	cmp	r3, r0
 80079e8:	4637      	mov	r7, r6
 80079ea:	dc04      	bgt.n	80079f6 <__swbuf_r+0x42>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f92e 	bl	8007c50 <_fflush_r>
 80079f4:	bb30      	cbnz	r0, 8007a44 <__swbuf_r+0x90>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	701e      	strb	r6, [r3, #0]
 8007a04:	6963      	ldr	r3, [r4, #20]
 8007a06:	3001      	adds	r0, #1
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x62>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d506      	bpl.n	8007a20 <__swbuf_r+0x6c>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d104      	bne.n	8007a20 <__swbuf_r+0x6c>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f919 	bl	8007c50 <_fflush_r>
 8007a1e:	b988      	cbnz	r0, 8007a44 <__swbuf_r+0x90>
 8007a20:	4638      	mov	r0, r7
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	4b0a      	ldr	r3, [pc, #40]	; (8007a50 <__swbuf_r+0x9c>)
 8007a26:	429c      	cmp	r4, r3
 8007a28:	d101      	bne.n	8007a2e <__swbuf_r+0x7a>
 8007a2a:	68ac      	ldr	r4, [r5, #8]
 8007a2c:	e7cf      	b.n	80079ce <__swbuf_r+0x1a>
 8007a2e:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <__swbuf_r+0xa0>)
 8007a30:	429c      	cmp	r4, r3
 8007a32:	bf08      	it	eq
 8007a34:	68ec      	ldreq	r4, [r5, #12]
 8007a36:	e7ca      	b.n	80079ce <__swbuf_r+0x1a>
 8007a38:	4621      	mov	r1, r4
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	f000 f80c 	bl	8007a58 <__swsetup_r>
 8007a40:	2800      	cmp	r0, #0
 8007a42:	d0cb      	beq.n	80079dc <__swbuf_r+0x28>
 8007a44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a48:	e7ea      	b.n	8007a20 <__swbuf_r+0x6c>
 8007a4a:	bf00      	nop
 8007a4c:	08008c4c 	.word	0x08008c4c
 8007a50:	08008c6c 	.word	0x08008c6c
 8007a54:	08008c2c 	.word	0x08008c2c

08007a58 <__swsetup_r>:
 8007a58:	4b32      	ldr	r3, [pc, #200]	; (8007b24 <__swsetup_r+0xcc>)
 8007a5a:	b570      	push	{r4, r5, r6, lr}
 8007a5c:	681d      	ldr	r5, [r3, #0]
 8007a5e:	4606      	mov	r6, r0
 8007a60:	460c      	mov	r4, r1
 8007a62:	b125      	cbz	r5, 8007a6e <__swsetup_r+0x16>
 8007a64:	69ab      	ldr	r3, [r5, #24]
 8007a66:	b913      	cbnz	r3, 8007a6e <__swsetup_r+0x16>
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f985 	bl	8007d78 <__sinit>
 8007a6e:	4b2e      	ldr	r3, [pc, #184]	; (8007b28 <__swsetup_r+0xd0>)
 8007a70:	429c      	cmp	r4, r3
 8007a72:	d10f      	bne.n	8007a94 <__swsetup_r+0x3c>
 8007a74:	686c      	ldr	r4, [r5, #4]
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a7c:	0719      	lsls	r1, r3, #28
 8007a7e:	d42c      	bmi.n	8007ada <__swsetup_r+0x82>
 8007a80:	06dd      	lsls	r5, r3, #27
 8007a82:	d411      	bmi.n	8007aa8 <__swsetup_r+0x50>
 8007a84:	2309      	movs	r3, #9
 8007a86:	6033      	str	r3, [r6, #0]
 8007a88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a8c:	81a3      	strh	r3, [r4, #12]
 8007a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a92:	e03e      	b.n	8007b12 <__swsetup_r+0xba>
 8007a94:	4b25      	ldr	r3, [pc, #148]	; (8007b2c <__swsetup_r+0xd4>)
 8007a96:	429c      	cmp	r4, r3
 8007a98:	d101      	bne.n	8007a9e <__swsetup_r+0x46>
 8007a9a:	68ac      	ldr	r4, [r5, #8]
 8007a9c:	e7eb      	b.n	8007a76 <__swsetup_r+0x1e>
 8007a9e:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <__swsetup_r+0xd8>)
 8007aa0:	429c      	cmp	r4, r3
 8007aa2:	bf08      	it	eq
 8007aa4:	68ec      	ldreq	r4, [r5, #12]
 8007aa6:	e7e6      	b.n	8007a76 <__swsetup_r+0x1e>
 8007aa8:	0758      	lsls	r0, r3, #29
 8007aaa:	d512      	bpl.n	8007ad2 <__swsetup_r+0x7a>
 8007aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aae:	b141      	cbz	r1, 8007ac2 <__swsetup_r+0x6a>
 8007ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ab4:	4299      	cmp	r1, r3
 8007ab6:	d002      	beq.n	8007abe <__swsetup_r+0x66>
 8007ab8:	4630      	mov	r0, r6
 8007aba:	f7ff fb67 	bl	800718c <_free_r>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8007ac2:	89a3      	ldrh	r3, [r4, #12]
 8007ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ac8:	81a3      	strh	r3, [r4, #12]
 8007aca:	2300      	movs	r3, #0
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	6923      	ldr	r3, [r4, #16]
 8007ad0:	6023      	str	r3, [r4, #0]
 8007ad2:	89a3      	ldrh	r3, [r4, #12]
 8007ad4:	f043 0308 	orr.w	r3, r3, #8
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	6923      	ldr	r3, [r4, #16]
 8007adc:	b94b      	cbnz	r3, 8007af2 <__swsetup_r+0x9a>
 8007ade:	89a3      	ldrh	r3, [r4, #12]
 8007ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae8:	d003      	beq.n	8007af2 <__swsetup_r+0x9a>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4630      	mov	r0, r6
 8007aee:	f000 fa07 	bl	8007f00 <__smakebuf_r>
 8007af2:	89a0      	ldrh	r0, [r4, #12]
 8007af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af8:	f010 0301 	ands.w	r3, r0, #1
 8007afc:	d00a      	beq.n	8007b14 <__swsetup_r+0xbc>
 8007afe:	2300      	movs	r3, #0
 8007b00:	60a3      	str	r3, [r4, #8]
 8007b02:	6963      	ldr	r3, [r4, #20]
 8007b04:	425b      	negs	r3, r3
 8007b06:	61a3      	str	r3, [r4, #24]
 8007b08:	6923      	ldr	r3, [r4, #16]
 8007b0a:	b943      	cbnz	r3, 8007b1e <__swsetup_r+0xc6>
 8007b0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b10:	d1ba      	bne.n	8007a88 <__swsetup_r+0x30>
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	0781      	lsls	r1, r0, #30
 8007b16:	bf58      	it	pl
 8007b18:	6963      	ldrpl	r3, [r4, #20]
 8007b1a:	60a3      	str	r3, [r4, #8]
 8007b1c:	e7f4      	b.n	8007b08 <__swsetup_r+0xb0>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e7f7      	b.n	8007b12 <__swsetup_r+0xba>
 8007b22:	bf00      	nop
 8007b24:	20000018 	.word	0x20000018
 8007b28:	08008c4c 	.word	0x08008c4c
 8007b2c:	08008c6c 	.word	0x08008c6c
 8007b30:	08008c2c 	.word	0x08008c2c

08007b34 <abort>:
 8007b34:	b508      	push	{r3, lr}
 8007b36:	2006      	movs	r0, #6
 8007b38:	f000 fa52 	bl	8007fe0 <raise>
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	f7fa fa55 	bl	8001fec <_exit>
	...

08007b44 <__sflush_r>:
 8007b44:	898a      	ldrh	r2, [r1, #12]
 8007b46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	0710      	lsls	r0, r2, #28
 8007b4e:	460c      	mov	r4, r1
 8007b50:	d458      	bmi.n	8007c04 <__sflush_r+0xc0>
 8007b52:	684b      	ldr	r3, [r1, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dc05      	bgt.n	8007b64 <__sflush_r+0x20>
 8007b58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	dc02      	bgt.n	8007b64 <__sflush_r+0x20>
 8007b5e:	2000      	movs	r0, #0
 8007b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b66:	2e00      	cmp	r6, #0
 8007b68:	d0f9      	beq.n	8007b5e <__sflush_r+0x1a>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b70:	682f      	ldr	r7, [r5, #0]
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	d032      	beq.n	8007bdc <__sflush_r+0x98>
 8007b76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b78:	89a3      	ldrh	r3, [r4, #12]
 8007b7a:	075a      	lsls	r2, r3, #29
 8007b7c:	d505      	bpl.n	8007b8a <__sflush_r+0x46>
 8007b7e:	6863      	ldr	r3, [r4, #4]
 8007b80:	1ac0      	subs	r0, r0, r3
 8007b82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b84:	b10b      	cbz	r3, 8007b8a <__sflush_r+0x46>
 8007b86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b88:	1ac0      	subs	r0, r0, r3
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b90:	6a21      	ldr	r1, [r4, #32]
 8007b92:	4628      	mov	r0, r5
 8007b94:	47b0      	blx	r6
 8007b96:	1c43      	adds	r3, r0, #1
 8007b98:	89a3      	ldrh	r3, [r4, #12]
 8007b9a:	d106      	bne.n	8007baa <__sflush_r+0x66>
 8007b9c:	6829      	ldr	r1, [r5, #0]
 8007b9e:	291d      	cmp	r1, #29
 8007ba0:	d82c      	bhi.n	8007bfc <__sflush_r+0xb8>
 8007ba2:	4a2a      	ldr	r2, [pc, #168]	; (8007c4c <__sflush_r+0x108>)
 8007ba4:	40ca      	lsrs	r2, r1
 8007ba6:	07d6      	lsls	r6, r2, #31
 8007ba8:	d528      	bpl.n	8007bfc <__sflush_r+0xb8>
 8007baa:	2200      	movs	r2, #0
 8007bac:	6062      	str	r2, [r4, #4]
 8007bae:	04d9      	lsls	r1, r3, #19
 8007bb0:	6922      	ldr	r2, [r4, #16]
 8007bb2:	6022      	str	r2, [r4, #0]
 8007bb4:	d504      	bpl.n	8007bc0 <__sflush_r+0x7c>
 8007bb6:	1c42      	adds	r2, r0, #1
 8007bb8:	d101      	bne.n	8007bbe <__sflush_r+0x7a>
 8007bba:	682b      	ldr	r3, [r5, #0]
 8007bbc:	b903      	cbnz	r3, 8007bc0 <__sflush_r+0x7c>
 8007bbe:	6560      	str	r0, [r4, #84]	; 0x54
 8007bc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bc2:	602f      	str	r7, [r5, #0]
 8007bc4:	2900      	cmp	r1, #0
 8007bc6:	d0ca      	beq.n	8007b5e <__sflush_r+0x1a>
 8007bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007bcc:	4299      	cmp	r1, r3
 8007bce:	d002      	beq.n	8007bd6 <__sflush_r+0x92>
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	f7ff fadb 	bl	800718c <_free_r>
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	6360      	str	r0, [r4, #52]	; 0x34
 8007bda:	e7c1      	b.n	8007b60 <__sflush_r+0x1c>
 8007bdc:	6a21      	ldr	r1, [r4, #32]
 8007bde:	2301      	movs	r3, #1
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b0      	blx	r6
 8007be4:	1c41      	adds	r1, r0, #1
 8007be6:	d1c7      	bne.n	8007b78 <__sflush_r+0x34>
 8007be8:	682b      	ldr	r3, [r5, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0c4      	beq.n	8007b78 <__sflush_r+0x34>
 8007bee:	2b1d      	cmp	r3, #29
 8007bf0:	d001      	beq.n	8007bf6 <__sflush_r+0xb2>
 8007bf2:	2b16      	cmp	r3, #22
 8007bf4:	d101      	bne.n	8007bfa <__sflush_r+0xb6>
 8007bf6:	602f      	str	r7, [r5, #0]
 8007bf8:	e7b1      	b.n	8007b5e <__sflush_r+0x1a>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c00:	81a3      	strh	r3, [r4, #12]
 8007c02:	e7ad      	b.n	8007b60 <__sflush_r+0x1c>
 8007c04:	690f      	ldr	r7, [r1, #16]
 8007c06:	2f00      	cmp	r7, #0
 8007c08:	d0a9      	beq.n	8007b5e <__sflush_r+0x1a>
 8007c0a:	0793      	lsls	r3, r2, #30
 8007c0c:	680e      	ldr	r6, [r1, #0]
 8007c0e:	bf08      	it	eq
 8007c10:	694b      	ldreq	r3, [r1, #20]
 8007c12:	600f      	str	r7, [r1, #0]
 8007c14:	bf18      	it	ne
 8007c16:	2300      	movne	r3, #0
 8007c18:	eba6 0807 	sub.w	r8, r6, r7
 8007c1c:	608b      	str	r3, [r1, #8]
 8007c1e:	f1b8 0f00 	cmp.w	r8, #0
 8007c22:	dd9c      	ble.n	8007b5e <__sflush_r+0x1a>
 8007c24:	6a21      	ldr	r1, [r4, #32]
 8007c26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c28:	4643      	mov	r3, r8
 8007c2a:	463a      	mov	r2, r7
 8007c2c:	4628      	mov	r0, r5
 8007c2e:	47b0      	blx	r6
 8007c30:	2800      	cmp	r0, #0
 8007c32:	dc06      	bgt.n	8007c42 <__sflush_r+0xfe>
 8007c34:	89a3      	ldrh	r3, [r4, #12]
 8007c36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c40:	e78e      	b.n	8007b60 <__sflush_r+0x1c>
 8007c42:	4407      	add	r7, r0
 8007c44:	eba8 0800 	sub.w	r8, r8, r0
 8007c48:	e7e9      	b.n	8007c1e <__sflush_r+0xda>
 8007c4a:	bf00      	nop
 8007c4c:	20400001 	.word	0x20400001

08007c50 <_fflush_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	690b      	ldr	r3, [r1, #16]
 8007c54:	4605      	mov	r5, r0
 8007c56:	460c      	mov	r4, r1
 8007c58:	b913      	cbnz	r3, 8007c60 <_fflush_r+0x10>
 8007c5a:	2500      	movs	r5, #0
 8007c5c:	4628      	mov	r0, r5
 8007c5e:	bd38      	pop	{r3, r4, r5, pc}
 8007c60:	b118      	cbz	r0, 8007c6a <_fflush_r+0x1a>
 8007c62:	6983      	ldr	r3, [r0, #24]
 8007c64:	b90b      	cbnz	r3, 8007c6a <_fflush_r+0x1a>
 8007c66:	f000 f887 	bl	8007d78 <__sinit>
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <_fflush_r+0x6c>)
 8007c6c:	429c      	cmp	r4, r3
 8007c6e:	d11b      	bne.n	8007ca8 <_fflush_r+0x58>
 8007c70:	686c      	ldr	r4, [r5, #4]
 8007c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0ef      	beq.n	8007c5a <_fflush_r+0xa>
 8007c7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c7c:	07d0      	lsls	r0, r2, #31
 8007c7e:	d404      	bmi.n	8007c8a <_fflush_r+0x3a>
 8007c80:	0599      	lsls	r1, r3, #22
 8007c82:	d402      	bmi.n	8007c8a <_fflush_r+0x3a>
 8007c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c86:	f000 f915 	bl	8007eb4 <__retarget_lock_acquire_recursive>
 8007c8a:	4628      	mov	r0, r5
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	f7ff ff59 	bl	8007b44 <__sflush_r>
 8007c92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c94:	07da      	lsls	r2, r3, #31
 8007c96:	4605      	mov	r5, r0
 8007c98:	d4e0      	bmi.n	8007c5c <_fflush_r+0xc>
 8007c9a:	89a3      	ldrh	r3, [r4, #12]
 8007c9c:	059b      	lsls	r3, r3, #22
 8007c9e:	d4dd      	bmi.n	8007c5c <_fflush_r+0xc>
 8007ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ca2:	f000 f908 	bl	8007eb6 <__retarget_lock_release_recursive>
 8007ca6:	e7d9      	b.n	8007c5c <_fflush_r+0xc>
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <_fflush_r+0x70>)
 8007caa:	429c      	cmp	r4, r3
 8007cac:	d101      	bne.n	8007cb2 <_fflush_r+0x62>
 8007cae:	68ac      	ldr	r4, [r5, #8]
 8007cb0:	e7df      	b.n	8007c72 <_fflush_r+0x22>
 8007cb2:	4b04      	ldr	r3, [pc, #16]	; (8007cc4 <_fflush_r+0x74>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	bf08      	it	eq
 8007cb8:	68ec      	ldreq	r4, [r5, #12]
 8007cba:	e7da      	b.n	8007c72 <_fflush_r+0x22>
 8007cbc:	08008c4c 	.word	0x08008c4c
 8007cc0:	08008c6c 	.word	0x08008c6c
 8007cc4:	08008c2c 	.word	0x08008c2c

08007cc8 <std>:
 8007cc8:	2300      	movs	r3, #0
 8007cca:	b510      	push	{r4, lr}
 8007ccc:	4604      	mov	r4, r0
 8007cce:	e9c0 3300 	strd	r3, r3, [r0]
 8007cd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cd6:	6083      	str	r3, [r0, #8]
 8007cd8:	8181      	strh	r1, [r0, #12]
 8007cda:	6643      	str	r3, [r0, #100]	; 0x64
 8007cdc:	81c2      	strh	r2, [r0, #14]
 8007cde:	6183      	str	r3, [r0, #24]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	2208      	movs	r2, #8
 8007ce4:	305c      	adds	r0, #92	; 0x5c
 8007ce6:	f7fb fe17 	bl	8003918 <memset>
 8007cea:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <std+0x38>)
 8007cec:	6263      	str	r3, [r4, #36]	; 0x24
 8007cee:	4b05      	ldr	r3, [pc, #20]	; (8007d04 <std+0x3c>)
 8007cf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cf2:	4b05      	ldr	r3, [pc, #20]	; (8007d08 <std+0x40>)
 8007cf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <std+0x44>)
 8007cf8:	6224      	str	r4, [r4, #32]
 8007cfa:	6323      	str	r3, [r4, #48]	; 0x30
 8007cfc:	bd10      	pop	{r4, pc}
 8007cfe:	bf00      	nop
 8007d00:	08008019 	.word	0x08008019
 8007d04:	0800803b 	.word	0x0800803b
 8007d08:	08008073 	.word	0x08008073
 8007d0c:	08008097 	.word	0x08008097

08007d10 <_cleanup_r>:
 8007d10:	4901      	ldr	r1, [pc, #4]	; (8007d18 <_cleanup_r+0x8>)
 8007d12:	f000 b8af 	b.w	8007e74 <_fwalk_reent>
 8007d16:	bf00      	nop
 8007d18:	08007c51 	.word	0x08007c51

08007d1c <__sfmoreglue>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	1e4a      	subs	r2, r1, #1
 8007d20:	2568      	movs	r5, #104	; 0x68
 8007d22:	4355      	muls	r5, r2
 8007d24:	460e      	mov	r6, r1
 8007d26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d2a:	f7ff fa7f 	bl	800722c <_malloc_r>
 8007d2e:	4604      	mov	r4, r0
 8007d30:	b140      	cbz	r0, 8007d44 <__sfmoreglue+0x28>
 8007d32:	2100      	movs	r1, #0
 8007d34:	e9c0 1600 	strd	r1, r6, [r0]
 8007d38:	300c      	adds	r0, #12
 8007d3a:	60a0      	str	r0, [r4, #8]
 8007d3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d40:	f7fb fdea 	bl	8003918 <memset>
 8007d44:	4620      	mov	r0, r4
 8007d46:	bd70      	pop	{r4, r5, r6, pc}

08007d48 <__sfp_lock_acquire>:
 8007d48:	4801      	ldr	r0, [pc, #4]	; (8007d50 <__sfp_lock_acquire+0x8>)
 8007d4a:	f000 b8b3 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007d4e:	bf00      	nop
 8007d50:	200005e4 	.word	0x200005e4

08007d54 <__sfp_lock_release>:
 8007d54:	4801      	ldr	r0, [pc, #4]	; (8007d5c <__sfp_lock_release+0x8>)
 8007d56:	f000 b8ae 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	200005e4 	.word	0x200005e4

08007d60 <__sinit_lock_acquire>:
 8007d60:	4801      	ldr	r0, [pc, #4]	; (8007d68 <__sinit_lock_acquire+0x8>)
 8007d62:	f000 b8a7 	b.w	8007eb4 <__retarget_lock_acquire_recursive>
 8007d66:	bf00      	nop
 8007d68:	200005df 	.word	0x200005df

08007d6c <__sinit_lock_release>:
 8007d6c:	4801      	ldr	r0, [pc, #4]	; (8007d74 <__sinit_lock_release+0x8>)
 8007d6e:	f000 b8a2 	b.w	8007eb6 <__retarget_lock_release_recursive>
 8007d72:	bf00      	nop
 8007d74:	200005df 	.word	0x200005df

08007d78 <__sinit>:
 8007d78:	b510      	push	{r4, lr}
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	f7ff fff0 	bl	8007d60 <__sinit_lock_acquire>
 8007d80:	69a3      	ldr	r3, [r4, #24]
 8007d82:	b11b      	cbz	r3, 8007d8c <__sinit+0x14>
 8007d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d88:	f7ff bff0 	b.w	8007d6c <__sinit_lock_release>
 8007d8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d90:	6523      	str	r3, [r4, #80]	; 0x50
 8007d92:	4b13      	ldr	r3, [pc, #76]	; (8007de0 <__sinit+0x68>)
 8007d94:	4a13      	ldr	r2, [pc, #76]	; (8007de4 <__sinit+0x6c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d9a:	42a3      	cmp	r3, r4
 8007d9c:	bf04      	itt	eq
 8007d9e:	2301      	moveq	r3, #1
 8007da0:	61a3      	streq	r3, [r4, #24]
 8007da2:	4620      	mov	r0, r4
 8007da4:	f000 f820 	bl	8007de8 <__sfp>
 8007da8:	6060      	str	r0, [r4, #4]
 8007daa:	4620      	mov	r0, r4
 8007dac:	f000 f81c 	bl	8007de8 <__sfp>
 8007db0:	60a0      	str	r0, [r4, #8]
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f818 	bl	8007de8 <__sfp>
 8007db8:	2200      	movs	r2, #0
 8007dba:	60e0      	str	r0, [r4, #12]
 8007dbc:	2104      	movs	r1, #4
 8007dbe:	6860      	ldr	r0, [r4, #4]
 8007dc0:	f7ff ff82 	bl	8007cc8 <std>
 8007dc4:	68a0      	ldr	r0, [r4, #8]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	2109      	movs	r1, #9
 8007dca:	f7ff ff7d 	bl	8007cc8 <std>
 8007dce:	68e0      	ldr	r0, [r4, #12]
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	2112      	movs	r1, #18
 8007dd4:	f7ff ff78 	bl	8007cc8 <std>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	61a3      	str	r3, [r4, #24]
 8007ddc:	e7d2      	b.n	8007d84 <__sinit+0xc>
 8007dde:	bf00      	nop
 8007de0:	080087d4 	.word	0x080087d4
 8007de4:	08007d11 	.word	0x08007d11

08007de8 <__sfp>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	4607      	mov	r7, r0
 8007dec:	f7ff ffac 	bl	8007d48 <__sfp_lock_acquire>
 8007df0:	4b1e      	ldr	r3, [pc, #120]	; (8007e6c <__sfp+0x84>)
 8007df2:	681e      	ldr	r6, [r3, #0]
 8007df4:	69b3      	ldr	r3, [r6, #24]
 8007df6:	b913      	cbnz	r3, 8007dfe <__sfp+0x16>
 8007df8:	4630      	mov	r0, r6
 8007dfa:	f7ff ffbd 	bl	8007d78 <__sinit>
 8007dfe:	3648      	adds	r6, #72	; 0x48
 8007e00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007e04:	3b01      	subs	r3, #1
 8007e06:	d503      	bpl.n	8007e10 <__sfp+0x28>
 8007e08:	6833      	ldr	r3, [r6, #0]
 8007e0a:	b30b      	cbz	r3, 8007e50 <__sfp+0x68>
 8007e0c:	6836      	ldr	r6, [r6, #0]
 8007e0e:	e7f7      	b.n	8007e00 <__sfp+0x18>
 8007e10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e14:	b9d5      	cbnz	r5, 8007e4c <__sfp+0x64>
 8007e16:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <__sfp+0x88>)
 8007e18:	60e3      	str	r3, [r4, #12]
 8007e1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007e1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007e20:	f000 f847 	bl	8007eb2 <__retarget_lock_init_recursive>
 8007e24:	f7ff ff96 	bl	8007d54 <__sfp_lock_release>
 8007e28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007e2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007e30:	6025      	str	r5, [r4, #0]
 8007e32:	61a5      	str	r5, [r4, #24]
 8007e34:	2208      	movs	r2, #8
 8007e36:	4629      	mov	r1, r5
 8007e38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e3c:	f7fb fd6c 	bl	8003918 <memset>
 8007e40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e48:	4620      	mov	r0, r4
 8007e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e4c:	3468      	adds	r4, #104	; 0x68
 8007e4e:	e7d9      	b.n	8007e04 <__sfp+0x1c>
 8007e50:	2104      	movs	r1, #4
 8007e52:	4638      	mov	r0, r7
 8007e54:	f7ff ff62 	bl	8007d1c <__sfmoreglue>
 8007e58:	4604      	mov	r4, r0
 8007e5a:	6030      	str	r0, [r6, #0]
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	d1d5      	bne.n	8007e0c <__sfp+0x24>
 8007e60:	f7ff ff78 	bl	8007d54 <__sfp_lock_release>
 8007e64:	230c      	movs	r3, #12
 8007e66:	603b      	str	r3, [r7, #0]
 8007e68:	e7ee      	b.n	8007e48 <__sfp+0x60>
 8007e6a:	bf00      	nop
 8007e6c:	080087d4 	.word	0x080087d4
 8007e70:	ffff0001 	.word	0xffff0001

08007e74 <_fwalk_reent>:
 8007e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e78:	4606      	mov	r6, r0
 8007e7a:	4688      	mov	r8, r1
 8007e7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e80:	2700      	movs	r7, #0
 8007e82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e86:	f1b9 0901 	subs.w	r9, r9, #1
 8007e8a:	d505      	bpl.n	8007e98 <_fwalk_reent+0x24>
 8007e8c:	6824      	ldr	r4, [r4, #0]
 8007e8e:	2c00      	cmp	r4, #0
 8007e90:	d1f7      	bne.n	8007e82 <_fwalk_reent+0xe>
 8007e92:	4638      	mov	r0, r7
 8007e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e98:	89ab      	ldrh	r3, [r5, #12]
 8007e9a:	2b01      	cmp	r3, #1
 8007e9c:	d907      	bls.n	8007eae <_fwalk_reent+0x3a>
 8007e9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	d003      	beq.n	8007eae <_fwalk_reent+0x3a>
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	47c0      	blx	r8
 8007eac:	4307      	orrs	r7, r0
 8007eae:	3568      	adds	r5, #104	; 0x68
 8007eb0:	e7e9      	b.n	8007e86 <_fwalk_reent+0x12>

08007eb2 <__retarget_lock_init_recursive>:
 8007eb2:	4770      	bx	lr

08007eb4 <__retarget_lock_acquire_recursive>:
 8007eb4:	4770      	bx	lr

08007eb6 <__retarget_lock_release_recursive>:
 8007eb6:	4770      	bx	lr

08007eb8 <__swhatbuf_r>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	460e      	mov	r6, r1
 8007ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ec0:	2900      	cmp	r1, #0
 8007ec2:	b096      	sub	sp, #88	; 0x58
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	461d      	mov	r5, r3
 8007ec8:	da07      	bge.n	8007eda <__swhatbuf_r+0x22>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	602b      	str	r3, [r5, #0]
 8007ece:	89b3      	ldrh	r3, [r6, #12]
 8007ed0:	061a      	lsls	r2, r3, #24
 8007ed2:	d410      	bmi.n	8007ef6 <__swhatbuf_r+0x3e>
 8007ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ed8:	e00e      	b.n	8007ef8 <__swhatbuf_r+0x40>
 8007eda:	466a      	mov	r2, sp
 8007edc:	f000 f902 	bl	80080e4 <_fstat_r>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	dbf2      	blt.n	8007eca <__swhatbuf_r+0x12>
 8007ee4:	9a01      	ldr	r2, [sp, #4]
 8007ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007eee:	425a      	negs	r2, r3
 8007ef0:	415a      	adcs	r2, r3
 8007ef2:	602a      	str	r2, [r5, #0]
 8007ef4:	e7ee      	b.n	8007ed4 <__swhatbuf_r+0x1c>
 8007ef6:	2340      	movs	r3, #64	; 0x40
 8007ef8:	2000      	movs	r0, #0
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	b016      	add	sp, #88	; 0x58
 8007efe:	bd70      	pop	{r4, r5, r6, pc}

08007f00 <__smakebuf_r>:
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f04:	079d      	lsls	r5, r3, #30
 8007f06:	4606      	mov	r6, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	d507      	bpl.n	8007f1c <__smakebuf_r+0x1c>
 8007f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f10:	6023      	str	r3, [r4, #0]
 8007f12:	6123      	str	r3, [r4, #16]
 8007f14:	2301      	movs	r3, #1
 8007f16:	6163      	str	r3, [r4, #20]
 8007f18:	b002      	add	sp, #8
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	ab01      	add	r3, sp, #4
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f7ff ffca 	bl	8007eb8 <__swhatbuf_r>
 8007f24:	9900      	ldr	r1, [sp, #0]
 8007f26:	4605      	mov	r5, r0
 8007f28:	4630      	mov	r0, r6
 8007f2a:	f7ff f97f 	bl	800722c <_malloc_r>
 8007f2e:	b948      	cbnz	r0, 8007f44 <__smakebuf_r+0x44>
 8007f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f34:	059a      	lsls	r2, r3, #22
 8007f36:	d4ef      	bmi.n	8007f18 <__smakebuf_r+0x18>
 8007f38:	f023 0303 	bic.w	r3, r3, #3
 8007f3c:	f043 0302 	orr.w	r3, r3, #2
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	e7e3      	b.n	8007f0c <__smakebuf_r+0xc>
 8007f44:	4b0d      	ldr	r3, [pc, #52]	; (8007f7c <__smakebuf_r+0x7c>)
 8007f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f48:	89a3      	ldrh	r3, [r4, #12]
 8007f4a:	6020      	str	r0, [r4, #0]
 8007f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f50:	81a3      	strh	r3, [r4, #12]
 8007f52:	9b00      	ldr	r3, [sp, #0]
 8007f54:	6163      	str	r3, [r4, #20]
 8007f56:	9b01      	ldr	r3, [sp, #4]
 8007f58:	6120      	str	r0, [r4, #16]
 8007f5a:	b15b      	cbz	r3, 8007f74 <__smakebuf_r+0x74>
 8007f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f60:	4630      	mov	r0, r6
 8007f62:	f000 f8d1 	bl	8008108 <_isatty_r>
 8007f66:	b128      	cbz	r0, 8007f74 <__smakebuf_r+0x74>
 8007f68:	89a3      	ldrh	r3, [r4, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	f043 0301 	orr.w	r3, r3, #1
 8007f72:	81a3      	strh	r3, [r4, #12]
 8007f74:	89a0      	ldrh	r0, [r4, #12]
 8007f76:	4305      	orrs	r5, r0
 8007f78:	81a5      	strh	r5, [r4, #12]
 8007f7a:	e7cd      	b.n	8007f18 <__smakebuf_r+0x18>
 8007f7c:	08007d11 	.word	0x08007d11

08007f80 <_malloc_usable_size_r>:
 8007f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f84:	1f18      	subs	r0, r3, #4
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	bfbc      	itt	lt
 8007f8a:	580b      	ldrlt	r3, [r1, r0]
 8007f8c:	18c0      	addlt	r0, r0, r3
 8007f8e:	4770      	bx	lr

08007f90 <_raise_r>:
 8007f90:	291f      	cmp	r1, #31
 8007f92:	b538      	push	{r3, r4, r5, lr}
 8007f94:	4604      	mov	r4, r0
 8007f96:	460d      	mov	r5, r1
 8007f98:	d904      	bls.n	8007fa4 <_raise_r+0x14>
 8007f9a:	2316      	movs	r3, #22
 8007f9c:	6003      	str	r3, [r0, #0]
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa2:	bd38      	pop	{r3, r4, r5, pc}
 8007fa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007fa6:	b112      	cbz	r2, 8007fae <_raise_r+0x1e>
 8007fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fac:	b94b      	cbnz	r3, 8007fc2 <_raise_r+0x32>
 8007fae:	4620      	mov	r0, r4
 8007fb0:	f000 f830 	bl	8008014 <_getpid_r>
 8007fb4:	462a      	mov	r2, r5
 8007fb6:	4601      	mov	r1, r0
 8007fb8:	4620      	mov	r0, r4
 8007fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fbe:	f000 b817 	b.w	8007ff0 <_kill_r>
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d00a      	beq.n	8007fdc <_raise_r+0x4c>
 8007fc6:	1c59      	adds	r1, r3, #1
 8007fc8:	d103      	bne.n	8007fd2 <_raise_r+0x42>
 8007fca:	2316      	movs	r3, #22
 8007fcc:	6003      	str	r3, [r0, #0]
 8007fce:	2001      	movs	r0, #1
 8007fd0:	e7e7      	b.n	8007fa2 <_raise_r+0x12>
 8007fd2:	2400      	movs	r4, #0
 8007fd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fd8:	4628      	mov	r0, r5
 8007fda:	4798      	blx	r3
 8007fdc:	2000      	movs	r0, #0
 8007fde:	e7e0      	b.n	8007fa2 <_raise_r+0x12>

08007fe0 <raise>:
 8007fe0:	4b02      	ldr	r3, [pc, #8]	; (8007fec <raise+0xc>)
 8007fe2:	4601      	mov	r1, r0
 8007fe4:	6818      	ldr	r0, [r3, #0]
 8007fe6:	f7ff bfd3 	b.w	8007f90 <_raise_r>
 8007fea:	bf00      	nop
 8007fec:	20000018 	.word	0x20000018

08007ff0 <_kill_r>:
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4d07      	ldr	r5, [pc, #28]	; (8008010 <_kill_r+0x20>)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	f7f9 ffed 	bl	8001fdc <_kill>
 8008002:	1c43      	adds	r3, r0, #1
 8008004:	d102      	bne.n	800800c <_kill_r+0x1c>
 8008006:	682b      	ldr	r3, [r5, #0]
 8008008:	b103      	cbz	r3, 800800c <_kill_r+0x1c>
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	bd38      	pop	{r3, r4, r5, pc}
 800800e:	bf00      	nop
 8008010:	200005d8 	.word	0x200005d8

08008014 <_getpid_r>:
 8008014:	f7f9 bfe0 	b.w	8001fd8 <_getpid>

08008018 <__sread>:
 8008018:	b510      	push	{r4, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	f000 f894 	bl	800814c <_read_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	bfab      	itete	ge
 8008028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802a:	89a3      	ldrhlt	r3, [r4, #12]
 800802c:	181b      	addge	r3, r3, r0
 800802e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008032:	bfac      	ite	ge
 8008034:	6563      	strge	r3, [r4, #84]	; 0x54
 8008036:	81a3      	strhlt	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__swrite>:
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	461f      	mov	r7, r3
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	05db      	lsls	r3, r3, #23
 8008044:	4605      	mov	r5, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4616      	mov	r6, r2
 800804a:	d505      	bpl.n	8008058 <__swrite+0x1e>
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2302      	movs	r3, #2
 8008052:	2200      	movs	r2, #0
 8008054:	f000 f868 	bl	8008128 <_lseek_r>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	f000 b817 	b.w	80080a0 <_write_r>

08008072 <__sseek>:
 8008072:	b510      	push	{r4, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 f855 	bl	8008128 <_lseek_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	bf15      	itete	ne
 8008084:	6560      	strne	r0, [r4, #84]	; 0x54
 8008086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800808e:	81a3      	strheq	r3, [r4, #12]
 8008090:	bf18      	it	ne
 8008092:	81a3      	strhne	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__sclose>:
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 b813 	b.w	80080c4 <_close_r>
	...

080080a0 <_write_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	; (80080c0 <_write_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7f9 ffb2 	bl	8002018 <_write>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_write_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_write_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	200005d8 	.word	0x200005d8

080080c4 <_close_r>:
 80080c4:	b538      	push	{r3, r4, r5, lr}
 80080c6:	4d06      	ldr	r5, [pc, #24]	; (80080e0 <_close_r+0x1c>)
 80080c8:	2300      	movs	r3, #0
 80080ca:	4604      	mov	r4, r0
 80080cc:	4608      	mov	r0, r1
 80080ce:	602b      	str	r3, [r5, #0]
 80080d0:	f7f9 ffb0 	bl	8002034 <_close>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	d102      	bne.n	80080de <_close_r+0x1a>
 80080d8:	682b      	ldr	r3, [r5, #0]
 80080da:	b103      	cbz	r3, 80080de <_close_r+0x1a>
 80080dc:	6023      	str	r3, [r4, #0]
 80080de:	bd38      	pop	{r3, r4, r5, pc}
 80080e0:	200005d8 	.word	0x200005d8

080080e4 <_fstat_r>:
 80080e4:	b538      	push	{r3, r4, r5, lr}
 80080e6:	4d07      	ldr	r5, [pc, #28]	; (8008104 <_fstat_r+0x20>)
 80080e8:	2300      	movs	r3, #0
 80080ea:	4604      	mov	r4, r0
 80080ec:	4608      	mov	r0, r1
 80080ee:	4611      	mov	r1, r2
 80080f0:	602b      	str	r3, [r5, #0]
 80080f2:	f7f9 ffa2 	bl	800203a <_fstat>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d102      	bne.n	8008100 <_fstat_r+0x1c>
 80080fa:	682b      	ldr	r3, [r5, #0]
 80080fc:	b103      	cbz	r3, 8008100 <_fstat_r+0x1c>
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	bd38      	pop	{r3, r4, r5, pc}
 8008102:	bf00      	nop
 8008104:	200005d8 	.word	0x200005d8

08008108 <_isatty_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	4d06      	ldr	r5, [pc, #24]	; (8008124 <_isatty_r+0x1c>)
 800810c:	2300      	movs	r3, #0
 800810e:	4604      	mov	r4, r0
 8008110:	4608      	mov	r0, r1
 8008112:	602b      	str	r3, [r5, #0]
 8008114:	f7f9 ff96 	bl	8002044 <_isatty>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_isatty_r+0x1a>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_isatty_r+0x1a>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	200005d8 	.word	0x200005d8

08008128 <_lseek_r>:
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4d07      	ldr	r5, [pc, #28]	; (8008148 <_lseek_r+0x20>)
 800812c:	4604      	mov	r4, r0
 800812e:	4608      	mov	r0, r1
 8008130:	4611      	mov	r1, r2
 8008132:	2200      	movs	r2, #0
 8008134:	602a      	str	r2, [r5, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	f7f9 ff86 	bl	8002048 <_lseek>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_lseek_r+0x1e>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_lseek_r+0x1e>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	200005d8 	.word	0x200005d8

0800814c <_read_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	; (800816c <_read_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f9 ff4c 	bl	8001ff8 <_read>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_read_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_read_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	200005d8 	.word	0x200005d8

08008170 <_init>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	bf00      	nop
 8008174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008176:	bc08      	pop	{r3}
 8008178:	469e      	mov	lr, r3
 800817a:	4770      	bx	lr

0800817c <_fini>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr
