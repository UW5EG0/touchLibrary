
touchTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aec  08008068  08008068  00018068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b54  08008b54  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b5c  08008b5c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b5c  08008b5c  00018b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b60  08008b60  00018b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          000003f8  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   000111fa  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000224c  00000000  00000000  00031416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00033668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a1b  00000000  00000000  00034180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010513  00000000  00000000  00055b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6ec0  00000000  00000000  000660ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012cf6e  2**0
                  CONTENTS, READONLY
 20 .debug_loc    000091e8  00000000  00000000  0012cfc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_ranges 00000ab8  00000000  00000000  001361b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  000035cc  00000000  00000000  00136c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008050 	.word	0x08008050

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08008050 	.word	0x08008050

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	2400      	movs	r4, #0
 8000ff2:	9405      	str	r4, [sp, #20]
 8000ff4:	9406      	str	r4, [sp, #24]
 8000ff6:	9407      	str	r4, [sp, #28]
 8000ff8:	9408      	str	r4, [sp, #32]
 8000ffa:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffc:	9400      	str	r4, [sp, #0]
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <MX_GPIO_Init+0x114>)
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f042 0210 	orr.w	r2, r2, #16
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f002 0210 	and.w	r2, r2, #16
 800100e:	9200      	str	r2, [sp, #0]
 8001010:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	9401      	str	r4, [sp, #4]
 8001014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001016:	f042 0204 	orr.w	r2, r2, #4
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
 800101c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800101e:	f002 0204 	and.w	r2, r2, #4
 8001022:	9201      	str	r2, [sp, #4]
 8001024:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001026:	9402      	str	r4, [sp, #8]
 8001028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800102a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800102e:	631a      	str	r2, [r3, #48]	; 0x30
 8001030:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001032:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001036:	9202      	str	r2, [sp, #8]
 8001038:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	9403      	str	r4, [sp, #12]
 800103c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	631a      	str	r2, [r3, #48]	; 0x30
 8001044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001046:	f002 0201 	and.w	r2, r2, #1
 800104a:	9203      	str	r2, [sp, #12]
 800104c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	9404      	str	r4, [sp, #16]
 8001050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001052:	f042 0202 	orr.w	r2, r2, #2
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	9304      	str	r3, [sp, #16]
 8001060:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_A_Pin|LED_B_Pin, GPIO_PIN_SET);
 8001062:	4f28      	ldr	r7, [pc, #160]	; (8001104 <MX_GPIO_Init+0x118>)
 8001064:	2201      	movs	r2, #1
 8001066:	21c0      	movs	r1, #192	; 0xc0
 8001068:	4638      	mov	r0, r7
 800106a:	f001 f98a 	bl	8002382 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 800106e:	4e26      	ldr	r6, [pc, #152]	; (8001108 <MX_GPIO_Init+0x11c>)
 8001070:	4622      	mov	r2, r4
 8001072:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001076:	4630      	mov	r0, r6
 8001078:	f001 f983 	bl	8002382 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_0_Pin KEY_1_Pin */
  GPIO_InitStruct.Pin = KEY_0_Pin|KEY_1_Pin;
 800107c:	2318      	movs	r3, #24
 800107e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001080:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001084:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2501      	movs	r5, #1
 8001088:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800108a:	a905      	add	r1, sp, #20
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <MX_GPIO_Init+0x120>)
 800108e:	f001 f887 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_A_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_A_Pin|LED_B_Pin;
 8001092:	23c0      	movs	r3, #192	; 0xc0
 8001094:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	a905      	add	r1, sp, #20
 800109e:	4638      	mov	r0, r7
 80010a0:	f001 f87e 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_PENIRQ_Pin */
  GPIO_InitStruct.Pin = TOUCH_PENIRQ_Pin;
 80010a4:	2320      	movs	r3, #32
 80010a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80010a8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80010ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ae:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(TOUCH_PENIRQ_GPIO_Port, &GPIO_InitStruct);
 80010b0:	a905      	add	r1, sp, #20
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <MX_GPIO_Init+0x124>)
 80010b4:	f001 f874 	bl	80021a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XPT2046_CS_Pin */
  GPIO_InitStruct.Pin = XPT2046_CS_Pin;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(XPT2046_CS_GPIO_Port, &GPIO_InitStruct);
 80010c4:	a905      	add	r1, sp, #20
 80010c6:	4630      	mov	r0, r6
 80010c8:	f001 f86a 	bl	80021a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80010cc:	4622      	mov	r2, r4
 80010ce:	4621      	mov	r1, r4
 80010d0:	2009      	movs	r0, #9
 80010d2:	f000 fffb 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80010d6:	2009      	movs	r0, #9
 80010d8:	f001 f82c 	bl	8002134 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010dc:	4622      	mov	r2, r4
 80010de:	4621      	mov	r1, r4
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 fff3 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010e6:	200a      	movs	r0, #10
 80010e8:	f001 f824 	bl	8002134 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010ec:	4622      	mov	r2, r4
 80010ee:	4621      	mov	r1, r4
 80010f0:	2017      	movs	r0, #23
 80010f2:	f000 ffeb 	bl	80020cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010f6:	2017      	movs	r0, #23
 80010f8:	f001 f81c 	bl	8002134 <HAL_NVIC_EnableIRQ>

}
 80010fc:	b00b      	add	sp, #44	; 0x2c
 80010fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40021000 	.word	0x40021000
 8001110:	40020800 	.word	0x40020800

08001114 <XPT2046_clearCalibrationData>:
}

/**
 * Сброс калибровки тача на условно заводские настройки - в зависимости от предзаводских испытаний - менять по усмотрению
 **/
void XPT2046_clearCalibrationData(){
 8001114:	b470      	push	{r4, r5, r6}
	_referencePoints[POINT_CENTER].xADC = 2048;
 8001116:	4b16      	ldr	r3, [pc, #88]	; (8001170 <XPT2046_clearCalibrationData+0x5c>)
 8001118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800111c:	609a      	str	r2, [r3, #8]
	_referencePoints[POINT_CENTER].yADC = 2048;
 800111e:	60da      	str	r2, [r3, #12]
	_referencePoints[POINT_CENTER].xDisplay = _displayLeft+_displayWidth/2;
 8001120:	4a14      	ldr	r2, [pc, #80]	; (8001174 <XPT2046_clearCalibrationData+0x60>)
 8001122:	f9b2 6000 	ldrsh.w	r6, [r2]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <XPT2046_clearCalibrationData+0x64>)
 8001128:	8812      	ldrh	r2, [r2, #0]
 800112a:	eb06 0152 	add.w	r1, r6, r2, lsr #1
 800112e:	6019      	str	r1, [r3, #0]
	_referencePoints[POINT_CENTER].yDisplay = _displayBottom+_displayHeight/2;
 8001130:	4912      	ldr	r1, [pc, #72]	; (800117c <XPT2046_clearCalibrationData+0x68>)
 8001132:	f9b1 0000 	ldrsh.w	r0, [r1]
 8001136:	4912      	ldr	r1, [pc, #72]	; (8001180 <XPT2046_clearCalibrationData+0x6c>)
 8001138:	8809      	ldrh	r1, [r1, #0]
 800113a:	eb00 0451 	add.w	r4, r0, r1, lsr #1
 800113e:	605c      	str	r4, [r3, #4]

	_referencePoints[POINT_TOPLEFT].xADC = 0;
 8001140:	2400      	movs	r4, #0
 8001142:	619c      	str	r4, [r3, #24]
	_referencePoints[POINT_TOPLEFT].yADC = 4095;
 8001144:	f640 75ff 	movw	r5, #4095	; 0xfff
 8001148:	61dd      	str	r5, [r3, #28]
	_referencePoints[POINT_TOPLEFT].xDisplay = _displayLeft;
 800114a:	611e      	str	r6, [r3, #16]
	_referencePoints[POINT_TOPLEFT].yDisplay = _displayBottom+_displayHeight;
 800114c:	4401      	add	r1, r0
 800114e:	6159      	str	r1, [r3, #20]

	_referencePoints[POINT_TOPRIGHT].xADC = 4095;
 8001150:	629d      	str	r5, [r3, #40]	; 0x28
	_referencePoints[POINT_TOPRIGHT].yADC = 4095;
 8001152:	62dd      	str	r5, [r3, #44]	; 0x2c
	_referencePoints[POINT_TOPRIGHT].xDisplay = _displayLeft+_displayWidth;
 8001154:	4432      	add	r2, r6
 8001156:	621a      	str	r2, [r3, #32]
	_referencePoints[POINT_TOPRIGHT].yDisplay = _displayBottom+_displayHeight;
 8001158:	6259      	str	r1, [r3, #36]	; 0x24

	_referencePoints[POINT_BOTTOMLEFT].xADC = 0;
 800115a:	639c      	str	r4, [r3, #56]	; 0x38
	_referencePoints[POINT_BOTTOMLEFT].yADC = 0;
 800115c:	63dc      	str	r4, [r3, #60]	; 0x3c
	_referencePoints[POINT_BOTTOMLEFT].xDisplay = _displayLeft;
 800115e:	631e      	str	r6, [r3, #48]	; 0x30
	_referencePoints[POINT_BOTTOMLEFT].yDisplay = _displayBottom;
 8001160:	6358      	str	r0, [r3, #52]	; 0x34

	_referencePoints[POINT_BOTTOMRIGHT].xADC = 4095;
 8001162:	649d      	str	r5, [r3, #72]	; 0x48
	_referencePoints[POINT_BOTTOMRIGHT].yADC = 0;
 8001164:	64dc      	str	r4, [r3, #76]	; 0x4c
	_referencePoints[POINT_BOTTOMRIGHT].xDisplay = _displayLeft+_displayWidth;
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
	_referencePoints[POINT_BOTTOMRIGHT].yDisplay = _displayBottom;
 8001168:	6458      	str	r0, [r3, #68]	; 0x44

}
 800116a:	bc70      	pop	{r4, r5, r6}
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000500 	.word	0x20000500
 8001174:	2000056c 	.word	0x2000056c
 8001178:	20000558 	.word	0x20000558
 800117c:	20000574 	.word	0x20000574
 8001180:	2000056e 	.word	0x2000056e

08001184 <XPT2046_pointToScreen>:
    	XPT2046_Wait(100);
    }
}
/*Пересчет координат */
void XPT2046_pointToScreen(){
	_xDisplay = _displayLeft + (_xRawFiltered-_xRawOnZeroPoint)/_xStep;
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <XPT2046_pointToScreen+0x84>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	ee07 3a10 	vmov	s14, r3
 800118e:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 8001192:	4b1e      	ldr	r3, [pc, #120]	; (800120c <XPT2046_pointToScreen+0x88>)
 8001194:	ed93 7a00 	vldr	s14, [r3]
 8001198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800119c:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <XPT2046_pointToScreen+0x8c>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011a6:	4b1b      	ldr	r3, [pc, #108]	; (8001214 <XPT2046_pointToScreen+0x90>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	ee07 3a90 	vmov	s15, r3
 80011b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011bc:	4b16      	ldr	r3, [pc, #88]	; (8001218 <XPT2046_pointToScreen+0x94>)
 80011be:	ee17 2a90 	vmov	r2, s15
 80011c2:	801a      	strh	r2, [r3, #0]
	_yDisplay = _displayBottom + (_yRawFiltered-_yRawOnZeroPoint)/_yStep;
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <XPT2046_pointToScreen+0x98>)
 80011c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ca:	ee07 3a10 	vmov	s14, r3
 80011ce:	eef8 7ac7 	vcvt.f32.s32	s15, s14
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <XPT2046_pointToScreen+0x9c>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <XPT2046_pointToScreen+0xa0>)
 80011de:	edd3 7a00 	vldr	s15, [r3]
 80011e2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <XPT2046_pointToScreen+0xa4>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80011f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <XPT2046_pointToScreen+0xa8>)
 80011fe:	ee17 2a90 	vmov	r2, s15
 8001202:	801a      	strh	r2, [r3, #0]
}
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	2000057c 	.word	0x2000057c
 800120c:	200004ec 	.word	0x200004ec
 8001210:	20000580 	.word	0x20000580
 8001214:	2000056c 	.word	0x2000056c
 8001218:	200004e0 	.word	0x200004e0
 800121c:	200004fa 	.word	0x200004fa
 8001220:	200004f4 	.word	0x200004f4
 8001224:	20000588 	.word	0x20000588
 8001228:	20000574 	.word	0x20000574
 800122c:	20000576 	.word	0x20000576

08001230 <XPT2046_updateCalibrationParameters>:
		_referencePoints[pointIndex].yADC = yADC;
	}
}
/*На основании данных калибровочных точек определяем коэфициенты*/
uint8_t XPT2046_updateCalibrationParameters(){
	_xStep = (float)((_XBRT -_XTLT)+(_XTRT - _XBLT))/ (float)((_XBRS - _XTLS)+(_XTRS - _XBLS));
 8001230:	4b33      	ldr	r3, [pc, #204]	; (8001300 <XPT2046_updateCalibrationParameters+0xd0>)
 8001232:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001234:	6999      	ldr	r1, [r3, #24]
 8001236:	1a52      	subs	r2, r2, r1
 8001238:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800123a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800123c:	1a09      	subs	r1, r1, r0
 800123e:	440a      	add	r2, r1
 8001240:	ee07 2a90 	vmov	s15, r2
 8001244:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001248:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800124a:	6919      	ldr	r1, [r3, #16]
 800124c:	1a52      	subs	r2, r2, r1
 800124e:	6a19      	ldr	r1, [r3, #32]
 8001250:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001252:	1a09      	subs	r1, r1, r0
 8001254:	440a      	add	r2, r1
 8001256:	ee07 2a90 	vmov	s15, r2
 800125a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125e:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <XPT2046_updateCalibrationParameters+0xd4>)
 8001264:	ed82 6a00 	vstr	s12, [r2]
	_yStep = (float)((_YTLT - _YBRT)+(_YTRT - _YBLT))/ (float)((_YTLS - _YBRS)+(_YTRS - _YBLS));
 8001268:	69da      	ldr	r2, [r3, #28]
 800126a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800126c:	1a52      	subs	r2, r2, r1
 800126e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001270:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001272:	1a09      	subs	r1, r1, r0
 8001274:	440a      	add	r2, r1
 8001276:	ee07 2a90 	vmov	s15, r2
 800127a:	eeb8 5a67 	vcvt.f32.u32	s10, s15
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001282:	1a52      	subs	r2, r2, r1
 8001284:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001286:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001288:	1a09      	subs	r1, r1, r0
 800128a:	440a      	add	r2, r1
 800128c:	ee07 2a90 	vmov	s15, r2
 8001290:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001294:	eec5 4a25 	vdiv.f32	s9, s10, s11
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <XPT2046_updateCalibrationParameters+0xd8>)
 800129a:	edc2 4a00 	vstr	s9, [r2]
	_xRawOnZeroPoint = (_XCT-(_xStep * (_XCS-_displayLeft)));
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	491a      	ldr	r1, [pc, #104]	; (800130c <XPT2046_updateCalibrationParameters+0xdc>)
 80012a2:	f9b1 1000 	ldrsh.w	r1, [r1]
 80012a6:	1a52      	subs	r2, r2, r1
 80012a8:	ee06 2a90 	vmov	s13, r2
 80012ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80012b0:	ee26 6a86 	vmul.f32	s12, s13, s12
 80012b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80012b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80012c0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <XPT2046_updateCalibrationParameters+0xe0>)
 80012c6:	ee16 1a90 	vmov	r1, s13
 80012ca:	8011      	strh	r1, [r2, #0]
	_yRawOnZeroPoint = (_YCT-(_yStep * (_YCS-_displayBottom)));
 80012cc:	edd3 7a03 	vldr	s15, [r3, #12]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4a10      	ldr	r2, [pc, #64]	; (8001314 <XPT2046_updateCalibrationParameters+0xe4>)
 80012d4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80012d8:	1a9b      	subs	r3, r3, r2
 80012da:	ee07 3a10 	vmov	s14, r3
 80012de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80012e2:	ee27 7a24 	vmul.f32	s14, s14, s9
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <XPT2046_updateCalibrationParameters+0xe8>)
 80012f4:	ee17 2a90 	vmov	r2, s15
 80012f8:	801a      	strh	r2, [r3, #0]

	return XPT2046_OK;
}
 80012fa:	2000      	movs	r0, #0
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	20000500 	.word	0x20000500
 8001304:	20000580 	.word	0x20000580
 8001308:	20000588 	.word	0x20000588
 800130c:	2000056c 	.word	0x2000056c
 8001310:	2000057c 	.word	0x2000057c
 8001314:	20000574 	.word	0x20000574
 8001318:	200004fa 	.word	0x200004fa

0800131c <XPT2046_Select>:
void XPT2046_Select(){
 800131c:	b508      	push	{r3, lr}
HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001324:	4801      	ldr	r0, [pc, #4]	; (800132c <XPT2046_Select+0x10>)
 8001326:	f001 f82c 	bl	8002382 <HAL_GPIO_WritePin>
}
 800132a:	bd08      	pop	{r3, pc}
 800132c:	40020400 	.word	0x40020400

08001330 <XPT2046_Deselect>:
void XPT2046_Deselect(){
 8001330:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 8001332:	2201      	movs	r2, #1
 8001334:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001338:	4801      	ldr	r0, [pc, #4]	; (8001340 <XPT2046_Deselect+0x10>)
 800133a:	f001 f822 	bl	8002382 <HAL_GPIO_WritePin>
}
 800133e:	bd08      	pop	{r3, pc}
 8001340:	40020400 	.word	0x40020400

08001344 <XPT2046_SPI_send>:
void XPT2046_SPI_send(uint8_t data) {
 8001344:	b500      	push	{lr}
 8001346:	b083      	sub	sp, #12
 8001348:	f88d 0007 	strb.w	r0, [sp, #7]
	 	 HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001350:	2201      	movs	r2, #1
 8001352:	f10d 0107 	add.w	r1, sp, #7
 8001356:	4803      	ldr	r0, [pc, #12]	; (8001364 <XPT2046_SPI_send+0x20>)
 8001358:	f002 f831 	bl	80033be <HAL_SPI_Transmit>
}
 800135c:	b003      	add	sp, #12
 800135e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001362:	bf00      	nop
 8001364:	20000424 	.word	0x20000424

08001368 <XPT2046_SPI_Transmit_Receive>:
void XPT2046_SPI_Transmit_Receive(uint8_t data_in, uint16_t *data_out) {
 8001368:	b530      	push	{r4, r5, lr}
 800136a:	b087      	sub	sp, #28
 800136c:	460c      	mov	r4, r1
 800136e:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t data[2] = {0,0};
 8001372:	2300      	movs	r3, #0
 8001374:	f8ad 3014 	strh.w	r3, [sp, #20]
	HAL_SPI_Transmit(&hspi2, &data_in, 1, HAL_MAX_DELAY);
 8001378:	4d0d      	ldr	r5, [pc, #52]	; (80013b0 <XPT2046_SPI_Transmit_Receive+0x48>)
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800137e:	2201      	movs	r2, #1
 8001380:	f10d 010f 	add.w	r1, sp, #15
 8001384:	4628      	mov	r0, r5
 8001386:	f002 f81a 	bl	80033be <HAL_SPI_Transmit>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)zeroes_tx, data, 2, 1000);
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2302      	movs	r3, #2
 8001392:	aa05      	add	r2, sp, #20
 8001394:	4907      	ldr	r1, [pc, #28]	; (80013b4 <XPT2046_SPI_Transmit_Receive+0x4c>)
 8001396:	4628      	mov	r0, r5
 8001398:	f002 f8e8 	bl	800356c <HAL_SPI_TransmitReceive>
	datatmp =  data[0] * 256 + data[1];
 800139c:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80013a0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80013a4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	*data_out = datatmp;
 80013a8:	8023      	strh	r3, [r4, #0]
}
 80013aa:	b007      	add	sp, #28
 80013ac:	bd30      	pop	{r4, r5, pc}
 80013ae:	bf00      	nop
 80013b0:	20000424 	.word	0x20000424
 80013b4:	08008684 	.word	0x08008684

080013b8 <XPT2046_SingleScan>:
uint16_t XPT2046_SingleScan(uint8_t coord){
 80013b8:	b510      	push	{r4, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	4604      	mov	r4, r0
	XPT2046_Select();
 80013be:	f7ff ffad 	bl	800131c <XPT2046_Select>
	XPT2046_SPI_Transmit_Receive(CONTROL_STARTBIT |coord, &res);
 80013c2:	f10d 0106 	add.w	r1, sp, #6
 80013c6:	f044 0080 	orr.w	r0, r4, #128	; 0x80
 80013ca:	f7ff ffcd 	bl	8001368 <XPT2046_SPI_Transmit_Receive>
	XPT2046_Deselect();
 80013ce:	f7ff ffaf 	bl	8001330 <XPT2046_Deselect>
	res >>= 3;
 80013d2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 80013d6:	08c0      	lsrs	r0, r0, #3
 80013d8:	b002      	add	sp, #8
 80013da:	bd10      	pop	{r4, pc}

080013dc <XPT2046_Wait>:
void XPT2046_Wait(uint32_t timeout){
 80013dc:	b508      	push	{r3, lr}
	HAL_Delay(timeout);
 80013de:	f000 fe4f 	bl	8002080 <HAL_Delay>
}
 80013e2:	bd08      	pop	{r3, pc}

080013e4 <XPT2046_GetTick>:
uint32_t XPT2046_GetTick(){
 80013e4:	b508      	push	{r3, lr}
 return	HAL_GetTick();
 80013e6:	f000 fe45 	bl	8002074 <HAL_GetTick>
}
 80013ea:	bd08      	pop	{r3, pc}

080013ec <XPT2046_PEN_STILL_Interrupt_Callback>:
void XPT2046_PEN_STILL_Interrupt_Callback() {
 80013ec:	b508      	push	{r3, lr}
	_endTouchTickMS = XPT2046_GetTick();
 80013ee:	f7ff fff9 	bl	80013e4 <XPT2046_GetTick>
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <XPT2046_PEN_STILL_Interrupt_Callback+0x18>)
 80013f4:	6018      	str	r0, [r3, #0]
	_lastTouchDuration = _endTouchTickMS - _startTouchTickMS;
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <XPT2046_PEN_STILL_Interrupt_Callback+0x1c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	1ac0      	subs	r0, r0, r3
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <XPT2046_PEN_STILL_Interrupt_Callback+0x20>)
 80013fe:	6018      	str	r0, [r3, #0]
}
 8001400:	bd08      	pop	{r3, pc}
 8001402:	bf00      	nop
 8001404:	200004fc 	.word	0x200004fc
 8001408:	200004e8 	.word	0x200004e8
 800140c:	20000578 	.word	0x20000578

08001410 <XPT2046_Enable_Interrupt>:
void XPT2046_Enable_Interrupt() {
 8001410:	b508      	push	{r3, lr}
   HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001412:	2017      	movs	r0, #23
 8001414:	f000 fe8e 	bl	8002134 <HAL_NVIC_EnableIRQ>
}
 8001418:	bd08      	pop	{r3, pc}
	...

0800141c <XPT2046_init>:
void XPT2046_init(uint16_t displayWidth, uint16_t displayHeight, int16_t displayLeft, int16_t displayBottom) {
 800141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800141e:	4605      	mov	r5, r0
 8001420:	460c      	mov	r4, r1
 8001422:	4616      	mov	r6, r2
 8001424:	461f      	mov	r7, r3
	XPT2046_Wait(100);
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f7ff ffd8 	bl	80013dc <XPT2046_Wait>
	_displayBottom = displayBottom;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <XPT2046_init+0x54>)
 800142e:	801f      	strh	r7, [r3, #0]
	_displayLeft = displayLeft;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <XPT2046_init+0x58>)
 8001432:	801e      	strh	r6, [r3, #0]
	_displayWidth = displayWidth;
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <XPT2046_init+0x5c>)
 8001436:	801d      	strh	r5, [r3, #0]
	_displayHeight = displayHeight;
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <XPT2046_init+0x60>)
 800143a:	801c      	strh	r4, [r3, #0]
	_typeOfPoint = -1;
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <XPT2046_init+0x64>)
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	701a      	strb	r2, [r3, #0]
	_isWaiting = 0;
 8001442:	2400      	movs	r4, #0
 8001444:	4b0f      	ldr	r3, [pc, #60]	; (8001484 <XPT2046_init+0x68>)
 8001446:	701c      	strb	r4, [r3, #0]
	XPT2046_Select();
 8001448:	f7ff ff68 	bl	800131c <XPT2046_Select>
	XPT2046_SPI_send(CONTROL_STARTBIT);
 800144c:	2080      	movs	r0, #128	; 0x80
 800144e:	f7ff ff79 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_SPI_send(0);
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff ff76 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_SPI_send(0x00);
 8001458:	4620      	mov	r0, r4
 800145a:	f7ff ff73 	bl	8001344 <XPT2046_SPI_send>
	XPT2046_Deselect();
 800145e:	f7ff ff67 	bl	8001330 <XPT2046_Deselect>
	XPT2046_Wait(1000);
 8001462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001466:	f7ff ffb9 	bl	80013dc <XPT2046_Wait>
	XPT2046_Enable_Interrupt();
 800146a:	f7ff ffd1 	bl	8001410 <XPT2046_Enable_Interrupt>
}
 800146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001470:	20000574 	.word	0x20000574
 8001474:	2000056c 	.word	0x2000056c
 8001478:	20000558 	.word	0x20000558
 800147c:	2000056e 	.word	0x2000056e
 8001480:	20000480 	.word	0x20000480
 8001484:	20000208 	.word	0x20000208

08001488 <XPT2046_Disable_Interrupt>:
void XPT2046_Disable_Interrupt() {
 8001488:	b508      	push	{r3, lr}
   HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800148a:	2017      	movs	r0, #23
 800148c:	f000 fe60 	bl	8002150 <HAL_NVIC_DisableIRQ>
}
 8001490:	bd08      	pop	{r3, pc}
	...

08001494 <touch_Pressed>:
void touch_Pressed(uint16_t x, uint16_t y) {
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	4607      	mov	r7, r0
 800149a:	460e      	mov	r6, r1
	ssd1306_Clear();
 800149c:	f000 fba4 	bl	8001be8 <ssd1306_Clear>
	ssd1306_SetColor(White);
 80014a0:	2001      	movs	r0, #1
 80014a2:	f000 fac5 	bl	8001a30 <ssd1306_SetColor>
	ssd1306_SetCursor(0, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	4608      	mov	r0, r1
 80014aa:	f000 fb8f 	bl	8001bcc <ssd1306_SetCursor>
	sprintf(status,"pressed"); //Событие "Нажали"
 80014ae:	4c1e      	ldr	r4, [pc, #120]	; (8001528 <touch_Pressed+0x94>)
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <touch_Pressed+0x98>)
 80014b2:	cb03      	ldmia	r3!, {r0, r1}
 80014b4:	6020      	str	r0, [r4, #0]
 80014b6:	6061      	str	r1, [r4, #4]
	ssd1306_WriteString(status, Font_7x8);
 80014b8:	4d1d      	ldr	r5, [pc, #116]	; (8001530 <touch_Pressed+0x9c>)
 80014ba:	e895 0006 	ldmia.w	r5, {r1, r2}
 80014be:	4620      	mov	r0, r4
 80014c0:	f000 fb6e 	bl	8001ba0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 9);
 80014c4:	2109      	movs	r1, #9
 80014c6:	2000      	movs	r0, #0
 80014c8:	f000 fb80 	bl	8001bcc <ssd1306_SetCursor>
	sprintf(status,"X %4i (%f)",x,_xRawFiltered); // Замеры координаты X в пикселях экрана и усредненный результат замера
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <touch_Pressed+0xa0>)
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	e9cd 0100 	strd	r0, r1, [sp]
 80014d8:	463a      	mov	r2, r7
 80014da:	4917      	ldr	r1, [pc, #92]	; (8001538 <touch_Pressed+0xa4>)
 80014dc:	4620      	mov	r0, r4
 80014de:	f003 f813 	bl	8004508 <siprintf>
	ssd1306_WriteString(status, Font_7x8);
 80014e2:	e895 0006 	ldmia.w	r5, {r1, r2}
 80014e6:	4620      	mov	r0, r4
 80014e8:	f000 fb5a 	bl	8001ba0 <ssd1306_WriteString>
	ssd1306_SetCursor(0, 18);
 80014ec:	2112      	movs	r1, #18
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 fb6c 	bl	8001bcc <ssd1306_SetCursor>
    sprintf(status,"Y %4i (%f)",y,_yRawFiltered); // Замеры координаты Y в пикселях экрана и усредненный результат замера
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <touch_Pressed+0xa8>)
 80014f6:	6818      	ldr	r0, [r3, #0]
 80014f8:	f7ff f826 	bl	8000548 <__aeabi_f2d>
 80014fc:	e9cd 0100 	strd	r0, r1, [sp]
 8001500:	4632      	mov	r2, r6
 8001502:	490f      	ldr	r1, [pc, #60]	; (8001540 <touch_Pressed+0xac>)
 8001504:	4620      	mov	r0, r4
 8001506:	f002 ffff 	bl	8004508 <siprintf>
    ssd1306_WriteString(status, Font_7x8);
 800150a:	e895 0006 	ldmia.w	r5, {r1, r2}
 800150e:	4620      	mov	r0, r4
 8001510:	f000 fb46 	bl	8001ba0 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8001514:	f000 fa92 	bl	8001a3c <ssd1306_UpdateScreen>
    HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET); //Зажигаем контрольный светодиод
 8001518:	2200      	movs	r2, #0
 800151a:	2180      	movs	r1, #128	; 0x80
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <touch_Pressed+0xb0>)
 800151e:	f000 ff30 	bl	8002382 <HAL_GPIO_WritePin>
}
 8001522:	b003      	add	sp, #12
 8001524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001526:	bf00      	nop
 8001528:	2000058c 	.word	0x2000058c
 800152c:	08008658 	.word	0x08008658
 8001530:	20000000 	.word	0x20000000
 8001534:	200004ec 	.word	0x200004ec
 8001538:	08008660 	.word	0x08008660
 800153c:	200004f4 	.word	0x200004f4
 8001540:	0800866c 	.word	0x0800866c
 8001544:	40020000 	.word	0x40020000

08001548 <XPT2046_PEN_DOWN_Interrupt_Callback>:
void XPT2046_PEN_DOWN_Interrupt_Callback(){
 8001548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800154c:	ed2d 8b04 	vpush	{d8-d9}
	XPT2046_Disable_Interrupt();
 8001550:	f7ff ff9a 	bl	8001488 <XPT2046_Disable_Interrupt>
	_startTouchTickMS = XPT2046_GetTick();
 8001554:	f7ff ff46 	bl	80013e4 <XPT2046_GetTick>
 8001558:	4b89      	ldr	r3, [pc, #548]	; (8001780 <XPT2046_PEN_DOWN_Interrupt_Callback+0x238>)
 800155a:	6018      	str	r0, [r3, #0]
	_isWaiting = 0;
 800155c:	4b89      	ldr	r3, [pc, #548]	; (8001784 <XPT2046_PEN_DOWN_Interrupt_Callback+0x23c>)
 800155e:	2200      	movs	r2, #0
 8001560:	701a      	strb	r2, [r3, #0]
	_xRawFiltered = 0.0;
 8001562:	2300      	movs	r3, #0
 8001564:	4a88      	ldr	r2, [pc, #544]	; (8001788 <XPT2046_PEN_DOWN_Interrupt_Callback+0x240>)
 8001566:	6013      	str	r3, [r2, #0]
	_yRawFiltered = 0.0;
 8001568:	4a88      	ldr	r2, [pc, #544]	; (800178c <XPT2046_PEN_DOWN_Interrupt_Callback+0x244>)
 800156a:	6013      	str	r3, [r2, #0]
	_z1RawFiltered = 0.0;
 800156c:	4a88      	ldr	r2, [pc, #544]	; (8001790 <XPT2046_PEN_DOWN_Interrupt_Callback+0x248>)
 800156e:	6013      	str	r3, [r2, #0]
	_z2RawFiltered = 0.0;
 8001570:	4a88      	ldr	r2, [pc, #544]	; (8001794 <XPT2046_PEN_DOWN_Interrupt_Callback+0x24c>)
 8001572:	6013      	str	r3, [r2, #0]
	uint16_t maxScans = 100;
 8001574:	2464      	movs	r4, #100	; 0x64
	while(maxScans > 0){
 8001576:	2c00      	cmp	r4, #0
 8001578:	f000 80d0 	beq.w	800171c <XPT2046_PEN_DOWN_Interrupt_Callback+0x1d4>
	maxScans--;
 800157c:	3c01      	subs	r4, #1
 800157e:	b2a4      	uxth	r4, r4
	_xRaw =  XPT2046_SingleScan(CONTROL_CHANNEL_X);
 8001580:	2050      	movs	r0, #80	; 0x50
 8001582:	f7ff ff19 	bl	80013b8 <XPT2046_SingleScan>
 8001586:	4e84      	ldr	r6, [pc, #528]	; (8001798 <XPT2046_PEN_DOWN_Interrupt_Callback+0x250>)
 8001588:	8030      	strh	r0, [r6, #0]
	_yRaw =  XPT2046_SingleScan(CONTROL_CHANNEL_Y);
 800158a:	2010      	movs	r0, #16
 800158c:	f7ff ff14 	bl	80013b8 <XPT2046_SingleScan>
 8001590:	4b82      	ldr	r3, [pc, #520]	; (800179c <XPT2046_PEN_DOWN_Interrupt_Callback+0x254>)
 8001592:	8018      	strh	r0, [r3, #0]
	_z1Raw = XPT2046_SingleScan(CONTROL_CHANNEL_Z1);
 8001594:	2030      	movs	r0, #48	; 0x30
 8001596:	f7ff ff0f 	bl	80013b8 <XPT2046_SingleScan>
 800159a:	4b81      	ldr	r3, [pc, #516]	; (80017a0 <XPT2046_PEN_DOWN_Interrupt_Callback+0x258>)
 800159c:	8018      	strh	r0, [r3, #0]
	_z2Raw = XPT2046_SingleScan(CONTROL_CHANNEL_Z2);
 800159e:	2040      	movs	r0, #64	; 0x40
 80015a0:	f7ff ff0a 	bl	80013b8 <XPT2046_SingleScan>
 80015a4:	4605      	mov	r5, r0
 80015a6:	4b7f      	ldr	r3, [pc, #508]	; (80017a4 <XPT2046_PEN_DOWN_Interrupt_Callback+0x25c>)
 80015a8:	8018      	strh	r0, [r3, #0]
	if (_xRaw > 0 && _yRaw > 0 && _xRaw < 4096 && _yRaw < 4096)
 80015aa:	8836      	ldrh	r6, [r6, #0]
 80015ac:	2e00      	cmp	r6, #0
 80015ae:	d0e2      	beq.n	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015b0:	4b7a      	ldr	r3, [pc, #488]	; (800179c <XPT2046_PEN_DOWN_Interrupt_Callback+0x254>)
 80015b2:	881f      	ldrh	r7, [r3, #0]
 80015b4:	2f00      	cmp	r7, #0
 80015b6:	d0de      	beq.n	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015b8:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80015bc:	d2db      	bcs.n	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 80015be:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 80015c2:	d2d8      	bcs.n	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
	_xRawFiltered = _xRawFiltered*0.98 + _xRaw	*0.02;
 80015c4:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8001788 <XPT2046_PEN_DOWN_Interrupt_Callback+0x240>
 80015c8:	f8da 0000 	ldr.w	r0, [sl]
 80015cc:	f7fe ffbc 	bl	8000548 <__aeabi_f2d>
 80015d0:	a367      	add	r3, pc, #412	; (adr r3, 8001770 <XPT2046_PEN_DOWN_Interrupt_Callback+0x228>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7ff f80f 	bl	80005f8 <__aeabi_dmul>
 80015da:	4680      	mov	r8, r0
 80015dc:	4689      	mov	r9, r1
 80015de:	4630      	mov	r0, r6
 80015e0:	f7fe ffa0 	bl	8000524 <__aeabi_i2d>
 80015e4:	a364      	add	r3, pc, #400	; (adr r3, 8001778 <XPT2046_PEN_DOWN_Interrupt_Callback+0x230>)
 80015e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ea:	f7ff f805 	bl	80005f8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4640      	mov	r0, r8
 80015f4:	4649      	mov	r1, r9
 80015f6:	f7fe fe49 	bl	800028c <__adddf3>
 80015fa:	f7ff faf5 	bl	8000be8 <__aeabi_d2f>
 80015fe:	ee08 0a10 	vmov	s16, r0
 8001602:	f8ca 0000 	str.w	r0, [sl]
	_yRawFiltered = _yRawFiltered*0.98 + _yRaw	*0.02;
 8001606:	4e61      	ldr	r6, [pc, #388]	; (800178c <XPT2046_PEN_DOWN_Interrupt_Callback+0x244>)
 8001608:	6830      	ldr	r0, [r6, #0]
 800160a:	f7fe ff9d 	bl	8000548 <__aeabi_f2d>
 800160e:	a358      	add	r3, pc, #352	; (adr r3, 8001770 <XPT2046_PEN_DOWN_Interrupt_Callback+0x228>)
 8001610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001614:	f7fe fff0 	bl	80005f8 <__aeabi_dmul>
 8001618:	4680      	mov	r8, r0
 800161a:	4689      	mov	r9, r1
 800161c:	4638      	mov	r0, r7
 800161e:	f7fe ff81 	bl	8000524 <__aeabi_i2d>
 8001622:	a355      	add	r3, pc, #340	; (adr r3, 8001778 <XPT2046_PEN_DOWN_Interrupt_Callback+0x230>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7fe ffe6 	bl	80005f8 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4640      	mov	r0, r8
 8001632:	4649      	mov	r1, r9
 8001634:	f7fe fe2a 	bl	800028c <__adddf3>
 8001638:	f7ff fad6 	bl	8000be8 <__aeabi_d2f>
 800163c:	ee08 0a90 	vmov	s17, r0
 8001640:	6030      	str	r0, [r6, #0]
	_z1RawFiltered = _z1RawFiltered*0.75 + _z1Raw*0.25;
 8001642:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8001790 <XPT2046_PEN_DOWN_Interrupt_Callback+0x248>
 8001646:	f8d8 0000 	ldr.w	r0, [r8]
 800164a:	f7fe ff7d 	bl	8000548 <__aeabi_f2d>
 800164e:	2200      	movs	r2, #0
 8001650:	4b55      	ldr	r3, [pc, #340]	; (80017a8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x260>)
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4606      	mov	r6, r0
 8001658:	460f      	mov	r7, r1
 800165a:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <XPT2046_PEN_DOWN_Interrupt_Callback+0x258>)
 800165c:	8818      	ldrh	r0, [r3, #0]
 800165e:	f7fe ff61 	bl	8000524 <__aeabi_i2d>
 8001662:	2200      	movs	r2, #0
 8001664:	4b51      	ldr	r3, [pc, #324]	; (80017ac <XPT2046_PEN_DOWN_Interrupt_Callback+0x264>)
 8001666:	f7fe ffc7 	bl	80005f8 <__aeabi_dmul>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4630      	mov	r0, r6
 8001670:	4639      	mov	r1, r7
 8001672:	f7fe fe0b 	bl	800028c <__adddf3>
 8001676:	f7ff fab7 	bl	8000be8 <__aeabi_d2f>
 800167a:	ee09 0a10 	vmov	s18, r0
 800167e:	f8c8 0000 	str.w	r0, [r8]
	_z2RawFiltered = _z2RawFiltered*0.75 + _z2Raw*0.25;
 8001682:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8001794 <XPT2046_PEN_DOWN_Interrupt_Callback+0x24c>
 8001686:	f8d8 0000 	ldr.w	r0, [r8]
 800168a:	f7fe ff5d 	bl	8000548 <__aeabi_f2d>
 800168e:	2200      	movs	r2, #0
 8001690:	4b45      	ldr	r3, [pc, #276]	; (80017a8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x260>)
 8001692:	f7fe ffb1 	bl	80005f8 <__aeabi_dmul>
 8001696:	4606      	mov	r6, r0
 8001698:	460f      	mov	r7, r1
 800169a:	4628      	mov	r0, r5
 800169c:	f7fe ff42 	bl	8000524 <__aeabi_i2d>
 80016a0:	2200      	movs	r2, #0
 80016a2:	4b42      	ldr	r3, [pc, #264]	; (80017ac <XPT2046_PEN_DOWN_Interrupt_Callback+0x264>)
 80016a4:	f7fe ffa8 	bl	80005f8 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4630      	mov	r0, r6
 80016ae:	4639      	mov	r1, r7
 80016b0:	f7fe fdec 	bl	800028c <__adddf3>
 80016b4:	f7ff fa98 	bl	8000be8 <__aeabi_d2f>
 80016b8:	ee07 0a90 	vmov	s15, r0
 80016bc:	f8c8 0000 	str.w	r0, [r8]
	_deltaX=_xRawFiltered - _xRawFilteredOld;
 80016c0:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <XPT2046_PEN_DOWN_Interrupt_Callback+0x268>)
 80016c2:	ed93 7a00 	vldr	s14, [r3]
 80016c6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80016ca:	4b3a      	ldr	r3, [pc, #232]	; (80017b4 <XPT2046_PEN_DOWN_Interrupt_Callback+0x26c>)
 80016cc:	ed83 8a00 	vstr	s16, [r3]
	_deltaY=_yRawFiltered - _yRawFilteredOld;
 80016d0:	4b39      	ldr	r3, [pc, #228]	; (80017b8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x270>)
 80016d2:	ed93 7a00 	vldr	s14, [r3]
 80016d6:	ee78 8ac7 	vsub.f32	s17, s17, s14
 80016da:	4b38      	ldr	r3, [pc, #224]	; (80017bc <XPT2046_PEN_DOWN_Interrupt_Callback+0x274>)
 80016dc:	edc3 8a00 	vstr	s17, [r3]
	_deltaZ1=_z1RawFiltered - _z1RawFilteredOld;
 80016e0:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <XPT2046_PEN_DOWN_Interrupt_Callback+0x278>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	ee39 9a47 	vsub.f32	s18, s18, s14
 80016ea:	4b36      	ldr	r3, [pc, #216]	; (80017c4 <XPT2046_PEN_DOWN_Interrupt_Callback+0x27c>)
 80016ec:	ed83 9a00 	vstr	s18, [r3]
	_deltaZ2=_z2RawFiltered - _z2RawFilteredOld;
 80016f0:	4b35      	ldr	r3, [pc, #212]	; (80017c8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x280>)
 80016f2:	ed93 7a00 	vldr	s14, [r3]
 80016f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <XPT2046_PEN_DOWN_Interrupt_Callback+0x284>)
 80016fc:	edc3 7a00 	vstr	s15, [r3]
	if (_deltaX < 1.0 && _deltaY < 1.0) // pointFix
 8001700:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8001704:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	f57f af33 	bpl.w	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
 8001710:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001718:	f57f af2d 	bpl.w	8001576 <XPT2046_PEN_DOWN_Interrupt_Callback+0x2e>
		if (_typeOfPoint == POINT_USER){
 800171c:	4b2c      	ldr	r3, [pc, #176]	; (80017d0 <XPT2046_PEN_DOWN_Interrupt_Callback+0x288>)
 800171e:	f993 1000 	ldrsb.w	r1, [r3]
 8001722:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
 8001726:	d01a      	beq.n	800175e <XPT2046_PEN_DOWN_Interrupt_Callback+0x216>
			_referencePoints[_typeOfPoint].xADC = (uint16_t) _xRawFiltered;
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <XPT2046_PEN_DOWN_Interrupt_Callback+0x240>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001732:	ee17 3a90 	vmov	r3, s15
 8001736:	b29b      	uxth	r3, r3
 8001738:	4a26      	ldr	r2, [pc, #152]	; (80017d4 <XPT2046_PEN_DOWN_Interrupt_Callback+0x28c>)
 800173a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800173e:	6093      	str	r3, [r2, #8]
			_referencePoints[_typeOfPoint].yADC = (uint16_t) _yRawFiltered;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <XPT2046_PEN_DOWN_Interrupt_Callback+0x244>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174a:	ee17 3a90 	vmov	r3, s15
 800174e:	b29b      	uxth	r3, r3
 8001750:	60d3      	str	r3, [r2, #12]
	XPT2046_Enable_Interrupt();
 8001752:	f7ff fe5d 	bl	8001410 <XPT2046_Enable_Interrupt>
}
 8001756:	ecbd 8b04 	vpop	{d8-d9}
 800175a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			XPT2046_pointToScreen();
 800175e:	f7ff fd11 	bl	8001184 <XPT2046_pointToScreen>
			touch_Pressed(_xDisplay, _yDisplay);
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <XPT2046_PEN_DOWN_Interrupt_Callback+0x290>)
 8001764:	8819      	ldrh	r1, [r3, #0]
 8001766:	4b1d      	ldr	r3, [pc, #116]	; (80017dc <XPT2046_PEN_DOWN_Interrupt_Callback+0x294>)
 8001768:	8818      	ldrh	r0, [r3, #0]
 800176a:	f7ff fe93 	bl	8001494 <touch_Pressed>
 800176e:	e7f0      	b.n	8001752 <XPT2046_PEN_DOWN_Interrupt_Callback+0x20a>
 8001770:	f5c28f5c 	.word	0xf5c28f5c
 8001774:	3fef5c28 	.word	0x3fef5c28
 8001778:	47ae147b 	.word	0x47ae147b
 800177c:	3f947ae1 	.word	0x3f947ae1
 8001780:	200004e8 	.word	0x200004e8
 8001784:	20000208 	.word	0x20000208
 8001788:	200004ec 	.word	0x200004ec
 800178c:	200004f4 	.word	0x200004f4
 8001790:	20000570 	.word	0x20000570
 8001794:	20000550 	.word	0x20000550
 8001798:	20000420 	.word	0x20000420
 800179c:	200004f8 	.word	0x200004f8
 80017a0:	20000584 	.word	0x20000584
 80017a4:	200004f0 	.word	0x200004f0
 80017a8:	3fe80000 	.word	0x3fe80000
 80017ac:	3fd00000 	.word	0x3fd00000
 80017b0:	20000564 	.word	0x20000564
 80017b4:	200005cc 	.word	0x200005cc
 80017b8:	2000055c 	.word	0x2000055c
 80017bc:	20000568 	.word	0x20000568
 80017c0:	2000047c 	.word	0x2000047c
 80017c4:	20000484 	.word	0x20000484
 80017c8:	200004e4 	.word	0x200004e4
 80017cc:	20000554 	.word	0x20000554
 80017d0:	20000480 	.word	0x20000480
 80017d4:	20000500 	.word	0x20000500
 80017d8:	20000576 	.word	0x20000576
 80017dc:	200004e0 	.word	0x200004e0

080017e0 <XPT2046_unified_Interrupt_Callback>:
uint32_t XPT2046_GetTouchPressDuration(){
  return XPT2046_GetTick() - _startTouchTickMS;
}

void XPT2046_unified_Interrupt_Callback(GPIO_PinState IRQPinStatus, uint32_t IRQMomentTick){
 80017e0:	b508      	push	{r3, lr}
	if (IRQPinStatus) {
 80017e2:	b110      	cbz	r0, 80017ea <XPT2046_unified_Interrupt_Callback+0xa>
		_riseTick = IRQMomentTick;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <XPT2046_unified_Interrupt_Callback+0x24>)
 80017e6:	6019      	str	r1, [r3, #0]
			XPT2046_PEN_DOWN_Interrupt_Callback();
		} else {
			XPT2046_PEN_STILL_Interrupt_Callback();
		}
	}
}
 80017e8:	bd08      	pop	{r3, pc}
		_fallTick = IRQMomentTick;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <XPT2046_unified_Interrupt_Callback+0x28>)
 80017ec:	6019      	str	r1, [r3, #0]
		if (_fallTick - _riseTick > 20){
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <XPT2046_unified_Interrupt_Callback+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1ac9      	subs	r1, r1, r3
 80017f4:	2914      	cmp	r1, #20
 80017f6:	d902      	bls.n	80017fe <XPT2046_unified_Interrupt_Callback+0x1e>
			XPT2046_PEN_DOWN_Interrupt_Callback();
 80017f8:	f7ff fea6 	bl	8001548 <XPT2046_PEN_DOWN_Interrupt_Callback>
 80017fc:	e7f4      	b.n	80017e8 <XPT2046_unified_Interrupt_Callback+0x8>
			XPT2046_PEN_STILL_Interrupt_Callback();
 80017fe:	f7ff fdf5 	bl	80013ec <XPT2046_PEN_STILL_Interrupt_Callback>
}
 8001802:	e7f1      	b.n	80017e8 <XPT2046_unified_Interrupt_Callback+0x8>
 8001804:	20000560 	.word	0x20000560
 8001808:	200004dc 	.word	0x200004dc

0800180c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800180e:	e7fe      	b.n	800180e <Error_Handler+0x2>

08001810 <MX_SPI2_Init>:
{
 8001810:	b508      	push	{r3, lr}
  hspi2.Instance = SPI2;
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_SPI2_Init+0x38>)
 8001814:	4b0d      	ldr	r3, [pc, #52]	; (800184c <MX_SPI2_Init+0x3c>)
 8001816:	6003      	str	r3, [r0, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001818:	f44f 7382 	mov.w	r3, #260	; 0x104
 800181c:	6043      	str	r3, [r0, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800181e:	2300      	movs	r3, #0
 8001820:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001822:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001824:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001826:	6143      	str	r3, [r0, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800182c:	6182      	str	r2, [r0, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800182e:	2228      	movs	r2, #40	; 0x28
 8001830:	61c2      	str	r2, [r0, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001832:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001834:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001836:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001838:	230a      	movs	r3, #10
 800183a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800183c:	f001 fd60 	bl	8003300 <HAL_SPI_Init>
 8001840:	b900      	cbnz	r0, 8001844 <MX_SPI2_Init+0x34>
}
 8001842:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001844:	f7ff ffe2 	bl	800180c <Error_Handler>
 8001848:	20000424 	.word	0x20000424
 800184c:	40003800 	.word	0x40003800

08001850 <MX_I2C2_Init>:
{
 8001850:	b508      	push	{r3, lr}
  hi2c2.Instance = I2C2;
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <MX_I2C2_Init+0x30>)
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <MX_I2C2_Init+0x34>)
 8001856:	6003      	str	r3, [r0, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_I2C2_Init+0x38>)
 800185a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	2300      	movs	r3, #0
 800185e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 120;
 8001860:	2278      	movs	r2, #120	; 0x78
 8001862:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001864:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001868:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800186a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800186c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001874:	f000 ff0c 	bl	8002690 <HAL_I2C_Init>
 8001878:	b900      	cbnz	r0, 800187c <MX_I2C2_Init+0x2c>
}
 800187a:	bd08      	pop	{r3, pc}
    Error_Handler();
 800187c:	f7ff ffc6 	bl	800180c <Error_Handler>
 8001880:	20000488 	.word	0x20000488
 8001884:	40005800 	.word	0x40005800
 8001888:	00061a80 	.word	0x00061a80

0800188c <SystemClock_Config>:
{
 800188c:	b500      	push	{lr}
 800188e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001890:	2230      	movs	r2, #48	; 0x30
 8001892:	2100      	movs	r1, #0
 8001894:	a808      	add	r0, sp, #32
 8001896:	f001 ffaf 	bl	80037f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800189a:	2300      	movs	r3, #0
 800189c:	9303      	str	r3, [sp, #12]
 800189e:	9304      	str	r3, [sp, #16]
 80018a0:	9305      	str	r3, [sp, #20]
 80018a2:	9306      	str	r3, [sp, #24]
 80018a4:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	9301      	str	r3, [sp, #4]
 80018a8:	4a21      	ldr	r2, [pc, #132]	; (8001930 <SystemClock_Config+0xa4>)
 80018aa:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80018ac:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80018b0:	6411      	str	r1, [r2, #64]	; 0x40
 80018b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018b4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80018b8:	9201      	str	r2, [sp, #4]
 80018ba:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018bc:	9302      	str	r3, [sp, #8]
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <SystemClock_Config+0xa8>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	9302      	str	r3, [sp, #8]
 80018d0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018d2:	2301      	movs	r3, #1
 80018d4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018da:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018dc:	2302      	movs	r3, #2
 80018de:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018e0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018e4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018e6:	2204      	movs	r2, #4
 80018e8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80018ea:	22a8      	movs	r2, #168	; 0xa8
 80018ec:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ee:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80018f0:	2307      	movs	r3, #7
 80018f2:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f4:	a808      	add	r0, sp, #32
 80018f6:	f001 f925 	bl	8002b44 <HAL_RCC_OscConfig>
 80018fa:	b9a8      	cbnz	r0, 8001928 <SystemClock_Config+0x9c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018fc:	230f      	movs	r3, #15
 80018fe:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001900:	2302      	movs	r3, #2
 8001902:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001904:	2300      	movs	r3, #0
 8001906:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001908:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800190c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800190e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001912:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001914:	2105      	movs	r1, #5
 8001916:	a803      	add	r0, sp, #12
 8001918:	f001 fb7c 	bl	8003014 <HAL_RCC_ClockConfig>
 800191c:	b930      	cbnz	r0, 800192c <SystemClock_Config+0xa0>
  HAL_RCC_EnableCSS();
 800191e:	f001 fb0d 	bl	8002f3c <HAL_RCC_EnableCSS>
}
 8001922:	b015      	add	sp, #84	; 0x54
 8001924:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001928:	f7ff ff70 	bl	800180c <Error_Handler>
    Error_Handler();
 800192c:	f7ff ff6e 	bl	800180c <Error_Handler>
 8001930:	40023800 	.word	0x40023800
 8001934:	40007000 	.word	0x40007000

08001938 <main>:
{
 8001938:	b508      	push	{r3, lr}
  HAL_Init();
 800193a:	f000 fb75 	bl	8002028 <HAL_Init>
  SystemClock_Config();
 800193e:	f7ff ffa5 	bl	800188c <SystemClock_Config>
  MX_GPIO_Init();
 8001942:	f7ff fb53 	bl	8000fec <MX_GPIO_Init>
  MX_SPI2_Init();
 8001946:	f7ff ff63 	bl	8001810 <MX_SPI2_Init>
  MX_I2C2_Init();
 800194a:	f7ff ff81 	bl	8001850 <MX_I2C2_Init>
  HAL_Delay(500);
 800194e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001952:	f000 fb95 	bl	8002080 <HAL_Delay>
  ssd1306_Init();
 8001956:	f000 f951 	bl	8001bfc <ssd1306_Init>
  ssd1306_FlipScreenVertically();
 800195a:	f000 f93d 	bl	8001bd8 <ssd1306_FlipScreenVertically>
  ssd1306_UpdateScreen();
 800195e:	f000 f86d 	bl	8001a3c <ssd1306_UpdateScreen>
  sprintf(status,"connected");
 8001962:	4c17      	ldr	r4, [pc, #92]	; (80019c0 <main+0x88>)
 8001964:	4b17      	ldr	r3, [pc, #92]	; (80019c4 <main+0x8c>)
 8001966:	cb03      	ldmia	r3!, {r0, r1}
 8001968:	6020      	str	r0, [r4, #0]
 800196a:	6061      	str	r1, [r4, #4]
 800196c:	881b      	ldrh	r3, [r3, #0]
 800196e:	8123      	strh	r3, [r4, #8]
  ssd1306_Clear();
 8001970:	f000 f93a 	bl	8001be8 <ssd1306_Clear>
      ssd1306_SetColor(White);
 8001974:	2001      	movs	r0, #1
 8001976:	f000 f85b 	bl	8001a30 <ssd1306_SetColor>
      ssd1306_SetCursor(0, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	4608      	mov	r0, r1
 800197e:	f000 f925 	bl	8001bcc <ssd1306_SetCursor>
      ssd1306_WriteString(status, Font_7x8);
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <main+0x90>)
 8001984:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001988:	4620      	mov	r0, r4
 800198a:	f000 f909 	bl	8001ba0 <ssd1306_WriteString>
  	  ssd1306_UpdateScreen();
 800198e:	f000 f855 	bl	8001a3c <ssd1306_UpdateScreen>
  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001992:	2017      	movs	r0, #23
 8001994:	f000 fbdc 	bl	8002150 <HAL_NVIC_DisableIRQ>
  XPT2046_init(800, 480, 0,0); //инициализируем либу тача размером дисплея
 8001998:	2300      	movs	r3, #0
 800199a:	461a      	mov	r2, r3
 800199c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80019a0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80019a4:	f7ff fd3a 	bl	800141c <XPT2046_init>
  XPT2046_clearCalibrationData(); //трём старые данные калибровки
 80019a8:	f7ff fbb4 	bl	8001114 <XPT2046_clearCalibrationData>
  XPT2046_updateCalibrationParameters();
 80019ac:	f7ff fc40 	bl	8001230 <XPT2046_updateCalibrationParameters>
	  HAL_Delay(50);
 80019b0:	2032      	movs	r0, #50	; 0x32
 80019b2:	f000 fb65 	bl	8002080 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 80019b6:	2140      	movs	r1, #64	; 0x40
 80019b8:	4804      	ldr	r0, [pc, #16]	; (80019cc <main+0x94>)
 80019ba:	f000 fce8 	bl	800238e <HAL_GPIO_TogglePin>
   while (1)
 80019be:	e7f7      	b.n	80019b0 <main+0x78>
 80019c0:	2000058c 	.word	0x2000058c
 80019c4:	08008678 	.word	0x08008678
 80019c8:	20000000 	.word	0x20000000
 80019cc:	40020000 	.word	0x40020000

080019d0 <width>:
static void ssd1306_WriteCommand(uint8_t command);
static void ssd1306_WriteData(uint8_t* data, uint16_t size);
//
//  Get a width and height screen size
//
static const uint16_t width(void)	{ return SSD1306_WIDTH; };
 80019d0:	2080      	movs	r0, #128	; 0x80
 80019d2:	4770      	bx	lr

080019d4 <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 80019d4:	2020      	movs	r0, #32
 80019d6:	4770      	bx	lr

080019d8 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
static void ssd1306_WriteCommand(uint8_t command)
{
 80019d8:	b500      	push	{lr}
 80019da:	b087      	sub	sp, #28
 80019dc:	f88d 0017 	strb.w	r0, [sp, #23]
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 80019e0:	230a      	movs	r3, #10
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	2301      	movs	r3, #1
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	f10d 0217 	add.w	r2, sp, #23
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	2200      	movs	r2, #0
 80019f0:	2178      	movs	r1, #120	; 0x78
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <ssd1306_WriteCommand+0x28>)
 80019f4:	f000 ff2a 	bl	800284c <HAL_I2C_Mem_Write>
#endif
}
 80019f8:	b007      	add	sp, #28
 80019fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80019fe:	bf00      	nop
 8001a00:	20000488 	.word	0x20000488

08001a04 <ssd1306_WriteData>:

static void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8001a04:	b500      	push	{lr}
 8001a06:	b085      	sub	sp, #20
#ifdef USE_DMA
	while(HAL_I2C_GetState(&SSD1306_I2C_PORT) != HAL_I2C_STATE_READY);
	HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size);
#else
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8001a08:	2364      	movs	r3, #100	; 0x64
 8001a0a:	9302      	str	r3, [sp, #8]
 8001a0c:	9101      	str	r1, [sp, #4]
 8001a0e:	9000      	str	r0, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	2240      	movs	r2, #64	; 0x40
 8001a14:	2178      	movs	r1, #120	; 0x78
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <ssd1306_WriteData+0x20>)
 8001a18:	f000 ff18 	bl	800284c <HAL_I2C_Mem_Write>
#endif
}
 8001a1c:	b005      	add	sp, #20
 8001a1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a22:	bf00      	nop
 8001a24:	20000488 	.word	0x20000488

08001a28 <ssd1306_GetWidth>:
}
 8001a28:	2080      	movs	r0, #128	; 0x80
 8001a2a:	4770      	bx	lr

08001a2c <ssd1306_GetHeight>:
}
 8001a2c:	2020      	movs	r0, #32
 8001a2e:	4770      	bx	lr

08001a30 <ssd1306_SetColor>:
	SSD1306.Color = color;
 8001a30:	4b01      	ldr	r3, [pc, #4]	; (8001a38 <ssd1306_SetColor+0x8>)
 8001a32:	7158      	strb	r0, [r3, #5]
}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	2000020c 	.word	0x2000020c

08001a3c <ssd1306_UpdateScreen>:
{
 8001a3c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0; i < 8; i++)
 8001a3e:	2400      	movs	r4, #0
 8001a40:	e014      	b.n	8001a6c <ssd1306_UpdateScreen+0x30>
		ssd1306_WriteCommand(0xB0 + i);
 8001a42:	f1a4 0050 	sub.w	r0, r4, #80	; 0x50
 8001a46:	b2c0      	uxtb	r0, r0
 8001a48:	f7ff ffc6 	bl	80019d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETLOWCOLUMN);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff ffc3 	bl	80019d8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(SETHIGHCOLUMN);
 8001a52:	2010      	movs	r0, #16
 8001a54:	f7ff ffc0 	bl	80019d8 <ssd1306_WriteCommand>
		ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8001a58:	01e5      	lsls	r5, r4, #7
 8001a5a:	f7ff ffb9 	bl	80019d0 <width>
 8001a5e:	4601      	mov	r1, r0
 8001a60:	4804      	ldr	r0, [pc, #16]	; (8001a74 <ssd1306_UpdateScreen+0x38>)
 8001a62:	4428      	add	r0, r5
 8001a64:	f7ff ffce 	bl	8001a04 <ssd1306_WriteData>
	for (i = 0; i < 8; i++)
 8001a68:	3401      	adds	r4, #1
 8001a6a:	b2e4      	uxtb	r4, r4
 8001a6c:	2c07      	cmp	r4, #7
 8001a6e:	d9e8      	bls.n	8001a42 <ssd1306_UpdateScreen+0x6>
}
 8001a70:	bd38      	pop	{r3, r4, r5, pc}
 8001a72:	bf00      	nop
 8001a74:	20000214 	.word	0x20000214

08001a78 <ssd1306_DrawPixel>:
{
 8001a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7a:	4605      	mov	r5, r0
 8001a7c:	460c      	mov	r4, r1
	SSD1306_COLOR color = SSD1306.Color;
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <ssd1306_DrawPixel+0x68>)
 8001a80:	795f      	ldrb	r7, [r3, #5]
	if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8001a82:	b286      	uxth	r6, r0
 8001a84:	f7ff ffd0 	bl	8001a28 <ssd1306_GetWidth>
 8001a88:	4286      	cmp	r6, r0
 8001a8a:	d21a      	bcs.n	8001ac2 <ssd1306_DrawPixel+0x4a>
 8001a8c:	b2a6      	uxth	r6, r4
 8001a8e:	f7ff ffcd 	bl	8001a2c <ssd1306_GetHeight>
 8001a92:	4286      	cmp	r6, r0
 8001a94:	d215      	bcs.n	8001ac2 <ssd1306_DrawPixel+0x4a>
	if (SSD1306.Inverted)
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <ssd1306_DrawPixel+0x68>)
 8001a98:	791b      	ldrb	r3, [r3, #4]
 8001a9a:	b113      	cbz	r3, 8001aa2 <ssd1306_DrawPixel+0x2a>
		color = (SSD1306_COLOR) !color;
 8001a9c:	fab7 f787 	clz	r7, r7
 8001aa0:	097f      	lsrs	r7, r7, #5
	if (color == White)
 8001aa2:	2f01      	cmp	r7, #1
 8001aa4:	d00e      	beq.n	8001ac4 <ssd1306_DrawPixel+0x4c>
		SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8001aa6:	f7ff ff93 	bl	80019d0 <width>
 8001aaa:	08e3      	lsrs	r3, r4, #3
 8001aac:	fb00 5503 	mla	r5, r0, r3, r5
 8001ab0:	f004 0407 	and.w	r4, r4, #7
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	40a1      	lsls	r1, r4
 8001ab8:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <ssd1306_DrawPixel+0x6c>)
 8001aba:	5d5c      	ldrb	r4, [r3, r5]
 8001abc:	ea24 0401 	bic.w	r4, r4, r1
 8001ac0:	555c      	strb	r4, [r3, r5]
}
 8001ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8001ac4:	f7ff ff84 	bl	80019d0 <width>
 8001ac8:	08e3      	lsrs	r3, r4, #3
 8001aca:	fb00 5503 	mla	r5, r0, r3, r5
 8001ace:	f004 0407 	and.w	r4, r4, #7
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	40a1      	lsls	r1, r4
 8001ad6:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <ssd1306_DrawPixel+0x6c>)
 8001ad8:	5d5c      	ldrb	r4, [r3, r5]
 8001ada:	430c      	orrs	r4, r1
 8001adc:	555c      	strb	r4, [r3, r5]
 8001ade:	e7f0      	b.n	8001ac2 <ssd1306_DrawPixel+0x4a>
 8001ae0:	2000020c 	.word	0x2000020c
 8001ae4:	20000214 	.word	0x20000214

08001ae8 <ssd1306_WriteChar>:
{
 8001ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001aec:	b083      	sub	sp, #12
 8001aee:	4681      	mov	r9, r0
 8001af0:	ab02      	add	r3, sp, #8
 8001af2:	e903 0006 	stmdb	r3, {r1, r2}
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001af6:	f7ff ff6b 	bl	80019d0 <width>
 8001afa:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <ssd1306_WriteChar+0xb4>)
 8001afc:	881b      	ldrh	r3, [r3, #0]
 8001afe:	f89d 7000 	ldrb.w	r7, [sp]
 8001b02:	443b      	add	r3, r7
 8001b04:	4298      	cmp	r0, r3
 8001b06:	dd44      	ble.n	8001b92 <ssd1306_WriteChar+0xaa>
		height() <= (SSD1306.CurrentY + Font.FontHeight))
 8001b08:	f7ff ff64 	bl	80019d4 <height>
 8001b0c:	4b23      	ldr	r3, [pc, #140]	; (8001b9c <ssd1306_WriteChar+0xb4>)
 8001b0e:	885b      	ldrh	r3, [r3, #2]
 8001b10:	f89d a001 	ldrb.w	sl, [sp, #1]
 8001b14:	46d3      	mov	fp, sl
 8001b16:	4453      	add	r3, sl
	if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8001b18:	4298      	cmp	r0, r3
 8001b1a:	dd3c      	ble.n	8001b96 <ssd1306_WriteChar+0xae>
	for (i = 0; i < Font.FontHeight; i++)
 8001b1c:	2600      	movs	r6, #0
 8001b1e:	e025      	b.n	8001b6c <ssd1306_WriteChar+0x84>
				SSD1306.Color = !SSD1306.Color;
 8001b20:	4d1e      	ldr	r5, [pc, #120]	; (8001b9c <ssd1306_WriteChar+0xb4>)
 8001b22:	796b      	ldrb	r3, [r5, #5]
 8001b24:	fab3 f383 	clz	r3, r3
 8001b28:	095b      	lsrs	r3, r3, #5
 8001b2a:	716b      	strb	r3, [r5, #5]
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001b2c:	8828      	ldrh	r0, [r5, #0]
 8001b2e:	8869      	ldrh	r1, [r5, #2]
 8001b30:	4431      	add	r1, r6
 8001b32:	4420      	add	r0, r4
 8001b34:	b2c9      	uxtb	r1, r1
 8001b36:	b2c0      	uxtb	r0, r0
 8001b38:	f7ff ff9e 	bl	8001a78 <ssd1306_DrawPixel>
				SSD1306.Color = !SSD1306.Color;
 8001b3c:	796b      	ldrb	r3, [r5, #5]
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	716b      	strb	r3, [r5, #5]
		for (j = 0; j < Font.FontWidth; j++)
 8001b46:	3401      	adds	r4, #1
 8001b48:	42a7      	cmp	r7, r4
 8001b4a:	d90e      	bls.n	8001b6a <ssd1306_WriteChar+0x82>
			if ((b << j) & 0x8000)
 8001b4c:	fa08 f304 	lsl.w	r3, r8, r4
 8001b50:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001b54:	d0e4      	beq.n	8001b20 <ssd1306_WriteChar+0x38>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <ssd1306_WriteChar+0xb4>)
 8001b58:	8818      	ldrh	r0, [r3, #0]
 8001b5a:	8859      	ldrh	r1, [r3, #2]
 8001b5c:	4431      	add	r1, r6
 8001b5e:	4420      	add	r0, r4
 8001b60:	b2c9      	uxtb	r1, r1
 8001b62:	b2c0      	uxtb	r0, r0
 8001b64:	f7ff ff88 	bl	8001a78 <ssd1306_DrawPixel>
 8001b68:	e7ed      	b.n	8001b46 <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8001b6a:	3601      	adds	r6, #1
 8001b6c:	45b2      	cmp	sl, r6
 8001b6e:	d908      	bls.n	8001b82 <ssd1306_WriteChar+0x9a>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b70:	f1a9 0320 	sub.w	r3, r9, #32
 8001b74:	fb03 630b 	mla	r3, r3, fp, r6
 8001b78:	9a01      	ldr	r2, [sp, #4]
 8001b7a:	f832 8013 	ldrh.w	r8, [r2, r3, lsl #1]
		for (j = 0; j < Font.FontWidth; j++)
 8001b7e:	2400      	movs	r4, #0
 8001b80:	e7e2      	b.n	8001b48 <ssd1306_WriteChar+0x60>
	SSD1306.CurrentX += Font.FontWidth;
 8001b82:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <ssd1306_WriteChar+0xb4>)
 8001b84:	881a      	ldrh	r2, [r3, #0]
 8001b86:	4417      	add	r7, r2
 8001b88:	801f      	strh	r7, [r3, #0]
	return ch;
 8001b8a:	4648      	mov	r0, r9
}
 8001b8c:	b003      	add	sp, #12
 8001b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0;
 8001b92:	2000      	movs	r0, #0
 8001b94:	e7fa      	b.n	8001b8c <ssd1306_WriteChar+0xa4>
 8001b96:	2000      	movs	r0, #0
 8001b98:	e7f8      	b.n	8001b8c <ssd1306_WriteChar+0xa4>
 8001b9a:	bf00      	nop
 8001b9c:	2000020c 	.word	0x2000020c

08001ba0 <ssd1306_WriteString>:
{
 8001ba0:	b510      	push	{r4, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	4604      	mov	r4, r0
 8001ba6:	ab02      	add	r3, sp, #8
 8001ba8:	e903 0006 	stmdb	r3, {r1, r2}
	while (*str)
 8001bac:	7820      	ldrb	r0, [r4, #0]
 8001bae:	b150      	cbz	r0, 8001bc6 <ssd1306_WriteString+0x26>
		if (ssd1306_WriteChar(*str, Font) != *str)
 8001bb0:	ab02      	add	r3, sp, #8
 8001bb2:	e913 0006 	ldmdb	r3, {r1, r2}
 8001bb6:	f7ff ff97 	bl	8001ae8 <ssd1306_WriteChar>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	7820      	ldrb	r0, [r4, #0]
 8001bbe:	4283      	cmp	r3, r0
 8001bc0:	d101      	bne.n	8001bc6 <ssd1306_WriteString+0x26>
		str++;
 8001bc2:	3401      	adds	r4, #1
 8001bc4:	e7f2      	b.n	8001bac <ssd1306_WriteString+0xc>
}
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd10      	pop	{r4, pc}
	...

08001bcc <ssd1306_SetCursor>:
	SSD1306.CurrentX = x;
 8001bcc:	4b01      	ldr	r3, [pc, #4]	; (8001bd4 <ssd1306_SetCursor+0x8>)
 8001bce:	8018      	strh	r0, [r3, #0]
	SSD1306.CurrentY = y;
 8001bd0:	8059      	strh	r1, [r3, #2]
}
 8001bd2:	4770      	bx	lr
 8001bd4:	2000020c 	.word	0x2000020c

08001bd8 <ssd1306_FlipScreenVertically>:
{
 8001bd8:	b508      	push	{r3, lr}
	ssd1306_WriteCommand(SEGREMAP | 0x01);
 8001bda:	20a1      	movs	r0, #161	; 0xa1
 8001bdc:	f7ff fefc 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANDEC);           //Rotate screen 180 Deg
 8001be0:	20c8      	movs	r0, #200	; 0xc8
 8001be2:	f7ff fef9 	bl	80019d8 <ssd1306_WriteCommand>
}
 8001be6:	bd08      	pop	{r3, pc}

08001be8 <ssd1306_Clear>:
{
 8001be8:	b508      	push	{r3, lr}
	memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8001bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4801      	ldr	r0, [pc, #4]	; (8001bf8 <ssd1306_Clear+0x10>)
 8001bf2:	f001 fe01 	bl	80037f8 <memset>
}
 8001bf6:	bd08      	pop	{r3, pc}
 8001bf8:	20000214 	.word	0x20000214

08001bfc <ssd1306_Init>:
{
 8001bfc:	b510      	push	{r4, lr}
	if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8001bfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c02:	2205      	movs	r2, #5
 8001c04:	2178      	movs	r1, #120	; 0x78
 8001c06:	483e      	ldr	r0, [pc, #248]	; (8001d00 <ssd1306_Init+0x104>)
 8001c08:	f000 fed2 	bl	80029b0 <HAL_I2C_IsDeviceReady>
 8001c0c:	b118      	cbz	r0, 8001c16 <ssd1306_Init+0x1a>
		SSD1306.Initialized = 0;
 8001c0e:	2000      	movs	r0, #0
 8001c10:	4b3c      	ldr	r3, [pc, #240]	; (8001d04 <ssd1306_Init+0x108>)
 8001c12:	7198      	strb	r0, [r3, #6]
}
 8001c14:	bd10      	pop	{r4, pc}
	HAL_Delay(100);
 8001c16:	2064      	movs	r0, #100	; 0x64
 8001c18:	f000 fa32 	bl	8002080 <HAL_Delay>
	ssd1306_WriteCommand(DISPLAYOFF);
 8001c1c:	20ae      	movs	r0, #174	; 0xae
 8001c1e:	f7ff fedb 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8001c22:	20d5      	movs	r0, #213	; 0xd5
 8001c24:	f7ff fed8 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8001c28:	20f0      	movs	r0, #240	; 0xf0
 8001c2a:	f7ff fed5 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETMULTIPLEX);
 8001c2e:	20a8      	movs	r0, #168	; 0xa8
 8001c30:	f7ff fed2 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(height() - 1);
 8001c34:	f7ff fece 	bl	80019d4 <height>
 8001c38:	3801      	subs	r0, #1
 8001c3a:	b2c0      	uxtb	r0, r0
 8001c3c:	f7ff fecc 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8001c40:	20d3      	movs	r0, #211	; 0xd3
 8001c42:	f7ff fec9 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff fec6 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETSTARTLINE);
 8001c4c:	2040      	movs	r0, #64	; 0x40
 8001c4e:	f7ff fec3 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(CHARGEPUMP);
 8001c52:	208d      	movs	r0, #141	; 0x8d
 8001c54:	f7ff fec0 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14);
 8001c58:	2014      	movs	r0, #20
 8001c5a:	f7ff febd 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(MEMORYMODE);
 8001c5e:	2020      	movs	r0, #32
 8001c60:	f7ff feba 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00);
 8001c64:	2000      	movs	r0, #0
 8001c66:	f7ff feb7 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SEGREMAP);
 8001c6a:	20a0      	movs	r0, #160	; 0xa0
 8001c6c:	f7ff feb4 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(COMSCANINC);
 8001c70:	20c0      	movs	r0, #192	; 0xc0
 8001c72:	f7ff feb1 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETCOMPINS);
 8001c76:	20da      	movs	r0, #218	; 0xda
 8001c78:	f7ff feae 	bl	80019d8 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8001c7c:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <ssd1306_Init+0x10c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b36b      	cbz	r3, 8001cde <ssd1306_Init+0xe2>
	else if (display_geometry == GEOMETRY_128_32)
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d02f      	beq.n	8001ce6 <ssd1306_Init+0xea>
	ssd1306_WriteCommand(SETCONTRAST);
 8001c86:	2081      	movs	r0, #129	; 0x81
 8001c88:	f7ff fea6 	bl	80019d8 <ssd1306_WriteCommand>
	if (display_geometry == GEOMETRY_128_64)
 8001c8c:	4b1e      	ldr	r3, [pc, #120]	; (8001d08 <ssd1306_Init+0x10c>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b36b      	cbz	r3, 8001cee <ssd1306_Init+0xf2>
	else if (display_geometry == GEOMETRY_128_32)
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d02f      	beq.n	8001cf6 <ssd1306_Init+0xfa>
	ssd1306_WriteCommand(SETPRECHARGE);
 8001c96:	20d9      	movs	r0, #217	; 0xd9
 8001c98:	f7ff fe9e 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF1);
 8001c9c:	20f1      	movs	r0, #241	; 0xf1
 8001c9e:	f7ff fe9b 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8001ca2:	20db      	movs	r0, #219	; 0xdb
 8001ca4:	f7ff fe98 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40);	        //0x40 default, to lower the contrast, put 0
 8001ca8:	2040      	movs	r0, #64	; 0x40
 8001caa:	f7ff fe95 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8001cae:	20a4      	movs	r0, #164	; 0xa4
 8001cb0:	f7ff fe92 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(NORMALDISPLAY);
 8001cb4:	20a6      	movs	r0, #166	; 0xa6
 8001cb6:	f7ff fe8f 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x2e);            // stop scroll
 8001cba:	202e      	movs	r0, #46	; 0x2e
 8001cbc:	f7ff fe8c 	bl	80019d8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(DISPLAYON);
 8001cc0:	20af      	movs	r0, #175	; 0xaf
 8001cc2:	f7ff fe89 	bl	80019d8 <ssd1306_WriteCommand>
	SSD1306.CurrentX = 0;
 8001cc6:	4c0f      	ldr	r4, [pc, #60]	; (8001d04 <ssd1306_Init+0x108>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	8023      	strh	r3, [r4, #0]
	SSD1306.CurrentY = 0;
 8001ccc:	8063      	strh	r3, [r4, #2]
	SSD1306.Color = Black;
 8001cce:	7163      	strb	r3, [r4, #5]
	ssd1306_Clear();
 8001cd0:	f7ff ff8a 	bl	8001be8 <ssd1306_Clear>
	ssd1306_UpdateScreen();
 8001cd4:	f7ff feb2 	bl	8001a3c <ssd1306_UpdateScreen>
	SSD1306.Initialized = 1;
 8001cd8:	2001      	movs	r0, #1
 8001cda:	71a0      	strb	r0, [r4, #6]
	return 1;
 8001cdc:	e79a      	b.n	8001c14 <ssd1306_Init+0x18>
	  ssd1306_WriteCommand(0x12);
 8001cde:	2012      	movs	r0, #18
 8001ce0:	f7ff fe7a 	bl	80019d8 <ssd1306_WriteCommand>
 8001ce4:	e7cf      	b.n	8001c86 <ssd1306_Init+0x8a>
	  ssd1306_WriteCommand(0x02);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7ff fe76 	bl	80019d8 <ssd1306_WriteCommand>
 8001cec:	e7cb      	b.n	8001c86 <ssd1306_Init+0x8a>
	  ssd1306_WriteCommand(0xCF);
 8001cee:	20cf      	movs	r0, #207	; 0xcf
 8001cf0:	f7ff fe72 	bl	80019d8 <ssd1306_WriteCommand>
 8001cf4:	e7cf      	b.n	8001c96 <ssd1306_Init+0x9a>
	  ssd1306_WriteCommand(0x8F);
 8001cf6:	208f      	movs	r0, #143	; 0x8f
 8001cf8:	f7ff fe6e 	bl	80019d8 <ssd1306_WriteCommand>
 8001cfc:	e7cb      	b.n	8001c96 <ssd1306_Init+0x9a>
 8001cfe:	bf00      	nop
 8001d00:	20000488 	.word	0x20000488
 8001d04:	2000020c 	.word	0x2000020c
 8001d08:	20000008 	.word	0x20000008

08001d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0e:	2100      	movs	r1, #0
 8001d10:	9100      	str	r1, [sp, #0]
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_MspInit+0x34>)
 8001d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
 8001d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d1e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001d22:	9200      	str	r2, [sp, #0]
 8001d24:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	9101      	str	r1, [sp, #4]
 8001d28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d2a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3a:	b002      	add	sp, #8
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d44:	b530      	push	{r4, r5, lr}
 8001d46:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9303      	str	r3, [sp, #12]
 8001d4c:	9304      	str	r3, [sp, #16]
 8001d4e:	9305      	str	r3, [sp, #20]
 8001d50:	9306      	str	r3, [sp, #24]
 8001d52:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C2)
 8001d54:	6802      	ldr	r2, [r0, #0]
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <HAL_I2C_MspInit+0x68>)
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d001      	beq.n	8001d60 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d5c:	b009      	add	sp, #36	; 0x24
 8001d5e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d60:	2500      	movs	r5, #0
 8001d62:	9501      	str	r5, [sp, #4]
 8001d64:	4c12      	ldr	r4, [pc, #72]	; (8001db0 <HAL_I2C_MspInit+0x6c>)
 8001d66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6323      	str	r3, [r4, #48]	; 0x30
 8001d6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d78:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d7c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7e:	2312      	movs	r3, #18
 8001d80:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d8a:	2304      	movs	r3, #4
 8001d8c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8e:	a903      	add	r1, sp, #12
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <HAL_I2C_MspInit+0x70>)
 8001d92:	f000 fa05 	bl	80021a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d96:	9502      	str	r5, [sp, #8]
 8001d98:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d9a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d9e:	6423      	str	r3, [r4, #64]	; 0x40
 8001da0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001da6:	9302      	str	r3, [sp, #8]
 8001da8:	9b02      	ldr	r3, [sp, #8]
}
 8001daa:	e7d7      	b.n	8001d5c <HAL_I2C_MspInit+0x18>
 8001dac:	40005800 	.word	0x40005800
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400

08001db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	9303      	str	r3, [sp, #12]
 8001dc0:	9304      	str	r3, [sp, #16]
 8001dc2:	9305      	str	r3, [sp, #20]
 8001dc4:	9306      	str	r3, [sp, #24]
 8001dc6:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI2)
 8001dc8:	6802      	ldr	r2, [r0, #0]
 8001dca:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_SPI_MspInit+0x84>)
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001dd0:	b009      	add	sp, #36	; 0x24
 8001dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001ddc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001dde:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001de2:	6419      	str	r1, [r3, #64]	; 0x40
 8001de4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001de6:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001dea:	9101      	str	r1, [sp, #4]
 8001dec:	9901      	ldr	r1, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dee:	9202      	str	r2, [sp, #8]
 8001df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001df2:	f041 0102 	orr.w	r1, r1, #2
 8001df6:	6319      	str	r1, [r3, #48]	; 0x30
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	9302      	str	r3, [sp, #8]
 8001e00:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001e02:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001e06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2702      	movs	r7, #2
 8001e0a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2603      	movs	r6, #3
 8001e10:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e12:	2505      	movs	r5, #5
 8001e14:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e16:	4c0a      	ldr	r4, [pc, #40]	; (8001e40 <HAL_SPI_MspInit+0x88>)
 8001e18:	a903      	add	r1, sp, #12
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	f000 f9c0 	bl	80021a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e20:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e2e:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	a903      	add	r1, sp, #12
 8001e32:	4620      	mov	r0, r4
 8001e34:	f000 f9b4 	bl	80021a0 <HAL_GPIO_Init>
}
 8001e38:	e7ca      	b.n	8001dd0 <HAL_SPI_MspInit+0x18>
 8001e3a:	bf00      	nop
 8001e3c:	40003800 	.word	0x40003800
 8001e40:	40020400 	.word	0x40020400

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001e46:	f001 f9ad 	bl	80031a4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <NMI_Handler+0x6>

08001e4c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4c:	e7fe      	b.n	8001e4c <HardFault_Handler>

08001e4e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <MemManage_Handler>

08001e50 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <BusFault_Handler>

08001e52 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e52:	e7fe      	b.n	8001e52 <UsageFault_Handler>

08001e54 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e54:	4770      	bx	lr

08001e56 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	4770      	bx	lr

08001e58 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e58:	4770      	bx	lr

08001e5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e5a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5c:	f000 f8fe 	bl	800205c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e60:	bd08      	pop	{r3, pc}
	...

08001e64 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e64:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_0_Pin);
 8001e66:	2008      	movs	r0, #8
 8001e68:	f000 fa9c 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_TogglePin(LED_A_GPIO_Port, LED_A_Pin);
 8001e6c:	2140      	movs	r1, #64	; 0x40
 8001e6e:	4802      	ldr	r0, [pc, #8]	; (8001e78 <EXTI3_IRQHandler+0x14>)
 8001e70:	f000 fa8d 	bl	800238e <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e74:	bd08      	pop	{r3, pc}
 8001e76:	bf00      	nop
 8001e78:	40020000 	.word	0x40020000

08001e7c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_1_Pin);
 8001e7e:	2010      	movs	r0, #16
 8001e80:	f000 fa90 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <EXTI4_IRQHandler+0x14>)
 8001e88:	f000 fa81 	bl	800238e <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e8c:	bd08      	pop	{r3, pc}
 8001e8e:	bf00      	nop
 8001e90:	40020000 	.word	0x40020000

08001e94 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e94:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	XPT2046_unified_Interrupt_Callback(HAL_GPIO_ReadPin(TOUCH_PENIRQ_GPIO_Port, TOUCH_PENIRQ_Pin), HAL_GetTick());
 8001e96:	2120      	movs	r1, #32
 8001e98:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <EXTI9_5_IRQHandler+0x20>)
 8001e9a:	f000 fa6b 	bl	8002374 <HAL_GPIO_ReadPin>
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	f000 f8e8 	bl	8002074 <HAL_GetTick>
 8001ea4:	4601      	mov	r1, r0
 8001ea6:	4620      	mov	r0, r4
 8001ea8:	f7ff fc9a 	bl	80017e0 <XPT2046_unified_Interrupt_Callback>
	   *       }
	   *
		*/

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_PENIRQ_Pin);
 8001eac:	2020      	movs	r0, #32
 8001eae:	f000 fa79 	bl	80023a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001eb2:	bd10      	pop	{r4, pc}
 8001eb4:	40020800 	.word	0x40020800

08001eb8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001eb8:	2001      	movs	r0, #1
 8001eba:	4770      	bx	lr

08001ebc <_kill>:

int _kill(int pid, int sig)
{
 8001ebc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ebe:	f001 fc71 	bl	80037a4 <__errno>
 8001ec2:	2316      	movs	r3, #22
 8001ec4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ec6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eca:	bd08      	pop	{r3, pc}

08001ecc <_exit>:

void _exit (int status)
{
 8001ecc:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed2:	f7ff fff3 	bl	8001ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed6:	e7fe      	b.n	8001ed6 <_exit+0xa>

08001ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	460c      	mov	r4, r1
 8001edc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2500      	movs	r5, #0
 8001ee0:	42b5      	cmp	r5, r6
 8001ee2:	da07      	bge.n	8001ef4 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	4621      	mov	r1, r4
 8001eea:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001ef0:	460c      	mov	r4, r1
 8001ef2:	e7f5      	b.n	8001ee0 <_read+0x8>
	}

return len;
}
 8001ef4:	4630      	mov	r0, r6
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}

08001ef8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ef8:	b570      	push	{r4, r5, r6, lr}
 8001efa:	460c      	mov	r4, r1
 8001efc:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efe:	2500      	movs	r5, #0
 8001f00:	42b5      	cmp	r5, r6
 8001f02:	da05      	bge.n	8001f10 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8001f04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001f08:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	3501      	adds	r5, #1
 8001f0e:	e7f7      	b.n	8001f00 <_write+0x8>
	}
	return len;
}
 8001f10:	4630      	mov	r0, r6
 8001f12:	bd70      	pop	{r4, r5, r6, pc}

08001f14 <_close>:

int _close(int file)
{
	return -1;
}
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f18:	4770      	bx	lr

08001f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001f1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f1e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001f20:	2000      	movs	r0, #0
 8001f22:	4770      	bx	lr

08001f24 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001f24:	2001      	movs	r0, #1
 8001f26:	4770      	bx	lr

08001f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001f28:	2000      	movs	r0, #0
 8001f2a:	4770      	bx	lr

08001f2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f30:	4a0c      	ldr	r2, [pc, #48]	; (8001f64 <_sbrk+0x38>)
 8001f32:	490d      	ldr	r1, [pc, #52]	; (8001f68 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	480d      	ldr	r0, [pc, #52]	; (8001f6c <_sbrk+0x40>)
 8001f36:	6800      	ldr	r0, [r0, #0]
 8001f38:	b140      	cbz	r0, 8001f4c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3a:	480c      	ldr	r0, [pc, #48]	; (8001f6c <_sbrk+0x40>)
 8001f3c:	6800      	ldr	r0, [r0, #0]
 8001f3e:	4403      	add	r3, r0
 8001f40:	1a52      	subs	r2, r2, r1
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d806      	bhi.n	8001f54 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f46:	4a09      	ldr	r2, [pc, #36]	; (8001f6c <_sbrk+0x40>)
 8001f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f4a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f4c:	4807      	ldr	r0, [pc, #28]	; (8001f6c <_sbrk+0x40>)
 8001f4e:	4c08      	ldr	r4, [pc, #32]	; (8001f70 <_sbrk+0x44>)
 8001f50:	6004      	str	r4, [r0, #0]
 8001f52:	e7f2      	b.n	8001f3a <_sbrk+0xe>
    errno = ENOMEM;
 8001f54:	f001 fc26 	bl	80037a4 <__errno>
 8001f58:	230c      	movs	r3, #12
 8001f5a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f60:	e7f3      	b.n	8001f4a <_sbrk+0x1e>
 8001f62:	bf00      	nop
 8001f64:	20020000 	.word	0x20020000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000414 	.word	0x20000414
 8001f70:	200005e8 	.word	0x200005e8

08001f74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f74:	4a03      	ldr	r2, [pc, #12]	; (8001f84 <SystemInit+0x10>)
 8001f76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f7a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f7e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f82:	4770      	bx	lr
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f8c:	480d      	ldr	r0, [pc, #52]	; (8001fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f8e:	490e      	ldr	r1, [pc, #56]	; (8001fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f90:	4a0e      	ldr	r2, [pc, #56]	; (8001fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f94:	e002      	b.n	8001f9c <LoopCopyDataInit>

08001f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9a:	3304      	adds	r3, #4

08001f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa0:	d3f9      	bcc.n	8001f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa2:	4a0b      	ldr	r2, [pc, #44]	; (8001fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fa4:	4c0b      	ldr	r4, [pc, #44]	; (8001fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa8:	e001      	b.n	8001fae <LoopFillZerobss>

08001faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fac:	3204      	adds	r2, #4

08001fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb0:	d3fb      	bcc.n	8001faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fb2:	f7ff ffdf 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f001 fbfb 	bl	80037b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fba:	f7ff fcbd 	bl	8001938 <main>
  bx  lr    
 8001fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc8:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fcc:	08008b64 	.word	0x08008b64
  ldr r2, =_sbss
 8001fd0:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001fd4:	200005e4 	.word	0x200005e4

08001fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd8:	e7fe      	b.n	8001fd8 <ADC_IRQHandler>
	...

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b510      	push	{r4, lr}
 8001fde:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <HAL_InitTick+0x40>)
 8001fe2:	7818      	ldrb	r0, [r3, #0]
 8001fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fe8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fec:	4a0c      	ldr	r2, [pc, #48]	; (8002020 <HAL_InitTick+0x44>)
 8001fee:	6810      	ldr	r0, [r2, #0]
 8001ff0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ff4:	f000 f8be 	bl	8002174 <HAL_SYSTICK_Config>
 8001ff8:	b968      	cbnz	r0, 8002016 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ffa:	2c0f      	cmp	r4, #15
 8001ffc:	d901      	bls.n	8002002 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001ffe:	2001      	movs	r0, #1
 8002000:	e00a      	b.n	8002018 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002002:	2200      	movs	r2, #0
 8002004:	4621      	mov	r1, r4
 8002006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800200a:	f000 f85f 	bl	80020cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_InitTick+0x48>)
 8002010:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002012:	2000      	movs	r0, #0
 8002014:	e000      	b.n	8002018 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002016:	2001      	movs	r0, #1
}
 8002018:	bd10      	pop	{r4, pc}
 800201a:	bf00      	nop
 800201c:	20000010 	.word	0x20000010
 8002020:	2000000c 	.word	0x2000000c
 8002024:	20000014 	.word	0x20000014

08002028 <HAL_Init>:
{
 8002028:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <HAL_Init+0x30>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002032:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800203a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002042:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002044:	2003      	movs	r0, #3
 8002046:	f000 f82f 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800204a:	200f      	movs	r0, #15
 800204c:	f7ff ffc6 	bl	8001fdc <HAL_InitTick>
  HAL_MspInit();
 8002050:	f7ff fe5c 	bl	8001d0c <HAL_MspInit>
}
 8002054:	2000      	movs	r0, #0
 8002056:	bd08      	pop	{r3, pc}
 8002058:	40023c00 	.word	0x40023c00

0800205c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800205c:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_IncTick+0x10>)
 800205e:	6811      	ldr	r1, [r2, #0]
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_IncTick+0x14>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	440b      	add	r3, r1
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200005d0 	.word	0x200005d0
 8002070:	20000010 	.word	0x20000010

08002074 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002074:	4b01      	ldr	r3, [pc, #4]	; (800207c <HAL_GetTick+0x8>)
 8002076:	6818      	ldr	r0, [r3, #0]
}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200005d0 	.word	0x200005d0

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002084:	f7ff fff6 	bl	8002074 <HAL_GetTick>
 8002088:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800208a:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800208e:	d002      	beq.n	8002096 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <HAL_Delay+0x24>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002096:	f7ff ffed 	bl	8002074 <HAL_GetTick>
 800209a:	1b40      	subs	r0, r0, r5
 800209c:	42a0      	cmp	r0, r4
 800209e:	d3fa      	bcc.n	8002096 <HAL_Delay+0x16>
  {
  }
}
 80020a0:	bd38      	pop	{r3, r4, r5, pc}
 80020a2:	bf00      	nop
 80020a4:	20000010 	.word	0x20000010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020aa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020b0:	041b      	lsls	r3, r3, #16
 80020b2:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b4:	0200      	lsls	r0, r0, #8
 80020b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ba:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80020bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80020c4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80020c6:	4770      	bx	lr
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020cc:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ce:	4b17      	ldr	r3, [pc, #92]	; (800212c <HAL_NVIC_SetPriority+0x60>)
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d6:	f1c3 0407 	rsb	r4, r3, #7
 80020da:	2c04      	cmp	r4, #4
 80020dc:	bf28      	it	cs
 80020de:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e0:	1d1d      	adds	r5, r3, #4
 80020e2:	2d06      	cmp	r5, #6
 80020e4:	d918      	bls.n	8002118 <HAL_NVIC_SetPriority+0x4c>
 80020e6:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80020ec:	fa05 f404 	lsl.w	r4, r5, r4
 80020f0:	ea21 0104 	bic.w	r1, r1, r4
 80020f4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f6:	fa05 f303 	lsl.w	r3, r5, r3
 80020fa:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fe:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002100:	2800      	cmp	r0, #0
 8002102:	db0b      	blt.n	800211c <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002104:	0109      	lsls	r1, r1, #4
 8002106:	b2c9      	uxtb	r1, r1
 8002108:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800210c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002110:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002114:	bc30      	pop	{r4, r5}
 8002116:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002118:	2300      	movs	r3, #0
 800211a:	e7e5      	b.n	80020e8 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800211c:	f000 000f 	and.w	r0, r0, #15
 8002120:	0109      	lsls	r1, r1, #4
 8002122:	b2c9      	uxtb	r1, r1
 8002124:	4b02      	ldr	r3, [pc, #8]	; (8002130 <HAL_NVIC_SetPriority+0x64>)
 8002126:	5419      	strb	r1, [r3, r0]
 8002128:	e7f4      	b.n	8002114 <HAL_NVIC_SetPriority+0x48>
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00
 8002130:	e000ed14 	.word	0xe000ed14

08002134 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002134:	2800      	cmp	r0, #0
 8002136:	db07      	blt.n	8002148 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002138:	f000 021f 	and.w	r2, r0, #31
 800213c:	0940      	lsrs	r0, r0, #5
 800213e:	2301      	movs	r3, #1
 8002140:	4093      	lsls	r3, r2
 8002142:	4a02      	ldr	r2, [pc, #8]	; (800214c <HAL_NVIC_EnableIRQ+0x18>)
 8002144:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000e100 	.word	0xe000e100

08002150 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002150:	2800      	cmp	r0, #0
 8002152:	db0c      	blt.n	800216e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002154:	f000 021f 	and.w	r2, r0, #31
 8002158:	0940      	lsrs	r0, r0, #5
 800215a:	2301      	movs	r3, #1
 800215c:	4093      	lsls	r3, r2
 800215e:	3020      	adds	r0, #32
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_NVIC_DisableIRQ+0x20>)
 8002162:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002166:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800216a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800216e:	4770      	bx	lr
 8002170:	e000e100 	.word	0xe000e100

08002174 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	3801      	subs	r0, #1
 8002176:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800217a:	d20a      	bcs.n	8002192 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_SYSTICK_Config+0x24>)
 800217e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <HAL_SYSTICK_Config+0x28>)
 8002182:	21f0      	movs	r1, #240	; 0xf0
 8002184:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002188:	2000      	movs	r0, #0
 800218a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002192:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e010 	.word	0xe000e010
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021a0:	2300      	movs	r3, #0
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	f200 80dd 	bhi.w	8002362 <HAL_GPIO_Init+0x1c2>
{
 80021a8:	b4f0      	push	{r4, r5, r6, r7}
 80021aa:	b082      	sub	sp, #8
 80021ac:	e05d      	b.n	800226a <HAL_GPIO_Init+0xca>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021ae:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b0:	005f      	lsls	r7, r3, #1
 80021b2:	2403      	movs	r4, #3
 80021b4:	40bc      	lsls	r4, r7
 80021b6:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ba:	68cc      	ldr	r4, [r1, #12]
 80021bc:	40bc      	lsls	r4, r7
 80021be:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80021c0:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c4:	ea26 0602 	bic.w	r6, r6, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	684c      	ldr	r4, [r1, #4]
 80021ca:	f3c4 1200 	ubfx	r2, r4, #4, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
 80021d2:	6042      	str	r2, [r0, #4]
 80021d4:	e057      	b.n	8002286 <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d6:	08dc      	lsrs	r4, r3, #3
 80021d8:	3408      	adds	r4, #8
 80021da:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021de:	f003 0207 	and.w	r2, r3, #7
 80021e2:	0096      	lsls	r6, r2, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	40b2      	lsls	r2, r6
 80021e8:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	690a      	ldr	r2, [r1, #16]
 80021ee:	40b2      	lsls	r2, r6
 80021f0:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3U] = temp;
 80021f2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80021f6:	e05a      	b.n	80022ae <HAL_GPIO_Init+0x10e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f8:	2207      	movs	r2, #7
 80021fa:	e000      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 80021fc:	2200      	movs	r2, #0
 80021fe:	40b2      	lsls	r2, r6
 8002200:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002202:	3402      	adds	r4, #2
 8002204:	4e57      	ldr	r6, [pc, #348]	; (8002364 <HAL_GPIO_Init+0x1c4>)
 8002206:	f846 2024 	str.w	r2, [r6, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800220a:	4a57      	ldr	r2, [pc, #348]	; (8002368 <HAL_GPIO_Init+0x1c8>)
 800220c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800220e:	43ea      	mvns	r2, r5
 8002210:	ea24 0605 	bic.w	r6, r4, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002214:	684f      	ldr	r7, [r1, #4]
 8002216:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800221a:	d001      	beq.n	8002220 <HAL_GPIO_Init+0x80>
        {
          temp |= iocurrent;
 800221c:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->IMR = temp;
 8002220:	4c51      	ldr	r4, [pc, #324]	; (8002368 <HAL_GPIO_Init+0x1c8>)
 8002222:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR;
 8002224:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8002226:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222a:	684f      	ldr	r7, [r1, #4]
 800222c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002230:	d001      	beq.n	8002236 <HAL_GPIO_Init+0x96>
        {
          temp |= iocurrent;
 8002232:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->EMR = temp;
 8002236:	4c4c      	ldr	r4, [pc, #304]	; (8002368 <HAL_GPIO_Init+0x1c8>)
 8002238:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 800223c:	ea02 0604 	and.w	r6, r2, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002240:	684f      	ldr	r7, [r1, #4]
 8002242:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002246:	d001      	beq.n	800224c <HAL_GPIO_Init+0xac>
        {
          temp |= iocurrent;
 8002248:	ea45 0604 	orr.w	r6, r5, r4
        }
        EXTI->RTSR = temp;
 800224c:	4c46      	ldr	r4, [pc, #280]	; (8002368 <HAL_GPIO_Init+0x1c8>)
 800224e:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR;
 8002250:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8002252:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002254:	684e      	ldr	r6, [r1, #4]
 8002256:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800225a:	d001      	beq.n	8002260 <HAL_GPIO_Init+0xc0>
        {
          temp |= iocurrent;
 800225c:	ea45 0204 	orr.w	r2, r5, r4
        }
        EXTI->FTSR = temp;
 8002260:	4c41      	ldr	r4, [pc, #260]	; (8002368 <HAL_GPIO_Init+0x1c8>)
 8002262:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002264:	3301      	adds	r3, #1
 8002266:	2b0f      	cmp	r3, #15
 8002268:	d878      	bhi.n	800235c <HAL_GPIO_Init+0x1bc>
    ioposition = 0x01U << position;
 800226a:	2201      	movs	r2, #1
 800226c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	680c      	ldr	r4, [r1, #0]
 8002270:	ea04 0502 	and.w	r5, r4, r2
    if(iocurrent == ioposition)
 8002274:	ea32 0404 	bics.w	r4, r2, r4
 8002278:	d1f4      	bne.n	8002264 <HAL_GPIO_Init+0xc4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800227a:	684c      	ldr	r4, [r1, #4]
 800227c:	f004 0403 	and.w	r4, r4, #3
 8002280:	3c01      	subs	r4, #1
 8002282:	2c01      	cmp	r4, #1
 8002284:	d993      	bls.n	80021ae <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002286:	684a      	ldr	r2, [r1, #4]
 8002288:	f002 0203 	and.w	r2, r2, #3
 800228c:	2a03      	cmp	r2, #3
 800228e:	d009      	beq.n	80022a4 <HAL_GPIO_Init+0x104>
        temp = GPIOx->PUPDR;
 8002290:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002292:	005e      	lsls	r6, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	40b2      	lsls	r2, r6
 8002298:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800229c:	688a      	ldr	r2, [r1, #8]
 800229e:	40b2      	lsls	r2, r6
 80022a0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 80022a2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022a4:	684a      	ldr	r2, [r1, #4]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	2a02      	cmp	r2, #2
 80022ac:	d093      	beq.n	80021d6 <HAL_GPIO_Init+0x36>
      temp = GPIOx->MODER;
 80022ae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022b0:	005e      	lsls	r6, r3, #1
 80022b2:	2203      	movs	r2, #3
 80022b4:	40b2      	lsls	r2, r6
 80022b6:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022ba:	684a      	ldr	r2, [r1, #4]
 80022bc:	f002 0203 	and.w	r2, r2, #3
 80022c0:	40b2      	lsls	r2, r6
 80022c2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80022c4:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022c6:	684a      	ldr	r2, [r1, #4]
 80022c8:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 80022cc:	d0ca      	beq.n	8002264 <HAL_GPIO_Init+0xc4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ce:	2200      	movs	r2, #0
 80022d0:	9201      	str	r2, [sp, #4]
 80022d2:	4a26      	ldr	r2, [pc, #152]	; (800236c <HAL_GPIO_Init+0x1cc>)
 80022d4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80022d6:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80022da:	6454      	str	r4, [r2, #68]	; 0x44
 80022dc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80022de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022e2:	9201      	str	r2, [sp, #4]
 80022e4:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80022e6:	089c      	lsrs	r4, r3, #2
 80022e8:	1ca6      	adds	r6, r4, #2
 80022ea:	4a1e      	ldr	r2, [pc, #120]	; (8002364 <HAL_GPIO_Init+0x1c4>)
 80022ec:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022f0:	f003 0203 	and.w	r2, r3, #3
 80022f4:	0096      	lsls	r6, r2, #2
 80022f6:	220f      	movs	r2, #15
 80022f8:	40b2      	lsls	r2, r6
 80022fa:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	4a1c      	ldr	r2, [pc, #112]	; (8002370 <HAL_GPIO_Init+0x1d0>)
 8002300:	4290      	cmp	r0, r2
 8002302:	f43f af7b 	beq.w	80021fc <HAL_GPIO_Init+0x5c>
 8002306:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800230a:	4290      	cmp	r0, r2
 800230c:	d01a      	beq.n	8002344 <HAL_GPIO_Init+0x1a4>
 800230e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002312:	4290      	cmp	r0, r2
 8002314:	d018      	beq.n	8002348 <HAL_GPIO_Init+0x1a8>
 8002316:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800231a:	4290      	cmp	r0, r2
 800231c:	d016      	beq.n	800234c <HAL_GPIO_Init+0x1ac>
 800231e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002322:	4290      	cmp	r0, r2
 8002324:	d014      	beq.n	8002350 <HAL_GPIO_Init+0x1b0>
 8002326:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800232a:	4290      	cmp	r0, r2
 800232c:	d012      	beq.n	8002354 <HAL_GPIO_Init+0x1b4>
 800232e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002332:	4290      	cmp	r0, r2
 8002334:	d010      	beq.n	8002358 <HAL_GPIO_Init+0x1b8>
 8002336:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800233a:	4290      	cmp	r0, r2
 800233c:	f43f af5c 	beq.w	80021f8 <HAL_GPIO_Init+0x58>
 8002340:	2208      	movs	r2, #8
 8002342:	e75c      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 8002344:	2201      	movs	r2, #1
 8002346:	e75a      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 8002348:	2202      	movs	r2, #2
 800234a:	e758      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 800234c:	2203      	movs	r2, #3
 800234e:	e756      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 8002350:	2204      	movs	r2, #4
 8002352:	e754      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 8002354:	2205      	movs	r2, #5
 8002356:	e752      	b.n	80021fe <HAL_GPIO_Init+0x5e>
 8002358:	2206      	movs	r2, #6
 800235a:	e750      	b.n	80021fe <HAL_GPIO_Init+0x5e>
      }
    }
  }
}
 800235c:	b002      	add	sp, #8
 800235e:	bcf0      	pop	{r4, r5, r6, r7}
 8002360:	4770      	bx	lr
 8002362:	4770      	bx	lr
 8002364:	40013800 	.word	0x40013800
 8002368:	40013c00 	.word	0x40013c00
 800236c:	40023800 	.word	0x40023800
 8002370:	40020000 	.word	0x40020000

08002374 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002374:	6903      	ldr	r3, [r0, #16]
 8002376:	4219      	tst	r1, r3
 8002378:	d001      	beq.n	800237e <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 800237a:	2001      	movs	r0, #1
 800237c:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800237e:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8002380:	4770      	bx	lr

08002382 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002382:	b10a      	cbz	r2, 8002388 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002384:	6181      	str	r1, [r0, #24]
 8002386:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002388:	0409      	lsls	r1, r1, #16
 800238a:	6181      	str	r1, [r0, #24]
  }
}
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800238e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002390:	ea01 0203 	and.w	r2, r1, r3
 8002394:	ea21 0103 	bic.w	r1, r1, r3
 8002398:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800239c:	6181      	str	r1, [r0, #24]
}
 800239e:	4770      	bx	lr

080023a0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80023a4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80023a6:	4b05      	ldr	r3, [pc, #20]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	4203      	tst	r3, r0
 80023ac:	d100      	bne.n	80023b0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80023ae:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023b0:	4b02      	ldr	r3, [pc, #8]	; (80023bc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80023b2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023b4:	f7ff fff4 	bl	80023a0 <HAL_GPIO_EXTI_Callback>
}
 80023b8:	e7f9      	b.n	80023ae <HAL_GPIO_EXTI_IRQHandler+0xa>
 80023ba:	bf00      	nop
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023c0:	6803      	ldr	r3, [r0, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80023c8:	d101      	bne.n	80023ce <I2C_IsAcknowledgeFailed+0xe>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

    return HAL_ERROR;
  }
  return HAL_OK;
 80023ca:	2000      	movs	r0, #0
}
 80023cc:	4770      	bx	lr
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023d2:	615a      	str	r2, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	6303      	str	r3, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023d8:	2220      	movs	r2, #32
 80023da:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023de:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023e2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80023e4:	f042 0204 	orr.w	r2, r2, #4
 80023e8:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80023ea:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    return HAL_ERROR;
 80023ee:	2001      	movs	r0, #1
 80023f0:	4770      	bx	lr

080023f2 <I2C_WaitOnFlagUntilTimeout>:
{
 80023f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f6:	4607      	mov	r7, r0
 80023f8:	460d      	mov	r5, r1
 80023fa:	4690      	mov	r8, r2
 80023fc:	461e      	mov	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023fe:	e022      	b.n	8002446 <I2C_WaitOnFlagUntilTimeout+0x54>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002400:	f7ff fe38 	bl	8002074 <HAL_GetTick>
 8002404:	9b06      	ldr	r3, [sp, #24]
 8002406:	1ac0      	subs	r0, r0, r3
 8002408:	42b0      	cmp	r0, r6
 800240a:	d800      	bhi.n	800240e <I2C_WaitOnFlagUntilTimeout+0x1c>
 800240c:	b9de      	cbnz	r6, 8002446 <I2C_WaitOnFlagUntilTimeout+0x54>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800240e:	2300      	movs	r3, #0
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002412:	2220      	movs	r2, #32
 8002414:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002418:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800241c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800241e:	f042 0220 	orr.w	r2, r2, #32
 8002422:	643a      	str	r2, [r7, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002424:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
        return HAL_ERROR;
 8002428:	2001      	movs	r0, #1
 800242a:	e01a      	b.n	8002462 <I2C_WaitOnFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	699c      	ldr	r4, [r3, #24]
 8002430:	ea25 0404 	bic.w	r4, r5, r4
 8002434:	b2a4      	uxth	r4, r4
 8002436:	fab4 f484 	clz	r4, r4
 800243a:	0964      	lsrs	r4, r4, #5
 800243c:	45a0      	cmp	r8, r4
 800243e:	d10f      	bne.n	8002460 <I2C_WaitOnFlagUntilTimeout+0x6e>
    if (Timeout != HAL_MAX_DELAY)
 8002440:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 8002444:	d1dc      	bne.n	8002400 <I2C_WaitOnFlagUntilTimeout+0xe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002446:	f3c5 4307 	ubfx	r3, r5, #16, #8
 800244a:	2b01      	cmp	r3, #1
 800244c:	d1ee      	bne.n	800242c <I2C_WaitOnFlagUntilTimeout+0x3a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	695c      	ldr	r4, [r3, #20]
 8002452:	ea25 0404 	bic.w	r4, r5, r4
 8002456:	b2a4      	uxth	r4, r4
 8002458:	fab4 f484 	clz	r4, r4
 800245c:	0964      	lsrs	r4, r4, #5
 800245e:	e7ed      	b.n	800243c <I2C_WaitOnFlagUntilTimeout+0x4a>
  return HAL_OK;
 8002460:	2000      	movs	r0, #0
}
 8002462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002466 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246a:	4605      	mov	r5, r0
 800246c:	460e      	mov	r6, r1
 800246e:	4617      	mov	r7, r2
 8002470:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002472:	e03d      	b.n	80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800247c:	682b      	ldr	r3, [r5, #0]
 800247e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002482:	615a      	str	r2, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002484:	2300      	movs	r3, #0
 8002486:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002488:	2220      	movs	r2, #32
 800248a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800248e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002492:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002494:	f042 0204 	orr.w	r2, r2, #4
 8002498:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800249a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      return HAL_ERROR;
 800249e:	2001      	movs	r0, #1
 80024a0:	e034      	b.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a2:	f7ff fde7 	bl	8002074 <HAL_GetTick>
 80024a6:	eba0 0008 	sub.w	r0, r0, r8
 80024aa:	42b8      	cmp	r0, r7
 80024ac:	d800      	bhi.n	80024b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
 80024ae:	b9ff      	cbnz	r7, 80024f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x8a>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024b0:	2300      	movs	r3, #0
 80024b2:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b4:	2220      	movs	r2, #32
 80024b6:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ba:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024be:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80024c0:	f042 0220 	orr.w	r2, r2, #32
 80024c4:	642a      	str	r2, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80024c6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_ERROR;
 80024ca:	2001      	movs	r0, #1
 80024cc:	e01e      	b.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024ce:	682b      	ldr	r3, [r5, #0]
 80024d0:	699c      	ldr	r4, [r3, #24]
 80024d2:	ea26 0404 	bic.w	r4, r6, r4
 80024d6:	b2a4      	uxth	r4, r4
 80024d8:	3c00      	subs	r4, #0
 80024da:	bf18      	it	ne
 80024dc:	2401      	movne	r4, #1
 80024de:	b1a4      	cbz	r4, 800250a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xa4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024e0:	682b      	ldr	r3, [r5, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 80024e8:	d1c4      	bne.n	8002474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
    if (Timeout != HAL_MAX_DELAY)
 80024ea:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80024ee:	d1d8      	bne.n	80024a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x3c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024f0:	f3c6 4307 	ubfx	r3, r6, #16, #8
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d1ea      	bne.n	80024ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 80024f8:	682b      	ldr	r3, [r5, #0]
 80024fa:	695c      	ldr	r4, [r3, #20]
 80024fc:	ea26 0404 	bic.w	r4, r6, r4
 8002500:	b2a4      	uxth	r4, r4
 8002502:	3c00      	subs	r4, #0
 8002504:	bf18      	it	ne
 8002506:	2401      	movne	r4, #1
 8002508:	e7e9      	b.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x78>
  return HAL_OK;
 800250a:	2000      	movs	r0, #0
}
 800250c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002510 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	4604      	mov	r4, r0
 8002514:	460d      	mov	r5, r1
 8002516:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002520:	d11c      	bne.n	800255c <I2C_WaitOnTXEFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002522:	4620      	mov	r0, r4
 8002524:	f7ff ff4c 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 8002528:	b9d0      	cbnz	r0, 8002560 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800252a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800252e:	d0f3      	beq.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002530:	f7ff fda0 	bl	8002074 <HAL_GetTick>
 8002534:	1b80      	subs	r0, r0, r6
 8002536:	42a8      	cmp	r0, r5
 8002538:	d801      	bhi.n	800253e <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800253a:	2d00      	cmp	r5, #0
 800253c:	d1ec      	bne.n	8002518 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002542:	2220      	movs	r2, #32
 8002544:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002548:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800254c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800254e:	f042 0220 	orr.w	r2, r2, #32
 8002552:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002554:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002558:	2001      	movs	r0, #1
 800255a:	e000      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>
  return HAL_OK;
 800255c:	2000      	movs	r0, #0
}
 800255e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002560:	2001      	movs	r0, #1
 8002562:	e7fc      	b.n	800255e <I2C_WaitOnTXEFlagUntilTimeout+0x4e>

08002564 <I2C_RequestMemoryWrite>:
{
 8002564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002568:	b085      	sub	sp, #20
 800256a:	4604      	mov	r4, r0
 800256c:	460d      	mov	r5, r1
 800256e:	4691      	mov	r9, r2
 8002570:	461f      	mov	r7, r3
 8002572:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8002576:	9e0d      	ldr	r6, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	6819      	ldr	r1, [r3, #0]
 800257c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002580:	6019      	str	r1, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002582:	9600      	str	r6, [sp, #0]
 8002584:	4643      	mov	r3, r8
 8002586:	2200      	movs	r2, #0
 8002588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800258c:	f7ff ff31 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 8002590:	b960      	cbnz	r0, 80025ac <I2C_RequestMemoryWrite+0x48>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002598:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800259a:	4633      	mov	r3, r6
 800259c:	4642      	mov	r2, r8
 800259e:	4926      	ldr	r1, [pc, #152]	; (8002638 <I2C_RequestMemoryWrite+0xd4>)
 80025a0:	4620      	mov	r0, r4
 80025a2:	f7ff ff60 	bl	8002466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a6:	b168      	cbz	r0, 80025c4 <I2C_RequestMemoryWrite+0x60>
    return HAL_ERROR;
 80025a8:	2001      	movs	r0, #1
 80025aa:	e008      	b.n	80025be <I2C_RequestMemoryWrite+0x5a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025ac:	6823      	ldr	r3, [r4, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025b4:	d002      	beq.n	80025bc <I2C_RequestMemoryWrite+0x58>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ba:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80025bc:	2003      	movs	r0, #3
}
 80025be:	b005      	add	sp, #20
 80025c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c4:	2300      	movs	r3, #0
 80025c6:	9303      	str	r3, [sp, #12]
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	9203      	str	r2, [sp, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	9303      	str	r3, [sp, #12]
 80025d2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d4:	4632      	mov	r2, r6
 80025d6:	4641      	mov	r1, r8
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ff99 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 80025de:	b930      	cbnz	r0, 80025ee <I2C_RequestMemoryWrite+0x8a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025e0:	2f01      	cmp	r7, #1
 80025e2:	d10f      	bne.n	8002604 <I2C_RequestMemoryWrite+0xa0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80025e4:	6823      	ldr	r3, [r4, #0]
 80025e6:	fa5f f689 	uxtb.w	r6, r9
 80025ea:	611e      	str	r6, [r3, #16]
 80025ec:	e7e7      	b.n	80025be <I2C_RequestMemoryWrite+0x5a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f0:	2b04      	cmp	r3, #4
 80025f2:	d001      	beq.n	80025f8 <I2C_RequestMemoryWrite+0x94>
    return HAL_ERROR;
 80025f4:	2001      	movs	r0, #1
 80025f6:	e7e2      	b.n	80025be <I2C_RequestMemoryWrite+0x5a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f8:	6822      	ldr	r2, [r4, #0]
 80025fa:	6813      	ldr	r3, [r2, #0]
 80025fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e7f7      	b.n	80025f4 <I2C_RequestMemoryWrite+0x90>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002604:	6823      	ldr	r3, [r4, #0]
 8002606:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800260a:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800260c:	4632      	mov	r2, r6
 800260e:	4641      	mov	r1, r8
 8002610:	4620      	mov	r0, r4
 8002612:	f7ff ff7d 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 8002616:	b920      	cbnz	r0, 8002622 <I2C_RequestMemoryWrite+0xbe>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	fa5f f689 	uxtb.w	r6, r9
 800261e:	611e      	str	r6, [r3, #16]
 8002620:	e7cd      	b.n	80025be <I2C_RequestMemoryWrite+0x5a>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002622:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002624:	2b04      	cmp	r3, #4
 8002626:	d001      	beq.n	800262c <I2C_RequestMemoryWrite+0xc8>
      return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	e7c8      	b.n	80025be <I2C_RequestMemoryWrite+0x5a>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	6822      	ldr	r2, [r4, #0]
 800262e:	6813      	ldr	r3, [r2, #0]
 8002630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	e7f7      	b.n	8002628 <I2C_RequestMemoryWrite+0xc4>
 8002638:	00010002 	.word	0x00010002

0800263c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 800263c:	b570      	push	{r4, r5, r6, lr}
 800263e:	4604      	mov	r4, r0
 8002640:	460d      	mov	r5, r1
 8002642:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	f013 0f04 	tst.w	r3, #4
 800264c:	d11c      	bne.n	8002688 <I2C_WaitOnBTFFlagUntilTimeout+0x4c>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800264e:	4620      	mov	r0, r4
 8002650:	f7ff feb6 	bl	80023c0 <I2C_IsAcknowledgeFailed>
 8002654:	b9d0      	cbnz	r0, 800268c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8002656:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800265a:	d0f3      	beq.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7ff fd0a 	bl	8002074 <HAL_GetTick>
 8002660:	1b80      	subs	r0, r0, r6
 8002662:	42a8      	cmp	r0, r5
 8002664:	d801      	bhi.n	800266a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002666:	2d00      	cmp	r5, #0
 8002668:	d1ec      	bne.n	8002644 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800266a:	2300      	movs	r3, #0
 800266c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800266e:	2220      	movs	r2, #32
 8002670:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002674:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002678:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800267a:	f042 0220 	orr.w	r2, r2, #32
 800267e:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002680:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8002684:	2001      	movs	r0, #1
 8002686:	e000      	b.n	800268a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>
  return HAL_OK;
 8002688:	2000      	movs	r0, #0
}
 800268a:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800268c:	2001      	movs	r0, #1
 800268e:	e7fc      	b.n	800268a <I2C_WaitOnBTFFlagUntilTimeout+0x4e>

08002690 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002690:	2800      	cmp	r0, #0
 8002692:	f000 80cc 	beq.w	800282e <HAL_I2C_Init+0x19e>
{
 8002696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002698:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800269a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d077      	beq.n	8002792 <HAL_I2C_Init+0x102>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80026a2:	2324      	movs	r3, #36	; 0x24
 80026a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80026a8:	6822      	ldr	r2, [r4, #0]
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026b2:	6822      	ldr	r2, [r4, #0]
 80026b4:	6813      	ldr	r3, [r2, #0]
 80026b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ba:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026bc:	6822      	ldr	r2, [r4, #0]
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026c4:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c6:	f000 fd5b 	bl	8003180 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ca:	6862      	ldr	r2, [r4, #4]
 80026cc:	4b5a      	ldr	r3, [pc, #360]	; (8002838 <HAL_I2C_Init+0x1a8>)
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d864      	bhi.n	800279c <HAL_I2C_Init+0x10c>
 80026d2:	4b5a      	ldr	r3, [pc, #360]	; (800283c <HAL_I2C_Init+0x1ac>)
 80026d4:	4298      	cmp	r0, r3
 80026d6:	bf8c      	ite	hi
 80026d8:	2300      	movhi	r3, #0
 80026da:	2301      	movls	r3, #1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	f040 80a8 	bne.w	8002832 <HAL_I2C_Init+0x1a2>
  freqrange = I2C_FREQRANGE(pclk1);
 80026e2:	4d57      	ldr	r5, [pc, #348]	; (8002840 <HAL_I2C_Init+0x1b0>)
 80026e4:	fba5 3500 	umull	r3, r5, r5, r0
 80026e8:	0caf      	lsrs	r7, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026ea:	6826      	ldr	r6, [r4, #0]
 80026ec:	6871      	ldr	r1, [r6, #4]
 80026ee:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80026f2:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80026f6:	6071      	str	r1, [r6, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026f8:	6821      	ldr	r1, [r4, #0]
 80026fa:	6a0b      	ldr	r3, [r1, #32]
 80026fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002700:	6865      	ldr	r5, [r4, #4]
 8002702:	4a4d      	ldr	r2, [pc, #308]	; (8002838 <HAL_I2C_Init+0x1a8>)
 8002704:	4295      	cmp	r5, r2
 8002706:	d84f      	bhi.n	80027a8 <HAL_I2C_Init+0x118>
 8002708:	1c7a      	adds	r2, r7, #1
 800270a:	4313      	orrs	r3, r2
 800270c:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270e:	6825      	ldr	r5, [r4, #0]
 8002710:	69e9      	ldr	r1, [r5, #28]
 8002712:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002716:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800271a:	6863      	ldr	r3, [r4, #4]
 800271c:	4a46      	ldr	r2, [pc, #280]	; (8002838 <HAL_I2C_Init+0x1a8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d84c      	bhi.n	80027bc <HAL_I2C_Init+0x12c>
 8002722:	3801      	subs	r0, #1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	fbb0 f0f3 	udiv	r0, r0, r3
 800272a:	3001      	adds	r0, #1
 800272c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002730:	4218      	tst	r0, r3
 8002732:	d078      	beq.n	8002826 <HAL_I2C_Init+0x196>
 8002734:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8002738:	430b      	orrs	r3, r1
 800273a:	61eb      	str	r3, [r5, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800273c:	6821      	ldr	r1, [r4, #0]
 800273e:	680b      	ldr	r3, [r1, #0]
 8002740:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002744:	69e2      	ldr	r2, [r4, #28]
 8002746:	6a20      	ldr	r0, [r4, #32]
 8002748:	4302      	orrs	r2, r0
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800274e:	6821      	ldr	r1, [r4, #0]
 8002750:	688b      	ldr	r3, [r1, #8]
 8002752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800275a:	6922      	ldr	r2, [r4, #16]
 800275c:	68e0      	ldr	r0, [r4, #12]
 800275e:	4302      	orrs	r2, r0
 8002760:	4313      	orrs	r3, r2
 8002762:	608b      	str	r3, [r1, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002764:	6821      	ldr	r1, [r4, #0]
 8002766:	68cb      	ldr	r3, [r1, #12]
 8002768:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800276c:	6962      	ldr	r2, [r4, #20]
 800276e:	69a0      	ldr	r0, [r4, #24]
 8002770:	4302      	orrs	r2, r0
 8002772:	4313      	orrs	r3, r2
 8002774:	60cb      	str	r3, [r1, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002776:	6822      	ldr	r2, [r4, #0]
 8002778:	6813      	ldr	r3, [r2, #0]
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002780:	2000      	movs	r0, #0
 8002782:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002784:	2320      	movs	r3, #32
 8002786:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800278a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800278c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002796:	f7ff fad5 	bl	8001d44 <HAL_I2C_MspInit>
 800279a:	e782      	b.n	80026a2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_I2C_Init+0x1b4>)
 800279e:	4298      	cmp	r0, r3
 80027a0:	bf8c      	ite	hi
 80027a2:	2300      	movhi	r3, #0
 80027a4:	2301      	movls	r3, #1
 80027a6:	e799      	b.n	80026dc <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027a8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027ac:	fb02 f207 	mul.w	r2, r2, r7
 80027b0:	4d25      	ldr	r5, [pc, #148]	; (8002848 <HAL_I2C_Init+0x1b8>)
 80027b2:	fba5 5202 	umull	r5, r2, r5, r2
 80027b6:	0992      	lsrs	r2, r2, #6
 80027b8:	3201      	adds	r2, #1
 80027ba:	e7a6      	b.n	800270a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027bc:	68a2      	ldr	r2, [r4, #8]
 80027be:	b9ba      	cbnz	r2, 80027f0 <HAL_I2C_Init+0x160>
 80027c0:	1e46      	subs	r6, r0, #1
 80027c2:	eb03 0743 	add.w	r7, r3, r3, lsl #1
 80027c6:	fbb6 f6f7 	udiv	r6, r6, r7
 80027ca:	3601      	adds	r6, #1
 80027cc:	f3c6 060b 	ubfx	r6, r6, #0, #12
 80027d0:	fab6 f686 	clz	r6, r6
 80027d4:	0976      	lsrs	r6, r6, #5
 80027d6:	bb46      	cbnz	r6, 800282a <HAL_I2C_Init+0x19a>
 80027d8:	b9c2      	cbnz	r2, 800280c <HAL_I2C_Init+0x17c>
 80027da:	1e42      	subs	r2, r0, #1
 80027dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80027e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80027e4:	3201      	adds	r2, #1
 80027e6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80027ea:	f442 4300 	orr.w	r3, r2, #32768	; 0x8000
 80027ee:	e7a3      	b.n	8002738 <HAL_I2C_Init+0xa8>
 80027f0:	1e46      	subs	r6, r0, #1
 80027f2:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80027f6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 80027fa:	fbb6 f6f7 	udiv	r6, r6, r7
 80027fe:	3601      	adds	r6, #1
 8002800:	f3c6 060b 	ubfx	r6, r6, #0, #12
 8002804:	fab6 f686 	clz	r6, r6
 8002808:	0976      	lsrs	r6, r6, #5
 800280a:	e7e4      	b.n	80027d6 <HAL_I2C_Init+0x146>
 800280c:	1e42      	subs	r2, r0, #1
 800280e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002812:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002816:	fbb2 f2f3 	udiv	r2, r2, r3
 800281a:	3201      	adds	r2, #1
 800281c:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002820:	f442 4340 	orr.w	r3, r2, #49152	; 0xc000
 8002824:	e788      	b.n	8002738 <HAL_I2C_Init+0xa8>
 8002826:	2304      	movs	r3, #4
 8002828:	e786      	b.n	8002738 <HAL_I2C_Init+0xa8>
 800282a:	2301      	movs	r3, #1
 800282c:	e784      	b.n	8002738 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
}
 8002830:	4770      	bx	lr
    return HAL_ERROR;
 8002832:	2001      	movs	r0, #1
 8002834:	e7ac      	b.n	8002790 <HAL_I2C_Init+0x100>
 8002836:	bf00      	nop
 8002838:	000186a0 	.word	0x000186a0
 800283c:	001e847f 	.word	0x001e847f
 8002840:	431bde83 	.word	0x431bde83
 8002844:	003d08ff 	.word	0x003d08ff
 8002848:	10624dd3 	.word	0x10624dd3

0800284c <HAL_I2C_Mem_Write>:
{
 800284c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002850:	b083      	sub	sp, #12
 8002852:	4604      	mov	r4, r0
 8002854:	460f      	mov	r7, r1
 8002856:	4690      	mov	r8, r2
 8002858:	4699      	mov	r9, r3
 800285a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 800285c:	f7ff fc0a 	bl	8002074 <HAL_GetTick>
 8002860:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002862:	f894 003d 	ldrb.w	r0, [r4, #61]	; 0x3d
 8002866:	b2c0      	uxtb	r0, r0
 8002868:	2820      	cmp	r0, #32
 800286a:	d003      	beq.n	8002874 <HAL_I2C_Mem_Write+0x28>
    return HAL_BUSY;
 800286c:	2002      	movs	r0, #2
}
 800286e:	b003      	add	sp, #12
 8002870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002874:	9500      	str	r5, [sp, #0]
 8002876:	2319      	movs	r3, #25
 8002878:	2201      	movs	r2, #1
 800287a:	494b      	ldr	r1, [pc, #300]	; (80029a8 <HAL_I2C_Mem_Write+0x15c>)
 800287c:	4620      	mov	r0, r4
 800287e:	f7ff fdb8 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 8002882:	2800      	cmp	r0, #0
 8002884:	f040 8089 	bne.w	800299a <HAL_I2C_Mem_Write+0x14e>
    __HAL_LOCK(hi2c);
 8002888:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800288c:	2b01      	cmp	r3, #1
 800288e:	f000 8086 	beq.w	800299e <HAL_I2C_Mem_Write+0x152>
 8002892:	2301      	movs	r3, #1
 8002894:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	f012 0f01 	tst.w	r2, #1
 80028a0:	d103      	bne.n	80028aa <HAL_I2C_Mem_Write+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028aa:	6822      	ldr	r2, [r4, #0]
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80028b2:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b4:	2321      	movs	r3, #33	; 0x21
 80028b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ba:	2340      	movs	r3, #64	; 0x40
 80028bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 80028c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028c6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 80028cc:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028d0:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d2:	4b36      	ldr	r3, [pc, #216]	; (80029ac <HAL_I2C_Mem_Write+0x160>)
 80028d4:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d6:	9501      	str	r5, [sp, #4]
 80028d8:	9600      	str	r6, [sp, #0]
 80028da:	464b      	mov	r3, r9
 80028dc:	4642      	mov	r2, r8
 80028de:	4639      	mov	r1, r7
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7ff fe3f 	bl	8002564 <I2C_RequestMemoryWrite>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d15b      	bne.n	80029a2 <HAL_I2C_Mem_Write+0x156>
    while (hi2c->XferSize > 0U)
 80028ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d035      	beq.n	800295c <HAL_I2C_Mem_Write+0x110>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028f0:	462a      	mov	r2, r5
 80028f2:	4631      	mov	r1, r6
 80028f4:	4620      	mov	r0, r4
 80028f6:	f7ff fe0b 	bl	8002510 <I2C_WaitOnTXEFlagUntilTimeout>
 80028fa:	bb20      	cbnz	r0, 8002946 <HAL_I2C_Mem_Write+0xfa>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	7812      	ldrb	r2, [r2, #0]
 8002902:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002904:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002906:	1c4b      	adds	r3, r1, #1
 8002908:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800290a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800290c:	3a01      	subs	r2, #1
 800290e:	b292      	uxth	r2, r2
 8002910:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002912:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29b      	uxth	r3, r3
 800291a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	6958      	ldr	r0, [r3, #20]
 8002920:	f010 0f04 	tst.w	r0, #4
 8002924:	d0e1      	beq.n	80028ea <HAL_I2C_Mem_Write+0x9e>
 8002926:	2a00      	cmp	r2, #0
 8002928:	d0df      	beq.n	80028ea <HAL_I2C_Mem_Write+0x9e>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800292a:	784a      	ldrb	r2, [r1, #1]
 800292c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800292e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002934:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800293a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	3b01      	subs	r3, #1
 8002940:	b29b      	uxth	r3, r3
 8002942:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002944:	e7d1      	b.n	80028ea <HAL_I2C_Mem_Write+0x9e>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002948:	2b04      	cmp	r3, #4
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Write+0x104>
        return HAL_ERROR;
 800294c:	2001      	movs	r0, #1
 800294e:	e78e      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	6822      	ldr	r2, [r4, #0]
 8002952:	6813      	ldr	r3, [r2, #0]
 8002954:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	e7f7      	b.n	800294c <HAL_I2C_Mem_Write+0x100>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295c:	462a      	mov	r2, r5
 800295e:	4631      	mov	r1, r6
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff fe6b 	bl	800263c <I2C_WaitOnBTFFlagUntilTimeout>
 8002966:	b150      	cbz	r0, 800297e <HAL_I2C_Mem_Write+0x132>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002968:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800296a:	2b04      	cmp	r3, #4
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Mem_Write+0x126>
      return HAL_ERROR;
 800296e:	2001      	movs	r0, #1
 8002970:	e77d      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	6822      	ldr	r2, [r4, #0]
 8002974:	6813      	ldr	r3, [r2, #0]
 8002976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	e7f7      	b.n	800296e <HAL_I2C_Mem_Write+0x122>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	6822      	ldr	r2, [r4, #0]
 8002980:	6813      	ldr	r3, [r2, #0]
 8002982:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002986:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002988:	2320      	movs	r3, #32
 800298a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800298e:	2300      	movs	r3, #0
 8002990:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8002994:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8002998:	e769      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
      return HAL_BUSY;
 800299a:	2002      	movs	r0, #2
 800299c:	e767      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
    __HAL_LOCK(hi2c);
 800299e:	2002      	movs	r0, #2
 80029a0:	e765      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
      return HAL_ERROR;
 80029a2:	2001      	movs	r0, #1
 80029a4:	e763      	b.n	800286e <HAL_I2C_Mem_Write+0x22>
 80029a6:	bf00      	nop
 80029a8:	00100002 	.word	0x00100002
 80029ac:	ffff0000 	.word	0xffff0000

080029b0 <HAL_I2C_IsDeviceReady>:
{
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	4605      	mov	r5, r0
 80029b8:	4689      	mov	r9, r1
 80029ba:	4692      	mov	sl, r2
 80029bc:	461e      	mov	r6, r3
  uint32_t tickstart = HAL_GetTick();
 80029be:	f7ff fb59 	bl	8002074 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c2:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d003      	beq.n	80029d4 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 80029cc:	2002      	movs	r0, #2
}
 80029ce:	b004      	add	sp, #16
 80029d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029d4:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029d6:	9000      	str	r0, [sp, #0]
 80029d8:	2319      	movs	r3, #25
 80029da:	2201      	movs	r2, #1
 80029dc:	4958      	ldr	r1, [pc, #352]	; (8002b40 <HAL_I2C_IsDeviceReady+0x190>)
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff fd07 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f040 80a2 	bne.w	8002b2e <HAL_I2C_IsDeviceReady+0x17e>
    __HAL_LOCK(hi2c);
 80029ea:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	f000 809f 	beq.w	8002b32 <HAL_I2C_IsDeviceReady+0x182>
 80029f4:	2301      	movs	r3, #1
 80029f6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fa:	682b      	ldr	r3, [r5, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f012 0f01 	tst.w	r2, #1
 8002a02:	d103      	bne.n	8002a0c <HAL_I2C_IsDeviceReady+0x5c>
      __HAL_I2C_ENABLE(hi2c);
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a0c:	682a      	ldr	r2, [r5, #0]
 8002a0e:	6813      	ldr	r3, [r2, #0]
 8002a10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a14:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a16:	2324      	movs	r3, #36	; 0x24
 8002a18:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a20:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002a24:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t I2C_Trials = 1U;
 8002a26:	f04f 0801 	mov.w	r8, #1
 8002a2a:	e03f      	b.n	8002aac <HAL_I2C_IsDeviceReady+0xfc>
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a34:	d002      	beq.n	8002a3c <HAL_I2C_IsDeviceReady+0x8c>
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a3a:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e7c6      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a40:	23a0      	movs	r3, #160	; 0xa0
 8002a42:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a46:	682a      	ldr	r2, [r5, #0]
 8002a48:	6953      	ldr	r3, [r2, #20]
 8002a4a:	f3c3 0340 	ubfx	r3, r3, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a4e:	6952      	ldr	r2, [r2, #20]
 8002a50:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a54:	f895 403d 	ldrb.w	r4, [r5, #61]	; 0x3d
 8002a58:	b2e4      	uxtb	r4, r4
 8002a5a:	2ca0      	cmp	r4, #160	; 0xa0
 8002a5c:	d009      	beq.n	8002a72 <HAL_I2C_IsDeviceReady+0xc2>
 8002a5e:	b943      	cbnz	r3, 8002a72 <HAL_I2C_IsDeviceReady+0xc2>
 8002a60:	b93a      	cbnz	r2, 8002a72 <HAL_I2C_IsDeviceReady+0xc2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a62:	f7ff fb07 	bl	8002074 <HAL_GetTick>
 8002a66:	1bc0      	subs	r0, r0, r7
 8002a68:	42b0      	cmp	r0, r6
 8002a6a:	d8e9      	bhi.n	8002a40 <HAL_I2C_IsDeviceReady+0x90>
 8002a6c:	2e00      	cmp	r6, #0
 8002a6e:	d1ea      	bne.n	8002a46 <HAL_I2C_IsDeviceReady+0x96>
 8002a70:	e7e6      	b.n	8002a40 <HAL_I2C_IsDeviceReady+0x90>
      hi2c->State = HAL_I2C_STATE_READY;
 8002a72:	2320      	movs	r3, #32
 8002a74:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002a78:	682b      	ldr	r3, [r5, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	f012 0f02 	tst.w	r2, #2
 8002a80:	d132      	bne.n	8002ae8 <HAL_I2C_IsDeviceReady+0x138>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a88:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8a:	682b      	ldr	r3, [r5, #0]
 8002a8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a90:	615a      	str	r2, [r3, #20]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a92:	9700      	str	r7, [sp, #0]
 8002a94:	2319      	movs	r3, #25
 8002a96:	2201      	movs	r2, #1
 8002a98:	4929      	ldr	r1, [pc, #164]	; (8002b40 <HAL_I2C_IsDeviceReady+0x190>)
 8002a9a:	4628      	mov	r0, r5
 8002a9c:	f7ff fca9 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d14a      	bne.n	8002b3a <HAL_I2C_IsDeviceReady+0x18a>
      I2C_Trials++;
 8002aa4:	f108 0801 	add.w	r8, r8, #1
    while (I2C_Trials < Trials);
 8002aa8:	45d0      	cmp	r8, sl
 8002aaa:	d238      	bcs.n	8002b1e <HAL_I2C_IsDeviceReady+0x16e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002aac:	682a      	ldr	r2, [r5, #0]
 8002aae:	6813      	ldr	r3, [r2, #0]
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6013      	str	r3, [r2, #0]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002ab6:	9700      	str	r7, [sp, #0]
 8002ab8:	4633      	mov	r3, r6
 8002aba:	2200      	movs	r2, #0
 8002abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f7ff fc96 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 8002ac6:	2800      	cmp	r0, #0
 8002ac8:	d1b0      	bne.n	8002a2c <HAL_I2C_IsDeviceReady+0x7c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aca:	682b      	ldr	r3, [r5, #0]
 8002acc:	f009 02fe 	and.w	r2, r9, #254	; 0xfe
 8002ad0:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8002ad2:	f7ff facf 	bl	8002074 <HAL_GetTick>
 8002ad6:	4607      	mov	r7, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ad8:	682a      	ldr	r2, [r5, #0]
 8002ada:	6953      	ldr	r3, [r2, #20]
 8002adc:	f3c3 0340 	ubfx	r3, r3, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ae0:	6952      	ldr	r2, [r2, #20]
 8002ae2:	f3c2 2280 	ubfx	r2, r2, #10, #1
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ae6:	e7b5      	b.n	8002a54 <HAL_I2C_IsDeviceReady+0xa4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aee:	601a      	str	r2, [r3, #0]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002af0:	2300      	movs	r3, #0
 8002af2:	9303      	str	r3, [sp, #12]
 8002af4:	682b      	ldr	r3, [r5, #0]
 8002af6:	695a      	ldr	r2, [r3, #20]
 8002af8:	9203      	str	r2, [sp, #12]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	9b03      	ldr	r3, [sp, #12]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	9700      	str	r7, [sp, #0]
 8002b02:	2319      	movs	r3, #25
 8002b04:	2201      	movs	r2, #1
 8002b06:	490e      	ldr	r1, [pc, #56]	; (8002b40 <HAL_I2C_IsDeviceReady+0x190>)
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f7ff fc72 	bl	80023f2 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	b990      	cbnz	r0, 8002b36 <HAL_I2C_IsDeviceReady+0x186>
        hi2c->State = HAL_I2C_STATE_READY;
 8002b10:	2320      	movs	r3, #32
 8002b12:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8002b16:	2300      	movs	r3, #0
 8002b18:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        return HAL_OK;
 8002b1c:	e757      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8002b24:	2300      	movs	r3, #0
 8002b26:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	e74f      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
      return HAL_BUSY;
 8002b2e:	2002      	movs	r0, #2
 8002b30:	e74d      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
    __HAL_LOCK(hi2c);
 8002b32:	2002      	movs	r0, #2
 8002b34:	e74b      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e749      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
          return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e747      	b.n	80029ce <HAL_I2C_IsDeviceReady+0x1e>
 8002b3e:	bf00      	nop
 8002b40:	00100002 	.word	0x00100002

08002b44 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f000 81df 	beq.w	8002f08 <HAL_RCC_OscConfig+0x3c4>
{
 8002b4a:	b570      	push	{r4, r5, r6, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b50:	6803      	ldr	r3, [r0, #0]
 8002b52:	f013 0f01 	tst.w	r3, #1
 8002b56:	d03b      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b58:	4ba6      	ldr	r3, [pc, #664]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d02c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b64:	4ba3      	ldr	r3, [pc, #652]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d021      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	6863      	ldr	r3, [r4, #4]
 8002b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b76:	d04f      	beq.n	8002c18 <HAL_RCC_OscConfig+0xd4>
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d052      	beq.n	8002c24 <HAL_RCC_OscConfig+0xe0>
 8002b7e:	4b9d      	ldr	r3, [pc, #628]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b90:	6863      	ldr	r3, [r4, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d050      	beq.n	8002c38 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7ff fa6d 	bl	8002074 <HAL_GetTick>
 8002b9a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b9c:	4b95      	ldr	r3, [pc, #596]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002ba4:	d114      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba6:	f7ff fa65 	bl	8002074 <HAL_GetTick>
 8002baa:	1b40      	subs	r0, r0, r5
 8002bac:	2864      	cmp	r0, #100	; 0x64
 8002bae:	d9f5      	bls.n	8002b9c <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8002bb0:	2003      	movs	r0, #3
 8002bb2:	e1b0      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb4:	4b8f      	ldr	r3, [pc, #572]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002bbc:	d0d8      	beq.n	8002b70 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bbe:	4b8d      	ldr	r3, [pc, #564]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002bc6:	d003      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x8c>
 8002bc8:	6863      	ldr	r3, [r4, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 819e 	beq.w	8002f0c <HAL_RCC_OscConfig+0x3c8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	f013 0f02 	tst.w	r3, #2
 8002bd6:	d054      	beq.n	8002c82 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bd8:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f013 0f0c 	tst.w	r3, #12
 8002be0:	d03e      	beq.n	8002c60 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be2:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	d033      	beq.n	8002c56 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bee:	68e3      	ldr	r3, [r4, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d067      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x180>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <HAL_RCC_OscConfig+0x2b4>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfa:	f7ff fa3b 	bl	8002074 <HAL_GetTick>
 8002bfe:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c00:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f013 0f02 	tst.w	r3, #2
 8002c08:	d153      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x16e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7ff fa33 	bl	8002074 <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	2802      	cmp	r0, #2
 8002c12:	d9f5      	bls.n	8002c00 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002c14:	2003      	movs	r0, #3
 8002c16:	e17e      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c18:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c1a:	6813      	ldr	r3, [r2, #0]
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e7b5      	b.n	8002b90 <HAL_RCC_OscConfig+0x4c>
 8002c24:	4b73      	ldr	r3, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c34:	601a      	str	r2, [r3, #0]
 8002c36:	e7ab      	b.n	8002b90 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002c38:	f7ff fa1c 	bl	8002074 <HAL_GetTick>
 8002c3c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	4b6d      	ldr	r3, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002c46:	d0c3      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff fa14 	bl	8002074 <HAL_GetTick>
 8002c4c:	1b40      	subs	r0, r0, r5
 8002c4e:	2864      	cmp	r0, #100	; 0x64
 8002c50:	d9f5      	bls.n	8002c3e <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002c52:	2003      	movs	r0, #3
 8002c54:	e15f      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c56:	4b67      	ldr	r3, [pc, #412]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c5e:	d1c6      	bne.n	8002bee <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c60:	4b64      	ldr	r3, [pc, #400]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f013 0f02 	tst.w	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_OscConfig+0x12e>
 8002c6a:	68e3      	ldr	r3, [r4, #12]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	f040 814f 	bne.w	8002f10 <HAL_RCC_OscConfig+0x3cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c72:	4a60      	ldr	r2, [pc, #384]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c74:	6813      	ldr	r3, [r2, #0]
 8002c76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c7a:	6921      	ldr	r1, [r4, #16]
 8002c7c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c80:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c82:	6823      	ldr	r3, [r4, #0]
 8002c84:	f013 0f08 	tst.w	r3, #8
 8002c88:	d040      	beq.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c8a:	6963      	ldr	r3, [r4, #20]
 8002c8c:	b363      	cbz	r3, 8002ce8 <HAL_RCC_OscConfig+0x1a4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <HAL_RCC_OscConfig+0x2b8>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c94:	f7ff f9ee 	bl	8002074 <HAL_GetTick>
 8002c98:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9a:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9e:	f013 0f02 	tst.w	r3, #2
 8002ca2:	d133      	bne.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca4:	f7ff f9e6 	bl	8002074 <HAL_GetTick>
 8002ca8:	1b40      	subs	r0, r0, r5
 8002caa:	2802      	cmp	r0, #2
 8002cac:	d9f5      	bls.n	8002c9a <HAL_RCC_OscConfig+0x156>
        {
          return HAL_TIMEOUT;
 8002cae:	2003      	movs	r0, #3
 8002cb0:	e131      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb2:	4a50      	ldr	r2, [pc, #320]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002cb4:	6813      	ldr	r3, [r2, #0]
 8002cb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cba:	6921      	ldr	r1, [r4, #16]
 8002cbc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e7de      	b.n	8002c82 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 8002cc4:	4b4c      	ldr	r3, [pc, #304]	; (8002df8 <HAL_RCC_OscConfig+0x2b4>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002cca:	f7ff f9d3 	bl	8002074 <HAL_GetTick>
 8002cce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd0:	4b48      	ldr	r3, [pc, #288]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f013 0f02 	tst.w	r3, #2
 8002cd8:	d0d3      	beq.n	8002c82 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cda:	f7ff f9cb 	bl	8002074 <HAL_GetTick>
 8002cde:	1b40      	subs	r0, r0, r5
 8002ce0:	2802      	cmp	r0, #2
 8002ce2:	d9f5      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x18c>
            return HAL_TIMEOUT;
 8002ce4:	2003      	movs	r0, #3
 8002ce6:	e116      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce8:	4b44      	ldr	r3, [pc, #272]	; (8002dfc <HAL_RCC_OscConfig+0x2b8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff f9c1 	bl	8002074 <HAL_GetTick>
 8002cf2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002cf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cf8:	f013 0f02 	tst.w	r3, #2
 8002cfc:	d006      	beq.n	8002d0c <HAL_RCC_OscConfig+0x1c8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfe:	f7ff f9b9 	bl	8002074 <HAL_GetTick>
 8002d02:	1b40      	subs	r0, r0, r5
 8002d04:	2802      	cmp	r0, #2
 8002d06:	d9f5      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x1b0>
        {
          return HAL_TIMEOUT;
 8002d08:	2003      	movs	r0, #3
 8002d0a:	e104      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	f013 0f04 	tst.w	r3, #4
 8002d12:	d078      	beq.n	8002e06 <HAL_RCC_OscConfig+0x2c2>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d14:	4b37      	ldr	r3, [pc, #220]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002d1c:	d10d      	bne.n	8002d3a <HAL_RCC_OscConfig+0x1f6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d36:	2501      	movs	r5, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x1f8>
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2500      	movs	r5, #0
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3c:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_RCC_OscConfig+0x2bc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d44:	d021      	beq.n	8002d8a <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d46:	68a3      	ldr	r3, [r4, #8]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d032      	beq.n	8002db2 <HAL_RCC_OscConfig+0x26e>
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d036      	beq.n	8002dbe <HAL_RCC_OscConfig+0x27a>
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d54:	f022 0201 	bic.w	r2, r2, #1
 8002d58:	671a      	str	r2, [r3, #112]	; 0x70
 8002d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d5c:	f022 0204 	bic.w	r2, r2, #4
 8002d60:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d034      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x28e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7ff f984 	bl	8002074 <HAL_GetTick>
 8002d6c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6e:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f013 0f02 	tst.w	r3, #2
 8002d76:	d145      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d78:	f7ff f97c 	bl	8002074 <HAL_GetTick>
 8002d7c:	1b80      	subs	r0, r0, r6
 8002d7e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d82:	4298      	cmp	r0, r3
 8002d84:	d9f3      	bls.n	8002d6e <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002d86:	2003      	movs	r0, #3
 8002d88:	e0c5      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4a1d      	ldr	r2, [pc, #116]	; (8002e00 <HAL_RCC_OscConfig+0x2bc>)
 8002d8c:	6813      	ldr	r3, [r2, #0]
 8002d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d92:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002d94:	f7ff f96e 	bl	8002074 <HAL_GetTick>
 8002d98:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_RCC_OscConfig+0x2bc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002da2:	d1d0      	bne.n	8002d46 <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7ff f966 	bl	8002074 <HAL_GetTick>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	2802      	cmp	r0, #2
 8002dac:	d9f5      	bls.n	8002d9a <HAL_RCC_OscConfig+0x256>
          return HAL_TIMEOUT;
 8002dae:	2003      	movs	r0, #3
 8002db0:	e0b1      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002db4:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	; 0x70
 8002dbc:	e7d1      	b.n	8002d62 <HAL_RCC_OscConfig+0x21e>
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dc2:	f042 0204 	orr.w	r2, r2, #4
 8002dc6:	671a      	str	r2, [r3, #112]	; 0x70
 8002dc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dca:	f042 0201 	orr.w	r2, r2, #1
 8002dce:	671a      	str	r2, [r3, #112]	; 0x70
 8002dd0:	e7c7      	b.n	8002d62 <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd2:	f7ff f94f 	bl	8002074 <HAL_GetTick>
 8002dd6:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd8:	4b06      	ldr	r3, [pc, #24]	; (8002df4 <HAL_RCC_OscConfig+0x2b0>)
 8002dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ddc:	f013 0f02 	tst.w	r3, #2
 8002de0:	d010      	beq.n	8002e04 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7ff f947 	bl	8002074 <HAL_GetTick>
 8002de6:	1b80      	subs	r0, r0, r6
 8002de8:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dec:	4298      	cmp	r0, r3
 8002dee:	d9f3      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x294>
        {
          return HAL_TIMEOUT;
 8002df0:	2003      	movs	r0, #3
 8002df2:	e090      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470000 	.word	0x42470000
 8002dfc:	42470e80 	.word	0x42470e80
 8002e00:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e04:	b9ed      	cbnz	r5, 8002e42 <HAL_RCC_OscConfig+0x2fe>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e06:	69a3      	ldr	r3, [r4, #24]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8083 	beq.w	8002f14 <HAL_RCC_OscConfig+0x3d0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e0e:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002e10:	6892      	ldr	r2, [r2, #8]
 8002e12:	f002 020c 	and.w	r2, r2, #12
 8002e16:	2a08      	cmp	r2, #8
 8002e18:	d051      	beq.n	8002ebe <HAL_RCC_OscConfig+0x37a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d017      	beq.n	8002e4e <HAL_RCC_OscConfig+0x30a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e1e:	4b46      	ldr	r3, [pc, #280]	; (8002f38 <HAL_RCC_OscConfig+0x3f4>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e24:	f7ff f926 	bl	8002074 <HAL_GetTick>
 8002e28:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2a:	4b42      	ldr	r3, [pc, #264]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e32:	d042      	beq.n	8002eba <HAL_RCC_OscConfig+0x376>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f7ff f91e 	bl	8002074 <HAL_GetTick>
 8002e38:	1b00      	subs	r0, r0, r4
 8002e3a:	2802      	cmp	r0, #2
 8002e3c:	d9f5      	bls.n	8002e2a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002e3e:	2003      	movs	r0, #3
 8002e40:	e069      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e42:	4a3c      	ldr	r2, [pc, #240]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002e44:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4c:	e7db      	b.n	8002e06 <HAL_RCC_OscConfig+0x2c2>
        __HAL_RCC_PLL_DISABLE();
 8002e4e:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCC_OscConfig+0x3f4>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e54:	f7ff f90e 	bl	8002074 <HAL_GetTick>
 8002e58:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5a:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e62:	d006      	beq.n	8002e72 <HAL_RCC_OscConfig+0x32e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7ff f906 	bl	8002074 <HAL_GetTick>
 8002e68:	1b40      	subs	r0, r0, r5
 8002e6a:	2802      	cmp	r0, #2
 8002e6c:	d9f5      	bls.n	8002e5a <HAL_RCC_OscConfig+0x316>
            return HAL_TIMEOUT;
 8002e6e:	2003      	movs	r0, #3
 8002e70:	e051      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e72:	69e3      	ldr	r3, [r4, #28]
 8002e74:	6a22      	ldr	r2, [r4, #32]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e7a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e7e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e80:	0852      	lsrs	r2, r2, #1
 8002e82:	3a01      	subs	r2, #1
 8002e84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e8a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e8e:	4a29      	ldr	r2, [pc, #164]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002e90:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x3f4>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002e98:	f7ff f8ec 	bl	8002074 <HAL_GetTick>
 8002e9c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b25      	ldr	r3, [pc, #148]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7ff f8e4 	bl	8002074 <HAL_GetTick>
 8002eac:	1b00      	subs	r0, r0, r4
 8002eae:	2802      	cmp	r0, #2
 8002eb0:	d9f5      	bls.n	8002e9e <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	e02f      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	e02d      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002eba:	2000      	movs	r0, #0
 8002ebc:	e02b      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d02b      	beq.n	8002f1a <HAL_RCC_OscConfig+0x3d6>
        pll_config = RCC->PLLCFGR;
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_RCC_OscConfig+0x3f0>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002eca:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ecc:	4291      	cmp	r1, r2
 8002ece:	d126      	bne.n	8002f1e <HAL_RCC_OscConfig+0x3da>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ed0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ed4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	428a      	cmp	r2, r1
 8002ed8:	d123      	bne.n	8002f22 <HAL_RCC_OscConfig+0x3de>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eda:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002edc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ee0:	401a      	ands	r2, r3
 8002ee2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ee6:	d11e      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3e2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ee8:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002eec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002eee:	0852      	lsrs	r2, r2, #1
 8002ef0:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ef2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ef6:	d118      	bne.n	8002f2a <HAL_RCC_OscConfig+0x3e6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ef8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002efc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002efe:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002f02:	d114      	bne.n	8002f2e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8002f04:	2000      	movs	r0, #0
 8002f06:	e006      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
    return HAL_ERROR;
 8002f08:	2001      	movs	r0, #1
}
 8002f0a:	4770      	bx	lr
        return HAL_ERROR;
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	e002      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
        return HAL_ERROR;
 8002f10:	2001      	movs	r0, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
  return HAL_OK;
 8002f14:	2000      	movs	r0, #0
}
 8002f16:	b002      	add	sp, #8
 8002f18:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002f1a:	2001      	movs	r0, #1
 8002f1c:	e7fb      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
          return HAL_ERROR;
 8002f1e:	2001      	movs	r0, #1
 8002f20:	e7f9      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002f22:	2001      	movs	r0, #1
 8002f24:	e7f7      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002f26:	2001      	movs	r0, #1
 8002f28:	e7f5      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	e7f3      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002f2e:	2001      	movs	r0, #1
 8002f30:	e7f1      	b.n	8002f16 <HAL_RCC_OscConfig+0x3d2>
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	42470060 	.word	0x42470060

08002f3c <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002f3c:	4b01      	ldr	r3, [pc, #4]	; (8002f44 <HAL_RCC_EnableCSS+0x8>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
}
 8002f42:	4770      	bx	lr
 8002f44:	4247004c 	.word	0x4247004c

08002f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f003 030c 	and.w	r3, r3, #12
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d053      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0xb6>
 8002f56:	2b08      	cmp	r3, #8
 8002f58:	d153      	bne.n	8003002 <HAL_RCC_GetSysClockFreq+0xba>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002f68:	d028      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002f72:	0158      	lsls	r0, r3, #5
 8002f74:	2100      	movs	r1, #0
 8002f76:	1ac0      	subs	r0, r0, r3
 8002f78:	f161 0100 	sbc.w	r1, r1, #0
 8002f7c:	018e      	lsls	r6, r1, #6
 8002f7e:	ea46 6690 	orr.w	r6, r6, r0, lsr #26
 8002f82:	0187      	lsls	r7, r0, #6
 8002f84:	1a3c      	subs	r4, r7, r0
 8002f86:	eb66 0501 	sbc.w	r5, r6, r1
 8002f8a:	00e9      	lsls	r1, r5, #3
 8002f8c:	ea41 7154 	orr.w	r1, r1, r4, lsr #29
 8002f90:	00e0      	lsls	r0, r4, #3
 8002f92:	18c0      	adds	r0, r0, r3
 8002f94:	f141 0100 	adc.w	r1, r1, #0
 8002f98:	024b      	lsls	r3, r1, #9
 8002f9a:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8002f9e:	0244      	lsls	r4, r0, #9
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f7fd fe6f 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002faa:	4b17      	ldr	r3, [pc, #92]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002fb6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002fba:	e023      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xbc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fbc:	4b12      	ldr	r3, [pc, #72]	; (8003008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002fc4:	015c      	lsls	r4, r3, #5
 8002fc6:	2500      	movs	r5, #0
 8002fc8:	1ae4      	subs	r4, r4, r3
 8002fca:	f165 0500 	sbc.w	r5, r5, #0
 8002fce:	01ae      	lsls	r6, r5, #6
 8002fd0:	ea46 6694 	orr.w	r6, r6, r4, lsr #26
 8002fd4:	01a7      	lsls	r7, r4, #6
 8002fd6:	1b38      	subs	r0, r7, r4
 8002fd8:	eb66 0105 	sbc.w	r1, r6, r5
 8002fdc:	00cc      	lsls	r4, r1, #3
 8002fde:	ea44 7450 	orr.w	r4, r4, r0, lsr #29
 8002fe2:	00c5      	lsls	r5, r0, #3
 8002fe4:	18e8      	adds	r0, r5, r3
 8002fe6:	f144 0100 	adc.w	r1, r4, #0
 8002fea:	028b      	lsls	r3, r1, #10
 8002fec:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8002ff0:	0284      	lsls	r4, r0, #10
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f7fd fe46 	bl	8000c88 <__aeabi_uldivmod>
 8002ffc:	e7d5      	b.n	8002faa <HAL_RCC_GetSysClockFreq+0x62>
      sysclockfreq = HSE_VALUE;
 8002ffe:	4803      	ldr	r0, [pc, #12]	; (800300c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003000:	e000      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xbc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <HAL_RCC_GetSysClockFreq+0xc8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	007a1200 	.word	0x007a1200
 8003010:	00f42400 	.word	0x00f42400

08003014 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8003014:	2800      	cmp	r0, #0
 8003016:	f000 809b 	beq.w	8003150 <HAL_RCC_ClockConfig+0x13c>
{
 800301a:	b570      	push	{r4, r5, r6, lr}
 800301c:	460d      	mov	r5, r1
 800301e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003020:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <HAL_RCC_ClockConfig+0x14c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	428b      	cmp	r3, r1
 800302a:	d208      	bcs.n	800303e <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302c:	b2cb      	uxtb	r3, r1
 800302e:	4a4c      	ldr	r2, [pc, #304]	; (8003160 <HAL_RCC_ClockConfig+0x14c>)
 8003030:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003032:	6813      	ldr	r3, [r2, #0]
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	428b      	cmp	r3, r1
 800303a:	f040 808b 	bne.w	8003154 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303e:	6823      	ldr	r3, [r4, #0]
 8003040:	f013 0f02 	tst.w	r3, #2
 8003044:	d017      	beq.n	8003076 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003046:	f013 0f04 	tst.w	r3, #4
 800304a:	d004      	beq.n	8003056 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800304c:	4a45      	ldr	r2, [pc, #276]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 800304e:	6893      	ldr	r3, [r2, #8]
 8003050:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003054:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	f013 0f08 	tst.w	r3, #8
 800305c:	d004      	beq.n	8003068 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800305e:	4a41      	ldr	r2, [pc, #260]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 8003060:	6893      	ldr	r3, [r2, #8]
 8003062:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003066:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4a3e      	ldr	r2, [pc, #248]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 800306a:	6893      	ldr	r3, [r2, #8]
 800306c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003070:	68a1      	ldr	r1, [r4, #8]
 8003072:	430b      	orrs	r3, r1
 8003074:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	f013 0f01 	tst.w	r3, #1
 800307c:	d032      	beq.n	80030e4 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307e:	6863      	ldr	r3, [r4, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d021      	beq.n	80030c8 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003084:	1e9a      	subs	r2, r3, #2
 8003086:	2a01      	cmp	r2, #1
 8003088:	d925      	bls.n	80030d6 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	4a36      	ldr	r2, [pc, #216]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	f012 0f02 	tst.w	r2, #2
 8003092:	d061      	beq.n	8003158 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003094:	4933      	ldr	r1, [pc, #204]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 8003096:	688a      	ldr	r2, [r1, #8]
 8003098:	f022 0203 	bic.w	r2, r2, #3
 800309c:	4313      	orrs	r3, r2
 800309e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80030a0:	f7fe ffe8 	bl	8002074 <HAL_GetTick>
 80030a4:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
 80030ae:	6862      	ldr	r2, [r4, #4]
 80030b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030b4:	d016      	beq.n	80030e4 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030b6:	f7fe ffdd 	bl	8002074 <HAL_GetTick>
 80030ba:	1b80      	subs	r0, r0, r6
 80030bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80030c0:	4298      	cmp	r0, r3
 80030c2:	d9f0      	bls.n	80030a6 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 80030c4:	2003      	movs	r0, #3
 80030c6:	e042      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c8:	4a26      	ldr	r2, [pc, #152]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80030d0:	d1e0      	bne.n	8003094 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80030d2:	2001      	movs	r0, #1
 80030d4:	e03b      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d6:	4a23      	ldr	r2, [pc, #140]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 80030d8:	6812      	ldr	r2, [r2, #0]
 80030da:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80030de:	d1d9      	bne.n	8003094 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 80030e0:	2001      	movs	r0, #1
 80030e2:	e034      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <HAL_RCC_ClockConfig+0x14c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	42ab      	cmp	r3, r5
 80030ee:	d907      	bls.n	8003100 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f0:	b2ea      	uxtb	r2, r5
 80030f2:	4b1b      	ldr	r3, [pc, #108]	; (8003160 <HAL_RCC_ClockConfig+0x14c>)
 80030f4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	d12d      	bne.n	800315c <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	f013 0f04 	tst.w	r3, #4
 8003106:	d006      	beq.n	8003116 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 800310a:	6893      	ldr	r3, [r2, #8]
 800310c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003110:	68e1      	ldr	r1, [r4, #12]
 8003112:	430b      	orrs	r3, r1
 8003114:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	f013 0f08 	tst.w	r3, #8
 800311c:	d007      	beq.n	800312e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 8003120:	6893      	ldr	r3, [r2, #8]
 8003122:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003126:	6921      	ldr	r1, [r4, #16]
 8003128:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800312c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800312e:	f7ff ff0b 	bl	8002f48 <HAL_RCC_GetSysClockFreq>
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HAL_RCC_ClockConfig+0x150>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_RCC_ClockConfig+0x154>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	40d8      	lsrs	r0, r3
 8003140:	4b0a      	ldr	r3, [pc, #40]	; (800316c <HAL_RCC_ClockConfig+0x158>)
 8003142:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003144:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_ClockConfig+0x15c>)
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	f7fe ff48 	bl	8001fdc <HAL_InitTick>
  return HAL_OK;
 800314c:	2000      	movs	r0, #0
}
 800314e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003150:	2001      	movs	r0, #1
}
 8003152:	4770      	bx	lr
      return HAL_ERROR;
 8003154:	2001      	movs	r0, #1
 8003156:	e7fa      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003158:	2001      	movs	r0, #1
 800315a:	e7f8      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 800315c:	2001      	movs	r0, #1
 800315e:	e7f6      	b.n	800314e <HAL_RCC_ClockConfig+0x13a>
 8003160:	40023c00 	.word	0x40023c00
 8003164:	40023800 	.word	0x40023800
 8003168:	08008688 	.word	0x08008688
 800316c:	2000000c 	.word	0x2000000c
 8003170:	20000014 	.word	0x20000014

08003174 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003174:	4b01      	ldr	r3, [pc, #4]	; (800317c <HAL_RCC_GetHCLKFreq+0x8>)
 8003176:	6818      	ldr	r0, [r3, #0]
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	2000000c 	.word	0x2000000c

08003180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003180:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003182:	f7ff fff7 	bl	8003174 <HAL_RCC_GetHCLKFreq>
 8003186:	4b04      	ldr	r3, [pc, #16]	; (8003198 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800318e:	4a03      	ldr	r2, [pc, #12]	; (800319c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003190:	5cd3      	ldrb	r3, [r2, r3]
}
 8003192:	40d8      	lsrs	r0, r3
 8003194:	bd08      	pop	{r3, pc}
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	08008698 	.word	0x08008698

080031a0 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80031a0:	4770      	bx	lr
	...

080031a4 <HAL_RCC_NMI_IRQHandler>:
{
 80031a4:	b508      	push	{r3, lr}
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031ae:	d100      	bne.n	80031b2 <HAL_RCC_NMI_IRQHandler+0xe>
}
 80031b0:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 80031b2:	f7ff fff5 	bl	80031a0 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80031b6:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	701a      	strb	r2, [r3, #0]
}
 80031bc:	e7f8      	b.n	80031b0 <HAL_RCC_NMI_IRQHandler+0xc>
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800
 80031c4:	4002380e 	.word	0x4002380e

080031c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031cc:	b082      	sub	sp, #8
 80031ce:	4605      	mov	r5, r0
 80031d0:	4688      	mov	r8, r1
 80031d2:	4617      	mov	r7, r2
 80031d4:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031d6:	f7fe ff4d 	bl	8002074 <HAL_GetTick>
 80031da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031dc:	1a1b      	subs	r3, r3, r0
 80031de:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 80031e2:	f7fe ff47 	bl	8002074 <HAL_GetTick>
 80031e6:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e8:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 80031f0:	fb09 f303 	mul.w	r3, r9, r3
 80031f4:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	689c      	ldr	r4, [r3, #8]
 80031fa:	ea38 0304 	bics.w	r3, r8, r4
 80031fe:	bf0c      	ite	eq
 8003200:	2401      	moveq	r4, #1
 8003202:	2400      	movne	r4, #0
 8003204:	42bc      	cmp	r4, r7
 8003206:	d040      	beq.n	800328a <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003208:	f1b6 3fff 	cmp.w	r6, #4294967295	; 0xffffffff
 800320c:	d0f3      	beq.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800320e:	f7fe ff31 	bl	8002074 <HAL_GetTick>
 8003212:	eba0 000a 	sub.w	r0, r0, sl
 8003216:	4548      	cmp	r0, r9
 8003218:	d20a      	bcs.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x68>
 800321a:	f1b9 0f00 	cmp.w	r9, #0
 800321e:	d007      	beq.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003220:	9a01      	ldr	r2, [sp, #4]
 8003222:	b102      	cbz	r2, 8003226 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8003224:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8003226:	9b01      	ldr	r3, [sp, #4]
 8003228:	3b01      	subs	r3, #1
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	4691      	mov	r9, r2
 800322e:	e7e2      	b.n	80031f6 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003230:	682a      	ldr	r2, [r5, #0]
 8003232:	6853      	ldr	r3, [r2, #4]
 8003234:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8003238:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323a:	686b      	ldr	r3, [r5, #4]
 800323c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003240:	d00b      	beq.n	800325a <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003242:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d014      	beq.n	8003274 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 800324a:	2301      	movs	r3, #1
 800324c:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003250:	2300      	movs	r3, #0
 8003252:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
        return HAL_TIMEOUT;
 8003256:	2003      	movs	r0, #3
 8003258:	e018      	b.n	800328c <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325a:	68ab      	ldr	r3, [r5, #8]
 800325c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003260:	d002      	beq.n	8003268 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003266:	d1ec      	bne.n	8003242 <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8003268:	682a      	ldr	r2, [r5, #0]
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e7e6      	b.n	8003242 <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8003274:	682a      	ldr	r2, [r5, #0]
 8003276:	6813      	ldr	r3, [r2, #0]
 8003278:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	682a      	ldr	r2, [r5, #0]
 8003280:	6813      	ldr	r3, [r2, #0]
 8003282:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e7df      	b.n	800324a <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 800328a:	2000      	movs	r0, #0
}
 800328c:	b002      	add	sp, #8
 800328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003292:	bf00      	nop
 8003294:	2000000c 	.word	0x2000000c

08003298 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b530      	push	{r4, r5, lr}
 800329a:	b085      	sub	sp, #20
 800329c:	4604      	mov	r4, r0
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800329e:	4b16      	ldr	r3, [pc, #88]	; (80032f8 <SPI_EndRxTxTransaction+0x60>)
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <SPI_EndRxTxTransaction+0x64>)
 80032a4:	fba3 3000 	umull	r3, r0, r3, r0
 80032a8:	0d40      	lsrs	r0, r0, #21
 80032aa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80032ae:	fb05 f000 	mul.w	r0, r5, r0
 80032b2:	9003      	str	r0, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032b4:	6863      	ldr	r3, [r4, #4]
 80032b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032ba:	d00b      	beq.n	80032d4 <SPI_EndRxTxTransaction+0x3c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80032bc:	9b03      	ldr	r3, [sp, #12]
 80032be:	b1bb      	cbz	r3, 80032f0 <SPI_EndRxTxTransaction+0x58>
      {
        break;
      }
      count--;
 80032c0:	9b03      	ldr	r3, [sp, #12]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80032c6:	6823      	ldr	r3, [r4, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80032ce:	d1f5      	bne.n	80032bc <SPI_EndRxTxTransaction+0x24>
  }

  return HAL_OK;
 80032d0:	2000      	movs	r0, #0
 80032d2:	e00e      	b.n	80032f2 <SPI_EndRxTxTransaction+0x5a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032d4:	9200      	str	r2, [sp, #0]
 80032d6:	460b      	mov	r3, r1
 80032d8:	2200      	movs	r2, #0
 80032da:	2180      	movs	r1, #128	; 0x80
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff ff73 	bl	80031c8 <SPI_WaitFlagStateUntilTimeout>
 80032e2:	b130      	cbz	r0, 80032f2 <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80032ec:	2003      	movs	r0, #3
 80032ee:	e000      	b.n	80032f2 <SPI_EndRxTxTransaction+0x5a>
  return HAL_OK;
 80032f0:	2000      	movs	r0, #0
}
 80032f2:	b005      	add	sp, #20
 80032f4:	bd30      	pop	{r4, r5, pc}
 80032f6:	bf00      	nop
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	165e9f81 	.word	0x165e9f81

08003300 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003300:	2800      	cmp	r0, #0
 8003302:	d05a      	beq.n	80033ba <HAL_SPI_Init+0xba>
{
 8003304:	b510      	push	{r4, lr}
 8003306:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003308:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800330a:	b933      	cbnz	r3, 800331a <HAL_SPI_Init+0x1a>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800330c:	6843      	ldr	r3, [r0, #4]
 800330e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003312:	d005      	beq.n	8003320 <HAL_SPI_Init+0x20>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003314:	2300      	movs	r3, #0
 8003316:	61c3      	str	r3, [r0, #28]
 8003318:	e002      	b.n	8003320 <HAL_SPI_Init+0x20>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800331a:	2300      	movs	r3, #0
 800331c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800331e:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003320:	2300      	movs	r3, #0
 8003322:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003324:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003328:	2b00      	cmp	r3, #0
 800332a:	d040      	beq.n	80033ae <HAL_SPI_Init+0xae>
  hspi->State = HAL_SPI_STATE_BUSY;
 800332c:	2302      	movs	r3, #2
 800332e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003332:	6822      	ldr	r2, [r4, #0]
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800333a:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800333c:	6863      	ldr	r3, [r4, #4]
 800333e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003342:	68a2      	ldr	r2, [r4, #8]
 8003344:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003348:	4313      	orrs	r3, r2
 800334a:	68e2      	ldr	r2, [r4, #12]
 800334c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003350:	4313      	orrs	r3, r2
 8003352:	6922      	ldr	r2, [r4, #16]
 8003354:	f002 0202 	and.w	r2, r2, #2
 8003358:	4313      	orrs	r3, r2
 800335a:	6962      	ldr	r2, [r4, #20]
 800335c:	f002 0201 	and.w	r2, r2, #1
 8003360:	4313      	orrs	r3, r2
 8003362:	69a2      	ldr	r2, [r4, #24]
 8003364:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003368:	4313      	orrs	r3, r2
 800336a:	69e2      	ldr	r2, [r4, #28]
 800336c:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003370:	4313      	orrs	r3, r2
 8003372:	6a22      	ldr	r2, [r4, #32]
 8003374:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8003378:	4313      	orrs	r3, r2
 800337a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800337c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003380:	6821      	ldr	r1, [r4, #0]
 8003382:	4313      	orrs	r3, r2
 8003384:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003386:	8b63      	ldrh	r3, [r4, #26]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800338e:	f002 0210 	and.w	r2, r2, #16
 8003392:	6821      	ldr	r1, [r4, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	604b      	str	r3, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003398:	6822      	ldr	r2, [r4, #0]
 800339a:	69d3      	ldr	r3, [r2, #28]
 800339c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033a0:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033a2:	2000      	movs	r0, #0
 80033a4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033a6:	2301      	movs	r3, #1
 80033a8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 80033ac:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 80033ae:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80033b2:	4620      	mov	r0, r4
 80033b4:	f7fe fd00 	bl	8001db8 <HAL_SPI_MspInit>
 80033b8:	e7b8      	b.n	800332c <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 80033ba:	2001      	movs	r0, #1
}
 80033bc:	4770      	bx	lr

080033be <HAL_SPI_Transmit>:
{
 80033be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c2:	b083      	sub	sp, #12
 80033c4:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 80033c6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	f000 80cc 	beq.w	8003568 <HAL_SPI_Transmit+0x1aa>
 80033d0:	4604      	mov	r4, r0
 80033d2:	4688      	mov	r8, r1
 80033d4:	4691      	mov	r9, r2
 80033d6:	2301      	movs	r3, #1
 80033d8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80033dc:	f7fe fe4a 	bl	8002074 <HAL_GetTick>
 80033e0:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033e2:	f894 6051 	ldrb.w	r6, [r4, #81]	; 0x51
 80033e6:	b2f6      	uxtb	r6, r6
 80033e8:	2e01      	cmp	r6, #1
 80033ea:	f040 80aa 	bne.w	8003542 <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 80033ee:	f1b8 0f00 	cmp.w	r8, #0
 80033f2:	f000 80a7 	beq.w	8003544 <HAL_SPI_Transmit+0x186>
 80033f6:	f1b9 0f00 	cmp.w	r9, #0
 80033fa:	f000 80a3 	beq.w	8003544 <HAL_SPI_Transmit+0x186>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80033fe:	2303      	movs	r3, #3
 8003400:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003404:	2300      	movs	r3, #0
 8003406:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003408:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800340c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003410:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003414:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003416:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003418:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800341a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800341c:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d01e      	beq.n	8003464 <HAL_SPI_Transmit+0xa6>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f012 0f40 	tst.w	r2, #64	; 0x40
 800342e:	d103      	bne.n	8003438 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003436:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003438:	68e3      	ldr	r3, [r4, #12]
 800343a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800343e:	d01c      	beq.n	800347a <HAL_SPI_Transmit+0xbc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003440:	6863      	ldr	r3, [r4, #4]
 8003442:	b113      	cbz	r3, 800344a <HAL_SPI_Transmit+0x8c>
 8003444:	f1b9 0f01 	cmp.w	r9, #1
 8003448:	d152      	bne.n	80034f0 <HAL_SPI_Transmit+0x132>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800344a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800344c:	6823      	ldr	r3, [r4, #0]
 800344e:	7812      	ldrb	r2, [r2, #0]
 8003450:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003452:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003454:	3301      	adds	r3, #1
 8003456:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29b      	uxth	r3, r3
 8003460:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003462:	e045      	b.n	80034f0 <HAL_SPI_Transmit+0x132>
    __HAL_SPI_DISABLE(hspi);
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	6813      	ldr	r3, [r2, #0]
 8003468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800346c:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 800346e:	6822      	ldr	r2, [r4, #0]
 8003470:	6813      	ldr	r3, [r2, #0]
 8003472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e7d5      	b.n	8003426 <HAL_SPI_Transmit+0x68>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	b113      	cbz	r3, 8003484 <HAL_SPI_Transmit+0xc6>
 800347e:	f1b9 0f01 	cmp.w	r9, #1
 8003482:	d116      	bne.n	80034b2 <HAL_SPI_Transmit+0xf4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003484:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003486:	6823      	ldr	r3, [r4, #0]
 8003488:	8812      	ldrh	r2, [r2, #0]
 800348a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800348c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800348e:	3302      	adds	r3, #2
 8003490:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003492:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003494:	b29b      	uxth	r3, r3
 8003496:	3b01      	subs	r3, #1
 8003498:	b29b      	uxth	r3, r3
 800349a:	86e3      	strh	r3, [r4, #54]	; 0x36
 800349c:	e009      	b.n	80034b2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800349e:	f7fe fde9 	bl	8002074 <HAL_GetTick>
 80034a2:	1bc0      	subs	r0, r0, r7
 80034a4:	42a8      	cmp	r0, r5
 80034a6:	d302      	bcc.n	80034ae <HAL_SPI_Transmit+0xf0>
 80034a8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80034ac:	d154      	bne.n	8003558 <HAL_SPI_Transmit+0x19a>
 80034ae:	2d00      	cmp	r5, #0
 80034b0:	d054      	beq.n	800355c <HAL_SPI_Transmit+0x19e>
    while (hspi->TxXferCount > 0U)
 80034b2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d02e      	beq.n	8003518 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	f012 0f02 	tst.w	r2, #2
 80034c2:	d0ec      	beq.n	800349e <HAL_SPI_Transmit+0xe0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034c4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80034cc:	3302      	adds	r3, #2
 80034ce:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80034d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	86e3      	strh	r3, [r4, #54]	; 0x36
 80034da:	e7ea      	b.n	80034b2 <HAL_SPI_Transmit+0xf4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034dc:	f7fe fdca 	bl	8002074 <HAL_GetTick>
 80034e0:	1bc0      	subs	r0, r0, r7
 80034e2:	42a8      	cmp	r0, r5
 80034e4:	d302      	bcc.n	80034ec <HAL_SPI_Transmit+0x12e>
 80034e6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 80034ea:	d139      	bne.n	8003560 <HAL_SPI_Transmit+0x1a2>
 80034ec:	2d00      	cmp	r5, #0
 80034ee:	d039      	beq.n	8003564 <HAL_SPI_Transmit+0x1a6>
    while (hspi->TxXferCount > 0U)
 80034f0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	b183      	cbz	r3, 8003518 <HAL_SPI_Transmit+0x15a>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	f012 0f02 	tst.w	r2, #2
 80034fe:	d0ed      	beq.n	80034dc <HAL_SPI_Transmit+0x11e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003500:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003506:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003508:	3301      	adds	r3, #1
 800350a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800350c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800350e:	b292      	uxth	r2, r2
 8003510:	3a01      	subs	r2, #1
 8003512:	b292      	uxth	r2, r2
 8003514:	86e2      	strh	r2, [r4, #54]	; 0x36
 8003516:	e7eb      	b.n	80034f0 <HAL_SPI_Transmit+0x132>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003518:	463a      	mov	r2, r7
 800351a:	4629      	mov	r1, r5
 800351c:	4620      	mov	r0, r4
 800351e:	f7ff febb 	bl	8003298 <SPI_EndRxTxTransaction>
 8003522:	b108      	cbz	r0, 8003528 <HAL_SPI_Transmit+0x16a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003524:	2320      	movs	r3, #32
 8003526:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003528:	68a3      	ldr	r3, [r4, #8]
 800352a:	b933      	cbnz	r3, 800353a <HAL_SPI_Transmit+0x17c>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800352c:	9301      	str	r3, [sp, #4]
 800352e:	6823      	ldr	r3, [r4, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	9201      	str	r2, [sp, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800353a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800353c:	b913      	cbnz	r3, 8003544 <HAL_SPI_Transmit+0x186>
  HAL_StatusTypeDef errorcode = HAL_OK;
 800353e:	2600      	movs	r6, #0
 8003540:	e000      	b.n	8003544 <HAL_SPI_Transmit+0x186>
    errorcode = HAL_BUSY;
 8003542:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 8003544:	2301      	movs	r3, #1
 8003546:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800354a:	2300      	movs	r3, #0
 800354c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003550:	4630      	mov	r0, r6
 8003552:	b003      	add	sp, #12
 8003554:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 8003558:	2603      	movs	r6, #3
 800355a:	e7f3      	b.n	8003544 <HAL_SPI_Transmit+0x186>
 800355c:	2603      	movs	r6, #3
 800355e:	e7f1      	b.n	8003544 <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 8003560:	2603      	movs	r6, #3
 8003562:	e7ef      	b.n	8003544 <HAL_SPI_Transmit+0x186>
 8003564:	2603      	movs	r6, #3
 8003566:	e7ed      	b.n	8003544 <HAL_SPI_Transmit+0x186>
  __HAL_LOCK(hspi);
 8003568:	2602      	movs	r6, #2
 800356a:	e7f1      	b.n	8003550 <HAL_SPI_Transmit+0x192>

0800356c <HAL_SPI_TransmitReceive>:
{
 800356c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003570:	b083      	sub	sp, #12
 8003572:	461f      	mov	r7, r3
 8003574:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8003576:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800357a:	2b01      	cmp	r3, #1
 800357c:	f000 8110 	beq.w	80037a0 <HAL_SPI_TransmitReceive+0x234>
 8003580:	4604      	mov	r4, r0
 8003582:	4688      	mov	r8, r1
 8003584:	4691      	mov	r9, r2
 8003586:	2301      	movs	r3, #1
 8003588:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 800358c:	f7fe fd72 	bl	8002074 <HAL_GetTick>
 8003590:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 8003592:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003596:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 8003598:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800359a:	2b01      	cmp	r3, #1
 800359c:	d00a      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x48>
 800359e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80035a2:	f040 80e3 	bne.w	800376c <HAL_SPI_TransmitReceive+0x200>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035a6:	68a2      	ldr	r2, [r4, #8]
 80035a8:	2a00      	cmp	r2, #0
 80035aa:	f040 80e9 	bne.w	8003780 <HAL_SPI_TransmitReceive+0x214>
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	f040 80e8 	bne.w	8003784 <HAL_SPI_TransmitReceive+0x218>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b4:	f1b8 0f00 	cmp.w	r8, #0
 80035b8:	f000 80e6 	beq.w	8003788 <HAL_SPI_TransmitReceive+0x21c>
 80035bc:	f1b9 0f00 	cmp.w	r9, #0
 80035c0:	f000 80e4 	beq.w	800378c <HAL_SPI_TransmitReceive+0x220>
 80035c4:	2f00      	cmp	r7, #0
 80035c6:	f000 80e3 	beq.w	8003790 <HAL_SPI_TransmitReceive+0x224>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035ca:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d002      	beq.n	80035da <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035d4:	2305      	movs	r3, #5
 80035d6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035da:	2300      	movs	r3, #0
 80035dc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035de:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 80035e2:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80035e4:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80035e6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 80035ea:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80035ec:	86a7      	strh	r7, [r4, #52]	; 0x34
  hspi->RxISR       = NULL;
 80035ee:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035f0:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	f012 0f40 	tst.w	r2, #64	; 0x40
 80035fa:	d103      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x98>
    __HAL_SPI_ENABLE(hspi);
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003602:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003604:	68e3      	ldr	r3, [r4, #12]
 8003606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800360a:	d011      	beq.n	8003630 <HAL_SPI_TransmitReceive+0xc4>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	b10b      	cbz	r3, 8003614 <HAL_SPI_TransmitReceive+0xa8>
 8003610:	2f01      	cmp	r7, #1
 8003612:	d10b      	bne.n	800362c <HAL_SPI_TransmitReceive+0xc0>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003614:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	7812      	ldrb	r2, [r2, #0]
 800361a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800361c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800361e:	3301      	adds	r3, #1
 8003620:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003622:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003624:	b29b      	uxth	r3, r3
 8003626:	3b01      	subs	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800362c:	2701      	movs	r7, #1
 800362e:	e06b      	b.n	8003708 <HAL_SPI_TransmitReceive+0x19c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003630:	6863      	ldr	r3, [r4, #4]
 8003632:	b10b      	cbz	r3, 8003638 <HAL_SPI_TransmitReceive+0xcc>
 8003634:	2f01      	cmp	r7, #1
 8003636:	d10b      	bne.n	8003650 <HAL_SPI_TransmitReceive+0xe4>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003638:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800363a:	6823      	ldr	r3, [r4, #0]
 800363c:	8812      	ldrh	r2, [r2, #0]
 800363e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003640:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003642:	3302      	adds	r3, #2
 8003644:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003646:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003648:	b29b      	uxth	r3, r3
 800364a:	3b01      	subs	r3, #1
 800364c:	b29b      	uxth	r3, r3
 800364e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003650:	2701      	movs	r7, #1
 8003652:	e01c      	b.n	800368e <HAL_SPI_TransmitReceive+0x122>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	f012 0f01 	tst.w	r2, #1
 800365c:	d00e      	beq.n	800367c <HAL_SPI_TransmitReceive+0x110>
 800365e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003660:	b292      	uxth	r2, r2
 8003662:	b15a      	cbz	r2, 800367c <HAL_SPI_TransmitReceive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003668:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800366a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800366c:	3302      	adds	r3, #2
 800366e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003670:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b01      	subs	r3, #1
 8003676:	b29b      	uxth	r3, r3
 8003678:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800367a:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800367c:	f7fe fcfa 	bl	8002074 <HAL_GetTick>
 8003680:	1b80      	subs	r0, r0, r6
 8003682:	42a8      	cmp	r0, r5
 8003684:	d303      	bcc.n	800368e <HAL_SPI_TransmitReceive+0x122>
 8003686:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 800368a:	f040 8083 	bne.w	8003794 <HAL_SPI_TransmitReceive+0x228>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003690:	b29b      	uxth	r3, r3
 8003692:	b91b      	cbnz	r3, 800369c <HAL_SPI_TransmitReceive+0x130>
 8003694:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d053      	beq.n	8003744 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	f012 0f02 	tst.w	r2, #2
 80036a4:	d0d6      	beq.n	8003654 <HAL_SPI_TransmitReceive+0xe8>
 80036a6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80036a8:	b292      	uxth	r2, r2
 80036aa:	2a00      	cmp	r2, #0
 80036ac:	d0d2      	beq.n	8003654 <HAL_SPI_TransmitReceive+0xe8>
 80036ae:	2f00      	cmp	r7, #0
 80036b0:	d0d0      	beq.n	8003654 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80036b4:	8812      	ldrh	r2, [r2, #0]
 80036b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036ba:	3302      	adds	r3, #2
 80036bc:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80036be:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80036c8:	2700      	movs	r7, #0
 80036ca:	e7c3      	b.n	8003654 <HAL_SPI_TransmitReceive+0xe8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	f012 0f01 	tst.w	r2, #1
 80036d4:	d00e      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x188>
 80036d6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80036d8:	b292      	uxth	r2, r2
 80036da:	b15a      	cbz	r2, 80036f4 <HAL_SPI_TransmitReceive+0x188>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036dc:	68da      	ldr	r2, [r3, #12]
 80036de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80036e4:	3301      	adds	r3, #1
 80036e6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80036e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80036f2:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80036f4:	f7fe fcbe 	bl	8002074 <HAL_GetTick>
 80036f8:	1b83      	subs	r3, r0, r6
 80036fa:	42ab      	cmp	r3, r5
 80036fc:	d302      	bcc.n	8003704 <HAL_SPI_TransmitReceive+0x198>
 80036fe:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
 8003702:	d149      	bne.n	8003798 <HAL_SPI_TransmitReceive+0x22c>
 8003704:	2d00      	cmp	r5, #0
 8003706:	d049      	beq.n	800379c <HAL_SPI_TransmitReceive+0x230>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003708:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	b913      	cbnz	r3, 8003714 <HAL_SPI_TransmitReceive+0x1a8>
 800370e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003710:	b29b      	uxth	r3, r3
 8003712:	b1bb      	cbz	r3, 8003744 <HAL_SPI_TransmitReceive+0x1d8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003714:	6823      	ldr	r3, [r4, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	f012 0f02 	tst.w	r2, #2
 800371c:	d0d6      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x160>
 800371e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003720:	b292      	uxth	r2, r2
 8003722:	2a00      	cmp	r2, #0
 8003724:	d0d2      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x160>
 8003726:	2f00      	cmp	r7, #0
 8003728:	d0d0      	beq.n	80036cc <HAL_SPI_TransmitReceive+0x160>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800372a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003730:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003732:	3301      	adds	r3, #1
 8003734:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003736:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003738:	b29b      	uxth	r3, r3
 800373a:	3b01      	subs	r3, #1
 800373c:	b29b      	uxth	r3, r3
 800373e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003740:	2700      	movs	r7, #0
 8003742:	e7c3      	b.n	80036cc <HAL_SPI_TransmitReceive+0x160>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003744:	4632      	mov	r2, r6
 8003746:	4629      	mov	r1, r5
 8003748:	4620      	mov	r0, r4
 800374a:	f7ff fda5 	bl	8003298 <SPI_EndRxTxTransaction>
 800374e:	b948      	cbnz	r0, 8003764 <HAL_SPI_TransmitReceive+0x1f8>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003750:	68a3      	ldr	r3, [r4, #8]
 8003752:	b963      	cbnz	r3, 800376e <HAL_SPI_TransmitReceive+0x202>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003754:	9301      	str	r3, [sp, #4]
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	9201      	str	r2, [sp, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	9301      	str	r3, [sp, #4]
 8003760:	9b01      	ldr	r3, [sp, #4]
 8003762:	e004      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003764:	2320      	movs	r3, #32
 8003766:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003768:	2001      	movs	r0, #1
    goto error;
 800376a:	e000      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_BUSY;
 800376c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800376e:	2301      	movs	r3, #1
 8003770:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003774:	2300      	movs	r3, #0
 8003776:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800377a:	b003      	add	sp, #12
 800377c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 8003780:	2002      	movs	r0, #2
 8003782:	e7f4      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
 8003784:	2002      	movs	r0, #2
 8003786:	e7f2      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
    errorcode = HAL_ERROR;
 8003788:	2001      	movs	r0, #1
 800378a:	e7f0      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
 800378c:	2001      	movs	r0, #1
 800378e:	e7ee      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
 8003790:	2001      	movs	r0, #1
 8003792:	e7ec      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8003794:	2003      	movs	r0, #3
 8003796:	e7ea      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
        errorcode = HAL_TIMEOUT;
 8003798:	2003      	movs	r0, #3
 800379a:	e7e8      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
 800379c:	2003      	movs	r0, #3
 800379e:	e7e6      	b.n	800376e <HAL_SPI_TransmitReceive+0x202>
  __HAL_LOCK(hspi);
 80037a0:	2002      	movs	r0, #2
 80037a2:	e7ea      	b.n	800377a <HAL_SPI_TransmitReceive+0x20e>

080037a4 <__errno>:
 80037a4:	4b01      	ldr	r3, [pc, #4]	; (80037ac <__errno+0x8>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000018 	.word	0x20000018

080037b0 <__libc_init_array>:
 80037b0:	b570      	push	{r4, r5, r6, lr}
 80037b2:	4d0d      	ldr	r5, [pc, #52]	; (80037e8 <__libc_init_array+0x38>)
 80037b4:	4c0d      	ldr	r4, [pc, #52]	; (80037ec <__libc_init_array+0x3c>)
 80037b6:	1b64      	subs	r4, r4, r5
 80037b8:	10a4      	asrs	r4, r4, #2
 80037ba:	2600      	movs	r6, #0
 80037bc:	42a6      	cmp	r6, r4
 80037be:	d109      	bne.n	80037d4 <__libc_init_array+0x24>
 80037c0:	4d0b      	ldr	r5, [pc, #44]	; (80037f0 <__libc_init_array+0x40>)
 80037c2:	4c0c      	ldr	r4, [pc, #48]	; (80037f4 <__libc_init_array+0x44>)
 80037c4:	f004 fc44 	bl	8008050 <_init>
 80037c8:	1b64      	subs	r4, r4, r5
 80037ca:	10a4      	asrs	r4, r4, #2
 80037cc:	2600      	movs	r6, #0
 80037ce:	42a6      	cmp	r6, r4
 80037d0:	d105      	bne.n	80037de <__libc_init_array+0x2e>
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80037d8:	4798      	blx	r3
 80037da:	3601      	adds	r6, #1
 80037dc:	e7ee      	b.n	80037bc <__libc_init_array+0xc>
 80037de:	f855 3b04 	ldr.w	r3, [r5], #4
 80037e2:	4798      	blx	r3
 80037e4:	3601      	adds	r6, #1
 80037e6:	e7f2      	b.n	80037ce <__libc_init_array+0x1e>
 80037e8:	08008b5c 	.word	0x08008b5c
 80037ec:	08008b5c 	.word	0x08008b5c
 80037f0:	08008b5c 	.word	0x08008b5c
 80037f4:	08008b60 	.word	0x08008b60

080037f8 <memset>:
 80037f8:	4402      	add	r2, r0
 80037fa:	4603      	mov	r3, r0
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d100      	bne.n	8003802 <memset+0xa>
 8003800:	4770      	bx	lr
 8003802:	f803 1b01 	strb.w	r1, [r3], #1
 8003806:	e7f9      	b.n	80037fc <memset+0x4>

08003808 <__cvt>:
 8003808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800380c:	ec55 4b10 	vmov	r4, r5, d0
 8003810:	2d00      	cmp	r5, #0
 8003812:	460e      	mov	r6, r1
 8003814:	4619      	mov	r1, r3
 8003816:	462b      	mov	r3, r5
 8003818:	bfbb      	ittet	lt
 800381a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800381e:	461d      	movlt	r5, r3
 8003820:	2300      	movge	r3, #0
 8003822:	232d      	movlt	r3, #45	; 0x2d
 8003824:	700b      	strb	r3, [r1, #0]
 8003826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800382c:	4691      	mov	r9, r2
 800382e:	f023 0820 	bic.w	r8, r3, #32
 8003832:	bfbc      	itt	lt
 8003834:	4622      	movlt	r2, r4
 8003836:	4614      	movlt	r4, r2
 8003838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800383c:	d005      	beq.n	800384a <__cvt+0x42>
 800383e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003842:	d100      	bne.n	8003846 <__cvt+0x3e>
 8003844:	3601      	adds	r6, #1
 8003846:	2102      	movs	r1, #2
 8003848:	e000      	b.n	800384c <__cvt+0x44>
 800384a:	2103      	movs	r1, #3
 800384c:	ab03      	add	r3, sp, #12
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	ab02      	add	r3, sp, #8
 8003852:	9300      	str	r3, [sp, #0]
 8003854:	ec45 4b10 	vmov	d0, r4, r5
 8003858:	4653      	mov	r3, sl
 800385a:	4632      	mov	r2, r6
 800385c:	f001 fdb4 	bl	80053c8 <_dtoa_r>
 8003860:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003864:	4607      	mov	r7, r0
 8003866:	d102      	bne.n	800386e <__cvt+0x66>
 8003868:	f019 0f01 	tst.w	r9, #1
 800386c:	d022      	beq.n	80038b4 <__cvt+0xac>
 800386e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003872:	eb07 0906 	add.w	r9, r7, r6
 8003876:	d110      	bne.n	800389a <__cvt+0x92>
 8003878:	783b      	ldrb	r3, [r7, #0]
 800387a:	2b30      	cmp	r3, #48	; 0x30
 800387c:	d10a      	bne.n	8003894 <__cvt+0x8c>
 800387e:	2200      	movs	r2, #0
 8003880:	2300      	movs	r3, #0
 8003882:	4620      	mov	r0, r4
 8003884:	4629      	mov	r1, r5
 8003886:	f7fd f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 800388a:	b918      	cbnz	r0, 8003894 <__cvt+0x8c>
 800388c:	f1c6 0601 	rsb	r6, r6, #1
 8003890:	f8ca 6000 	str.w	r6, [sl]
 8003894:	f8da 3000 	ldr.w	r3, [sl]
 8003898:	4499      	add	r9, r3
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	4620      	mov	r0, r4
 80038a0:	4629      	mov	r1, r5
 80038a2:	f7fd f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80038a6:	b108      	cbz	r0, 80038ac <__cvt+0xa4>
 80038a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80038ac:	2230      	movs	r2, #48	; 0x30
 80038ae:	9b03      	ldr	r3, [sp, #12]
 80038b0:	454b      	cmp	r3, r9
 80038b2:	d307      	bcc.n	80038c4 <__cvt+0xbc>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038b8:	1bdb      	subs	r3, r3, r7
 80038ba:	4638      	mov	r0, r7
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	b004      	add	sp, #16
 80038c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c4:	1c59      	adds	r1, r3, #1
 80038c6:	9103      	str	r1, [sp, #12]
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e7f0      	b.n	80038ae <__cvt+0xa6>

080038cc <__exponent>:
 80038cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ce:	4603      	mov	r3, r0
 80038d0:	2900      	cmp	r1, #0
 80038d2:	bfb8      	it	lt
 80038d4:	4249      	neglt	r1, r1
 80038d6:	f803 2b02 	strb.w	r2, [r3], #2
 80038da:	bfb4      	ite	lt
 80038dc:	222d      	movlt	r2, #45	; 0x2d
 80038de:	222b      	movge	r2, #43	; 0x2b
 80038e0:	2909      	cmp	r1, #9
 80038e2:	7042      	strb	r2, [r0, #1]
 80038e4:	dd2a      	ble.n	800393c <__exponent+0x70>
 80038e6:	f10d 0407 	add.w	r4, sp, #7
 80038ea:	46a4      	mov	ip, r4
 80038ec:	270a      	movs	r7, #10
 80038ee:	46a6      	mov	lr, r4
 80038f0:	460a      	mov	r2, r1
 80038f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80038f6:	fb07 1516 	mls	r5, r7, r6, r1
 80038fa:	3530      	adds	r5, #48	; 0x30
 80038fc:	2a63      	cmp	r2, #99	; 0x63
 80038fe:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003906:	4631      	mov	r1, r6
 8003908:	dcf1      	bgt.n	80038ee <__exponent+0x22>
 800390a:	3130      	adds	r1, #48	; 0x30
 800390c:	f1ae 0502 	sub.w	r5, lr, #2
 8003910:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003914:	1c44      	adds	r4, r0, #1
 8003916:	4629      	mov	r1, r5
 8003918:	4561      	cmp	r1, ip
 800391a:	d30a      	bcc.n	8003932 <__exponent+0x66>
 800391c:	f10d 0209 	add.w	r2, sp, #9
 8003920:	eba2 020e 	sub.w	r2, r2, lr
 8003924:	4565      	cmp	r5, ip
 8003926:	bf88      	it	hi
 8003928:	2200      	movhi	r2, #0
 800392a:	4413      	add	r3, r2
 800392c:	1a18      	subs	r0, r3, r0
 800392e:	b003      	add	sp, #12
 8003930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003936:	f804 2f01 	strb.w	r2, [r4, #1]!
 800393a:	e7ed      	b.n	8003918 <__exponent+0x4c>
 800393c:	2330      	movs	r3, #48	; 0x30
 800393e:	3130      	adds	r1, #48	; 0x30
 8003940:	7083      	strb	r3, [r0, #2]
 8003942:	70c1      	strb	r1, [r0, #3]
 8003944:	1d03      	adds	r3, r0, #4
 8003946:	e7f1      	b.n	800392c <__exponent+0x60>

08003948 <_printf_float>:
 8003948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800394c:	ed2d 8b02 	vpush	{d8}
 8003950:	b08d      	sub	sp, #52	; 0x34
 8003952:	460c      	mov	r4, r1
 8003954:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003958:	4616      	mov	r6, r2
 800395a:	461f      	mov	r7, r3
 800395c:	4605      	mov	r5, r0
 800395e:	f002 fe8f 	bl	8006680 <_localeconv_r>
 8003962:	f8d0 a000 	ldr.w	sl, [r0]
 8003966:	4650      	mov	r0, sl
 8003968:	f7fc fc32 	bl	80001d0 <strlen>
 800396c:	2300      	movs	r3, #0
 800396e:	930a      	str	r3, [sp, #40]	; 0x28
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	9305      	str	r3, [sp, #20]
 8003974:	f8d8 3000 	ldr.w	r3, [r8]
 8003978:	f894 b018 	ldrb.w	fp, [r4, #24]
 800397c:	3307      	adds	r3, #7
 800397e:	f023 0307 	bic.w	r3, r3, #7
 8003982:	f103 0208 	add.w	r2, r3, #8
 8003986:	f8c8 2000 	str.w	r2, [r8]
 800398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003992:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800399a:	9307      	str	r3, [sp, #28]
 800399c:	f8cd 8018 	str.w	r8, [sp, #24]
 80039a0:	ee08 0a10 	vmov	s16, r0
 80039a4:	4b9f      	ldr	r3, [pc, #636]	; (8003c24 <_printf_float+0x2dc>)
 80039a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039ae:	f7fd f8bd 	bl	8000b2c <__aeabi_dcmpun>
 80039b2:	bb88      	cbnz	r0, 8003a18 <_printf_float+0xd0>
 80039b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039b8:	4b9a      	ldr	r3, [pc, #616]	; (8003c24 <_printf_float+0x2dc>)
 80039ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039be:	f7fd f897 	bl	8000af0 <__aeabi_dcmple>
 80039c2:	bb48      	cbnz	r0, 8003a18 <_printf_float+0xd0>
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	4640      	mov	r0, r8
 80039ca:	4649      	mov	r1, r9
 80039cc:	f7fd f886 	bl	8000adc <__aeabi_dcmplt>
 80039d0:	b110      	cbz	r0, 80039d8 <_printf_float+0x90>
 80039d2:	232d      	movs	r3, #45	; 0x2d
 80039d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039d8:	4b93      	ldr	r3, [pc, #588]	; (8003c28 <_printf_float+0x2e0>)
 80039da:	4894      	ldr	r0, [pc, #592]	; (8003c2c <_printf_float+0x2e4>)
 80039dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80039e0:	bf94      	ite	ls
 80039e2:	4698      	movls	r8, r3
 80039e4:	4680      	movhi	r8, r0
 80039e6:	2303      	movs	r3, #3
 80039e8:	6123      	str	r3, [r4, #16]
 80039ea:	9b05      	ldr	r3, [sp, #20]
 80039ec:	f023 0204 	bic.w	r2, r3, #4
 80039f0:	6022      	str	r2, [r4, #0]
 80039f2:	f04f 0900 	mov.w	r9, #0
 80039f6:	9700      	str	r7, [sp, #0]
 80039f8:	4633      	mov	r3, r6
 80039fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80039fc:	4621      	mov	r1, r4
 80039fe:	4628      	mov	r0, r5
 8003a00:	f000 f9d8 	bl	8003db4 <_printf_common>
 8003a04:	3001      	adds	r0, #1
 8003a06:	f040 8090 	bne.w	8003b2a <_printf_float+0x1e2>
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a0e:	b00d      	add	sp, #52	; 0x34
 8003a10:	ecbd 8b02 	vpop	{d8}
 8003a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a18:	4642      	mov	r2, r8
 8003a1a:	464b      	mov	r3, r9
 8003a1c:	4640      	mov	r0, r8
 8003a1e:	4649      	mov	r1, r9
 8003a20:	f7fd f884 	bl	8000b2c <__aeabi_dcmpun>
 8003a24:	b140      	cbz	r0, 8003a38 <_printf_float+0xf0>
 8003a26:	464b      	mov	r3, r9
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	bfbc      	itt	lt
 8003a2c:	232d      	movlt	r3, #45	; 0x2d
 8003a2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003a32:	487f      	ldr	r0, [pc, #508]	; (8003c30 <_printf_float+0x2e8>)
 8003a34:	4b7f      	ldr	r3, [pc, #508]	; (8003c34 <_printf_float+0x2ec>)
 8003a36:	e7d1      	b.n	80039dc <_printf_float+0x94>
 8003a38:	6863      	ldr	r3, [r4, #4]
 8003a3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003a3e:	9206      	str	r2, [sp, #24]
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	d13f      	bne.n	8003ac4 <_printf_float+0x17c>
 8003a44:	2306      	movs	r3, #6
 8003a46:	6063      	str	r3, [r4, #4]
 8003a48:	9b05      	ldr	r3, [sp, #20]
 8003a4a:	6861      	ldr	r1, [r4, #4]
 8003a4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003a50:	2300      	movs	r3, #0
 8003a52:	9303      	str	r3, [sp, #12]
 8003a54:	ab0a      	add	r3, sp, #40	; 0x28
 8003a56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003a5a:	ab09      	add	r3, sp, #36	; 0x24
 8003a5c:	ec49 8b10 	vmov	d0, r8, r9
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6022      	str	r2, [r4, #0]
 8003a64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f7ff fecd 	bl	8003808 <__cvt>
 8003a6e:	9b06      	ldr	r3, [sp, #24]
 8003a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a72:	2b47      	cmp	r3, #71	; 0x47
 8003a74:	4680      	mov	r8, r0
 8003a76:	d108      	bne.n	8003a8a <_printf_float+0x142>
 8003a78:	1cc8      	adds	r0, r1, #3
 8003a7a:	db02      	blt.n	8003a82 <_printf_float+0x13a>
 8003a7c:	6863      	ldr	r3, [r4, #4]
 8003a7e:	4299      	cmp	r1, r3
 8003a80:	dd41      	ble.n	8003b06 <_printf_float+0x1be>
 8003a82:	f1ab 0b02 	sub.w	fp, fp, #2
 8003a86:	fa5f fb8b 	uxtb.w	fp, fp
 8003a8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a8e:	d820      	bhi.n	8003ad2 <_printf_float+0x18a>
 8003a90:	3901      	subs	r1, #1
 8003a92:	465a      	mov	r2, fp
 8003a94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a98:	9109      	str	r1, [sp, #36]	; 0x24
 8003a9a:	f7ff ff17 	bl	80038cc <__exponent>
 8003a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003aa0:	1813      	adds	r3, r2, r0
 8003aa2:	2a01      	cmp	r2, #1
 8003aa4:	4681      	mov	r9, r0
 8003aa6:	6123      	str	r3, [r4, #16]
 8003aa8:	dc02      	bgt.n	8003ab0 <_printf_float+0x168>
 8003aaa:	6822      	ldr	r2, [r4, #0]
 8003aac:	07d2      	lsls	r2, r2, #31
 8003aae:	d501      	bpl.n	8003ab4 <_printf_float+0x16c>
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	6123      	str	r3, [r4, #16]
 8003ab4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d09c      	beq.n	80039f6 <_printf_float+0xae>
 8003abc:	232d      	movs	r3, #45	; 0x2d
 8003abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ac2:	e798      	b.n	80039f6 <_printf_float+0xae>
 8003ac4:	9a06      	ldr	r2, [sp, #24]
 8003ac6:	2a47      	cmp	r2, #71	; 0x47
 8003ac8:	d1be      	bne.n	8003a48 <_printf_float+0x100>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1bc      	bne.n	8003a48 <_printf_float+0x100>
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e7b9      	b.n	8003a46 <_printf_float+0xfe>
 8003ad2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003ad6:	d118      	bne.n	8003b0a <_printf_float+0x1c2>
 8003ad8:	2900      	cmp	r1, #0
 8003ada:	6863      	ldr	r3, [r4, #4]
 8003adc:	dd0b      	ble.n	8003af6 <_printf_float+0x1ae>
 8003ade:	6121      	str	r1, [r4, #16]
 8003ae0:	b913      	cbnz	r3, 8003ae8 <_printf_float+0x1a0>
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	07d0      	lsls	r0, r2, #31
 8003ae6:	d502      	bpl.n	8003aee <_printf_float+0x1a6>
 8003ae8:	3301      	adds	r3, #1
 8003aea:	440b      	add	r3, r1
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8003af0:	f04f 0900 	mov.w	r9, #0
 8003af4:	e7de      	b.n	8003ab4 <_printf_float+0x16c>
 8003af6:	b913      	cbnz	r3, 8003afe <_printf_float+0x1b6>
 8003af8:	6822      	ldr	r2, [r4, #0]
 8003afa:	07d2      	lsls	r2, r2, #31
 8003afc:	d501      	bpl.n	8003b02 <_printf_float+0x1ba>
 8003afe:	3302      	adds	r3, #2
 8003b00:	e7f4      	b.n	8003aec <_printf_float+0x1a4>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e7f2      	b.n	8003aec <_printf_float+0x1a4>
 8003b06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b0c:	4299      	cmp	r1, r3
 8003b0e:	db05      	blt.n	8003b1c <_printf_float+0x1d4>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	6121      	str	r1, [r4, #16]
 8003b14:	07d8      	lsls	r0, r3, #31
 8003b16:	d5ea      	bpl.n	8003aee <_printf_float+0x1a6>
 8003b18:	1c4b      	adds	r3, r1, #1
 8003b1a:	e7e7      	b.n	8003aec <_printf_float+0x1a4>
 8003b1c:	2900      	cmp	r1, #0
 8003b1e:	bfd4      	ite	le
 8003b20:	f1c1 0202 	rsble	r2, r1, #2
 8003b24:	2201      	movgt	r2, #1
 8003b26:	4413      	add	r3, r2
 8003b28:	e7e0      	b.n	8003aec <_printf_float+0x1a4>
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	055a      	lsls	r2, r3, #21
 8003b2e:	d407      	bmi.n	8003b40 <_printf_float+0x1f8>
 8003b30:	6923      	ldr	r3, [r4, #16]
 8003b32:	4642      	mov	r2, r8
 8003b34:	4631      	mov	r1, r6
 8003b36:	4628      	mov	r0, r5
 8003b38:	47b8      	blx	r7
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	d12c      	bne.n	8003b98 <_printf_float+0x250>
 8003b3e:	e764      	b.n	8003a0a <_printf_float+0xc2>
 8003b40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003b44:	f240 80e0 	bls.w	8003d08 <_printf_float+0x3c0>
 8003b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f7fc ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8003b54:	2800      	cmp	r0, #0
 8003b56:	d034      	beq.n	8003bc2 <_printf_float+0x27a>
 8003b58:	4a37      	ldr	r2, [pc, #220]	; (8003c38 <_printf_float+0x2f0>)
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	4631      	mov	r1, r6
 8003b5e:	4628      	mov	r0, r5
 8003b60:	47b8      	blx	r7
 8003b62:	3001      	adds	r0, #1
 8003b64:	f43f af51 	beq.w	8003a0a <_printf_float+0xc2>
 8003b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	db02      	blt.n	8003b76 <_printf_float+0x22e>
 8003b70:	6823      	ldr	r3, [r4, #0]
 8003b72:	07d8      	lsls	r0, r3, #31
 8003b74:	d510      	bpl.n	8003b98 <_printf_float+0x250>
 8003b76:	ee18 3a10 	vmov	r3, s16
 8003b7a:	4652      	mov	r2, sl
 8003b7c:	4631      	mov	r1, r6
 8003b7e:	4628      	mov	r0, r5
 8003b80:	47b8      	blx	r7
 8003b82:	3001      	adds	r0, #1
 8003b84:	f43f af41 	beq.w	8003a0a <_printf_float+0xc2>
 8003b88:	f04f 0800 	mov.w	r8, #0
 8003b8c:	f104 091a 	add.w	r9, r4, #26
 8003b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b92:	3b01      	subs	r3, #1
 8003b94:	4543      	cmp	r3, r8
 8003b96:	dc09      	bgt.n	8003bac <_printf_float+0x264>
 8003b98:	6823      	ldr	r3, [r4, #0]
 8003b9a:	079b      	lsls	r3, r3, #30
 8003b9c:	f100 8105 	bmi.w	8003daa <_printf_float+0x462>
 8003ba0:	68e0      	ldr	r0, [r4, #12]
 8003ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003ba4:	4298      	cmp	r0, r3
 8003ba6:	bfb8      	it	lt
 8003ba8:	4618      	movlt	r0, r3
 8003baa:	e730      	b.n	8003a0e <_printf_float+0xc6>
 8003bac:	2301      	movs	r3, #1
 8003bae:	464a      	mov	r2, r9
 8003bb0:	4631      	mov	r1, r6
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	47b8      	blx	r7
 8003bb6:	3001      	adds	r0, #1
 8003bb8:	f43f af27 	beq.w	8003a0a <_printf_float+0xc2>
 8003bbc:	f108 0801 	add.w	r8, r8, #1
 8003bc0:	e7e6      	b.n	8003b90 <_printf_float+0x248>
 8003bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	dc39      	bgt.n	8003c3c <_printf_float+0x2f4>
 8003bc8:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <_printf_float+0x2f0>)
 8003bca:	2301      	movs	r3, #1
 8003bcc:	4631      	mov	r1, r6
 8003bce:	4628      	mov	r0, r5
 8003bd0:	47b8      	blx	r7
 8003bd2:	3001      	adds	r0, #1
 8003bd4:	f43f af19 	beq.w	8003a0a <_printf_float+0xc2>
 8003bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	d102      	bne.n	8003be6 <_printf_float+0x29e>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	07d9      	lsls	r1, r3, #31
 8003be4:	d5d8      	bpl.n	8003b98 <_printf_float+0x250>
 8003be6:	ee18 3a10 	vmov	r3, s16
 8003bea:	4652      	mov	r2, sl
 8003bec:	4631      	mov	r1, r6
 8003bee:	4628      	mov	r0, r5
 8003bf0:	47b8      	blx	r7
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	f43f af09 	beq.w	8003a0a <_printf_float+0xc2>
 8003bf8:	f04f 0900 	mov.w	r9, #0
 8003bfc:	f104 0a1a 	add.w	sl, r4, #26
 8003c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c02:	425b      	negs	r3, r3
 8003c04:	454b      	cmp	r3, r9
 8003c06:	dc01      	bgt.n	8003c0c <_printf_float+0x2c4>
 8003c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c0a:	e792      	b.n	8003b32 <_printf_float+0x1ea>
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	4652      	mov	r2, sl
 8003c10:	4631      	mov	r1, r6
 8003c12:	4628      	mov	r0, r5
 8003c14:	47b8      	blx	r7
 8003c16:	3001      	adds	r0, #1
 8003c18:	f43f aef7 	beq.w	8003a0a <_printf_float+0xc2>
 8003c1c:	f109 0901 	add.w	r9, r9, #1
 8003c20:	e7ee      	b.n	8003c00 <_printf_float+0x2b8>
 8003c22:	bf00      	nop
 8003c24:	7fefffff 	.word	0x7fefffff
 8003c28:	080086a4 	.word	0x080086a4
 8003c2c:	080086a8 	.word	0x080086a8
 8003c30:	080086b0 	.word	0x080086b0
 8003c34:	080086ac 	.word	0x080086ac
 8003c38:	080086b4 	.word	0x080086b4
 8003c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c40:	429a      	cmp	r2, r3
 8003c42:	bfa8      	it	ge
 8003c44:	461a      	movge	r2, r3
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	4691      	mov	r9, r2
 8003c4a:	dc37      	bgt.n	8003cbc <_printf_float+0x374>
 8003c4c:	f04f 0b00 	mov.w	fp, #0
 8003c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c54:	f104 021a 	add.w	r2, r4, #26
 8003c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c5a:	9305      	str	r3, [sp, #20]
 8003c5c:	eba3 0309 	sub.w	r3, r3, r9
 8003c60:	455b      	cmp	r3, fp
 8003c62:	dc33      	bgt.n	8003ccc <_printf_float+0x384>
 8003c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	db3b      	blt.n	8003ce4 <_printf_float+0x39c>
 8003c6c:	6823      	ldr	r3, [r4, #0]
 8003c6e:	07da      	lsls	r2, r3, #31
 8003c70:	d438      	bmi.n	8003ce4 <_printf_float+0x39c>
 8003c72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c74:	9b05      	ldr	r3, [sp, #20]
 8003c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	eba2 0901 	sub.w	r9, r2, r1
 8003c7e:	4599      	cmp	r9, r3
 8003c80:	bfa8      	it	ge
 8003c82:	4699      	movge	r9, r3
 8003c84:	f1b9 0f00 	cmp.w	r9, #0
 8003c88:	dc35      	bgt.n	8003cf6 <_printf_float+0x3ae>
 8003c8a:	f04f 0800 	mov.w	r8, #0
 8003c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c92:	f104 0a1a 	add.w	sl, r4, #26
 8003c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	eba3 0309 	sub.w	r3, r3, r9
 8003ca0:	4543      	cmp	r3, r8
 8003ca2:	f77f af79 	ble.w	8003b98 <_printf_float+0x250>
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	4652      	mov	r2, sl
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	f43f aeaa 	beq.w	8003a0a <_printf_float+0xc2>
 8003cb6:	f108 0801 	add.w	r8, r8, #1
 8003cba:	e7ec      	b.n	8003c96 <_printf_float+0x34e>
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	4628      	mov	r0, r5
 8003cc4:	47b8      	blx	r7
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d1c0      	bne.n	8003c4c <_printf_float+0x304>
 8003cca:	e69e      	b.n	8003a0a <_printf_float+0xc2>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4631      	mov	r1, r6
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	9205      	str	r2, [sp, #20]
 8003cd4:	47b8      	blx	r7
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	f43f ae97 	beq.w	8003a0a <_printf_float+0xc2>
 8003cdc:	9a05      	ldr	r2, [sp, #20]
 8003cde:	f10b 0b01 	add.w	fp, fp, #1
 8003ce2:	e7b9      	b.n	8003c58 <_printf_float+0x310>
 8003ce4:	ee18 3a10 	vmov	r3, s16
 8003ce8:	4652      	mov	r2, sl
 8003cea:	4631      	mov	r1, r6
 8003cec:	4628      	mov	r0, r5
 8003cee:	47b8      	blx	r7
 8003cf0:	3001      	adds	r0, #1
 8003cf2:	d1be      	bne.n	8003c72 <_printf_float+0x32a>
 8003cf4:	e689      	b.n	8003a0a <_printf_float+0xc2>
 8003cf6:	9a05      	ldr	r2, [sp, #20]
 8003cf8:	464b      	mov	r3, r9
 8003cfa:	4442      	add	r2, r8
 8003cfc:	4631      	mov	r1, r6
 8003cfe:	4628      	mov	r0, r5
 8003d00:	47b8      	blx	r7
 8003d02:	3001      	adds	r0, #1
 8003d04:	d1c1      	bne.n	8003c8a <_printf_float+0x342>
 8003d06:	e680      	b.n	8003a0a <_printf_float+0xc2>
 8003d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d0a:	2a01      	cmp	r2, #1
 8003d0c:	dc01      	bgt.n	8003d12 <_printf_float+0x3ca>
 8003d0e:	07db      	lsls	r3, r3, #31
 8003d10:	d538      	bpl.n	8003d84 <_printf_float+0x43c>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4642      	mov	r2, r8
 8003d16:	4631      	mov	r1, r6
 8003d18:	4628      	mov	r0, r5
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f43f ae74 	beq.w	8003a0a <_printf_float+0xc2>
 8003d22:	ee18 3a10 	vmov	r3, s16
 8003d26:	4652      	mov	r2, sl
 8003d28:	4631      	mov	r1, r6
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	47b8      	blx	r7
 8003d2e:	3001      	adds	r0, #1
 8003d30:	f43f ae6b 	beq.w	8003a0a <_printf_float+0xc2>
 8003d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f7fc fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8003d40:	b9d8      	cbnz	r0, 8003d7a <_printf_float+0x432>
 8003d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d44:	f108 0201 	add.w	r2, r8, #1
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	4631      	mov	r1, r6
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	47b8      	blx	r7
 8003d50:	3001      	adds	r0, #1
 8003d52:	d10e      	bne.n	8003d72 <_printf_float+0x42a>
 8003d54:	e659      	b.n	8003a0a <_printf_float+0xc2>
 8003d56:	2301      	movs	r3, #1
 8003d58:	4652      	mov	r2, sl
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	47b8      	blx	r7
 8003d60:	3001      	adds	r0, #1
 8003d62:	f43f ae52 	beq.w	8003a0a <_printf_float+0xc2>
 8003d66:	f108 0801 	add.w	r8, r8, #1
 8003d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	4543      	cmp	r3, r8
 8003d70:	dcf1      	bgt.n	8003d56 <_printf_float+0x40e>
 8003d72:	464b      	mov	r3, r9
 8003d74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d78:	e6dc      	b.n	8003b34 <_printf_float+0x1ec>
 8003d7a:	f04f 0800 	mov.w	r8, #0
 8003d7e:	f104 0a1a 	add.w	sl, r4, #26
 8003d82:	e7f2      	b.n	8003d6a <_printf_float+0x422>
 8003d84:	2301      	movs	r3, #1
 8003d86:	4642      	mov	r2, r8
 8003d88:	e7df      	b.n	8003d4a <_printf_float+0x402>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	464a      	mov	r2, r9
 8003d8e:	4631      	mov	r1, r6
 8003d90:	4628      	mov	r0, r5
 8003d92:	47b8      	blx	r7
 8003d94:	3001      	adds	r0, #1
 8003d96:	f43f ae38 	beq.w	8003a0a <_printf_float+0xc2>
 8003d9a:	f108 0801 	add.w	r8, r8, #1
 8003d9e:	68e3      	ldr	r3, [r4, #12]
 8003da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003da2:	1a5b      	subs	r3, r3, r1
 8003da4:	4543      	cmp	r3, r8
 8003da6:	dcf0      	bgt.n	8003d8a <_printf_float+0x442>
 8003da8:	e6fa      	b.n	8003ba0 <_printf_float+0x258>
 8003daa:	f04f 0800 	mov.w	r8, #0
 8003dae:	f104 0919 	add.w	r9, r4, #25
 8003db2:	e7f4      	b.n	8003d9e <_printf_float+0x456>

08003db4 <_printf_common>:
 8003db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003db8:	4616      	mov	r6, r2
 8003dba:	4699      	mov	r9, r3
 8003dbc:	688a      	ldr	r2, [r1, #8]
 8003dbe:	690b      	ldr	r3, [r1, #16]
 8003dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	bfb8      	it	lt
 8003dc8:	4613      	movlt	r3, r2
 8003dca:	6033      	str	r3, [r6, #0]
 8003dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	460c      	mov	r4, r1
 8003dd4:	b10a      	cbz	r2, 8003dda <_printf_common+0x26>
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	6033      	str	r3, [r6, #0]
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	0699      	lsls	r1, r3, #26
 8003dde:	bf42      	ittt	mi
 8003de0:	6833      	ldrmi	r3, [r6, #0]
 8003de2:	3302      	addmi	r3, #2
 8003de4:	6033      	strmi	r3, [r6, #0]
 8003de6:	6825      	ldr	r5, [r4, #0]
 8003de8:	f015 0506 	ands.w	r5, r5, #6
 8003dec:	d106      	bne.n	8003dfc <_printf_common+0x48>
 8003dee:	f104 0a19 	add.w	sl, r4, #25
 8003df2:	68e3      	ldr	r3, [r4, #12]
 8003df4:	6832      	ldr	r2, [r6, #0]
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	42ab      	cmp	r3, r5
 8003dfa:	dc26      	bgt.n	8003e4a <_printf_common+0x96>
 8003dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003e00:	1e13      	subs	r3, r2, #0
 8003e02:	6822      	ldr	r2, [r4, #0]
 8003e04:	bf18      	it	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	0692      	lsls	r2, r2, #26
 8003e0a:	d42b      	bmi.n	8003e64 <_printf_common+0xb0>
 8003e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e10:	4649      	mov	r1, r9
 8003e12:	4638      	mov	r0, r7
 8003e14:	47c0      	blx	r8
 8003e16:	3001      	adds	r0, #1
 8003e18:	d01e      	beq.n	8003e58 <_printf_common+0xa4>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	68e5      	ldr	r5, [r4, #12]
 8003e1e:	6832      	ldr	r2, [r6, #0]
 8003e20:	f003 0306 	and.w	r3, r3, #6
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	bf08      	it	eq
 8003e28:	1aad      	subeq	r5, r5, r2
 8003e2a:	68a3      	ldr	r3, [r4, #8]
 8003e2c:	6922      	ldr	r2, [r4, #16]
 8003e2e:	bf0c      	ite	eq
 8003e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e34:	2500      	movne	r5, #0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfc4      	itt	gt
 8003e3a:	1a9b      	subgt	r3, r3, r2
 8003e3c:	18ed      	addgt	r5, r5, r3
 8003e3e:	2600      	movs	r6, #0
 8003e40:	341a      	adds	r4, #26
 8003e42:	42b5      	cmp	r5, r6
 8003e44:	d11a      	bne.n	8003e7c <_printf_common+0xc8>
 8003e46:	2000      	movs	r0, #0
 8003e48:	e008      	b.n	8003e5c <_printf_common+0xa8>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	4652      	mov	r2, sl
 8003e4e:	4649      	mov	r1, r9
 8003e50:	4638      	mov	r0, r7
 8003e52:	47c0      	blx	r8
 8003e54:	3001      	adds	r0, #1
 8003e56:	d103      	bne.n	8003e60 <_printf_common+0xac>
 8003e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e60:	3501      	adds	r5, #1
 8003e62:	e7c6      	b.n	8003df2 <_printf_common+0x3e>
 8003e64:	18e1      	adds	r1, r4, r3
 8003e66:	1c5a      	adds	r2, r3, #1
 8003e68:	2030      	movs	r0, #48	; 0x30
 8003e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e6e:	4422      	add	r2, r4
 8003e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e78:	3302      	adds	r3, #2
 8003e7a:	e7c7      	b.n	8003e0c <_printf_common+0x58>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	4622      	mov	r2, r4
 8003e80:	4649      	mov	r1, r9
 8003e82:	4638      	mov	r0, r7
 8003e84:	47c0      	blx	r8
 8003e86:	3001      	adds	r0, #1
 8003e88:	d0e6      	beq.n	8003e58 <_printf_common+0xa4>
 8003e8a:	3601      	adds	r6, #1
 8003e8c:	e7d9      	b.n	8003e42 <_printf_common+0x8e>
	...

08003e90 <_printf_i>:
 8003e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	460c      	mov	r4, r1
 8003e96:	4691      	mov	r9, r2
 8003e98:	7e27      	ldrb	r7, [r4, #24]
 8003e9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003e9c:	2f78      	cmp	r7, #120	; 0x78
 8003e9e:	4680      	mov	r8, r0
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ea6:	d807      	bhi.n	8003eb8 <_printf_i+0x28>
 8003ea8:	2f62      	cmp	r7, #98	; 0x62
 8003eaa:	d80a      	bhi.n	8003ec2 <_printf_i+0x32>
 8003eac:	2f00      	cmp	r7, #0
 8003eae:	f000 80d8 	beq.w	8004062 <_printf_i+0x1d2>
 8003eb2:	2f58      	cmp	r7, #88	; 0x58
 8003eb4:	f000 80a3 	beq.w	8003ffe <_printf_i+0x16e>
 8003eb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ec0:	e03a      	b.n	8003f38 <_printf_i+0xa8>
 8003ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ec6:	2b15      	cmp	r3, #21
 8003ec8:	d8f6      	bhi.n	8003eb8 <_printf_i+0x28>
 8003eca:	a001      	add	r0, pc, #4	; (adr r0, 8003ed0 <_printf_i+0x40>)
 8003ecc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f3d 	.word	0x08003f3d
 8003ed8:	08003eb9 	.word	0x08003eb9
 8003edc:	08003eb9 	.word	0x08003eb9
 8003ee0:	08003eb9 	.word	0x08003eb9
 8003ee4:	08003eb9 	.word	0x08003eb9
 8003ee8:	08003f3d 	.word	0x08003f3d
 8003eec:	08003eb9 	.word	0x08003eb9
 8003ef0:	08003eb9 	.word	0x08003eb9
 8003ef4:	08003eb9 	.word	0x08003eb9
 8003ef8:	08003eb9 	.word	0x08003eb9
 8003efc:	08004049 	.word	0x08004049
 8003f00:	08003f6d 	.word	0x08003f6d
 8003f04:	0800402b 	.word	0x0800402b
 8003f08:	08003eb9 	.word	0x08003eb9
 8003f0c:	08003eb9 	.word	0x08003eb9
 8003f10:	0800406b 	.word	0x0800406b
 8003f14:	08003eb9 	.word	0x08003eb9
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003eb9 	.word	0x08003eb9
 8003f20:	08003eb9 	.word	0x08003eb9
 8003f24:	08004033 	.word	0x08004033
 8003f28:	680b      	ldr	r3, [r1, #0]
 8003f2a:	1d1a      	adds	r2, r3, #4
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	600a      	str	r2, [r1, #0]
 8003f30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e0a3      	b.n	8004084 <_printf_i+0x1f4>
 8003f3c:	6825      	ldr	r5, [r4, #0]
 8003f3e:	6808      	ldr	r0, [r1, #0]
 8003f40:	062e      	lsls	r6, r5, #24
 8003f42:	f100 0304 	add.w	r3, r0, #4
 8003f46:	d50a      	bpl.n	8003f5e <_printf_i+0xce>
 8003f48:	6805      	ldr	r5, [r0, #0]
 8003f4a:	600b      	str	r3, [r1, #0]
 8003f4c:	2d00      	cmp	r5, #0
 8003f4e:	da03      	bge.n	8003f58 <_printf_i+0xc8>
 8003f50:	232d      	movs	r3, #45	; 0x2d
 8003f52:	426d      	negs	r5, r5
 8003f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f58:	485e      	ldr	r0, [pc, #376]	; (80040d4 <_printf_i+0x244>)
 8003f5a:	230a      	movs	r3, #10
 8003f5c:	e019      	b.n	8003f92 <_printf_i+0x102>
 8003f5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003f62:	6805      	ldr	r5, [r0, #0]
 8003f64:	600b      	str	r3, [r1, #0]
 8003f66:	bf18      	it	ne
 8003f68:	b22d      	sxthne	r5, r5
 8003f6a:	e7ef      	b.n	8003f4c <_printf_i+0xbc>
 8003f6c:	680b      	ldr	r3, [r1, #0]
 8003f6e:	6825      	ldr	r5, [r4, #0]
 8003f70:	1d18      	adds	r0, r3, #4
 8003f72:	6008      	str	r0, [r1, #0]
 8003f74:	0628      	lsls	r0, r5, #24
 8003f76:	d501      	bpl.n	8003f7c <_printf_i+0xec>
 8003f78:	681d      	ldr	r5, [r3, #0]
 8003f7a:	e002      	b.n	8003f82 <_printf_i+0xf2>
 8003f7c:	0669      	lsls	r1, r5, #25
 8003f7e:	d5fb      	bpl.n	8003f78 <_printf_i+0xe8>
 8003f80:	881d      	ldrh	r5, [r3, #0]
 8003f82:	4854      	ldr	r0, [pc, #336]	; (80040d4 <_printf_i+0x244>)
 8003f84:	2f6f      	cmp	r7, #111	; 0x6f
 8003f86:	bf0c      	ite	eq
 8003f88:	2308      	moveq	r3, #8
 8003f8a:	230a      	movne	r3, #10
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f92:	6866      	ldr	r6, [r4, #4]
 8003f94:	60a6      	str	r6, [r4, #8]
 8003f96:	2e00      	cmp	r6, #0
 8003f98:	bfa2      	ittt	ge
 8003f9a:	6821      	ldrge	r1, [r4, #0]
 8003f9c:	f021 0104 	bicge.w	r1, r1, #4
 8003fa0:	6021      	strge	r1, [r4, #0]
 8003fa2:	b90d      	cbnz	r5, 8003fa8 <_printf_i+0x118>
 8003fa4:	2e00      	cmp	r6, #0
 8003fa6:	d04d      	beq.n	8004044 <_printf_i+0x1b4>
 8003fa8:	4616      	mov	r6, r2
 8003faa:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fae:	fb03 5711 	mls	r7, r3, r1, r5
 8003fb2:	5dc7      	ldrb	r7, [r0, r7]
 8003fb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb8:	462f      	mov	r7, r5
 8003fba:	42bb      	cmp	r3, r7
 8003fbc:	460d      	mov	r5, r1
 8003fbe:	d9f4      	bls.n	8003faa <_printf_i+0x11a>
 8003fc0:	2b08      	cmp	r3, #8
 8003fc2:	d10b      	bne.n	8003fdc <_printf_i+0x14c>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	07df      	lsls	r7, r3, #31
 8003fc8:	d508      	bpl.n	8003fdc <_printf_i+0x14c>
 8003fca:	6923      	ldr	r3, [r4, #16]
 8003fcc:	6861      	ldr	r1, [r4, #4]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	bfde      	ittt	le
 8003fd2:	2330      	movle	r3, #48	; 0x30
 8003fd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003fdc:	1b92      	subs	r2, r2, r6
 8003fde:	6122      	str	r2, [r4, #16]
 8003fe0:	f8cd a000 	str.w	sl, [sp]
 8003fe4:	464b      	mov	r3, r9
 8003fe6:	aa03      	add	r2, sp, #12
 8003fe8:	4621      	mov	r1, r4
 8003fea:	4640      	mov	r0, r8
 8003fec:	f7ff fee2 	bl	8003db4 <_printf_common>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d14c      	bne.n	800408e <_printf_i+0x1fe>
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ff8:	b004      	add	sp, #16
 8003ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffe:	4835      	ldr	r0, [pc, #212]	; (80040d4 <_printf_i+0x244>)
 8004000:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	680e      	ldr	r6, [r1, #0]
 8004008:	061f      	lsls	r7, r3, #24
 800400a:	f856 5b04 	ldr.w	r5, [r6], #4
 800400e:	600e      	str	r6, [r1, #0]
 8004010:	d514      	bpl.n	800403c <_printf_i+0x1ac>
 8004012:	07d9      	lsls	r1, r3, #31
 8004014:	bf44      	itt	mi
 8004016:	f043 0320 	orrmi.w	r3, r3, #32
 800401a:	6023      	strmi	r3, [r4, #0]
 800401c:	b91d      	cbnz	r5, 8004026 <_printf_i+0x196>
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	f023 0320 	bic.w	r3, r3, #32
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	2310      	movs	r3, #16
 8004028:	e7b0      	b.n	8003f8c <_printf_i+0xfc>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	f043 0320 	orr.w	r3, r3, #32
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	2378      	movs	r3, #120	; 0x78
 8004034:	4828      	ldr	r0, [pc, #160]	; (80040d8 <_printf_i+0x248>)
 8004036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800403a:	e7e3      	b.n	8004004 <_printf_i+0x174>
 800403c:	065e      	lsls	r6, r3, #25
 800403e:	bf48      	it	mi
 8004040:	b2ad      	uxthmi	r5, r5
 8004042:	e7e6      	b.n	8004012 <_printf_i+0x182>
 8004044:	4616      	mov	r6, r2
 8004046:	e7bb      	b.n	8003fc0 <_printf_i+0x130>
 8004048:	680b      	ldr	r3, [r1, #0]
 800404a:	6826      	ldr	r6, [r4, #0]
 800404c:	6960      	ldr	r0, [r4, #20]
 800404e:	1d1d      	adds	r5, r3, #4
 8004050:	600d      	str	r5, [r1, #0]
 8004052:	0635      	lsls	r5, r6, #24
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	d501      	bpl.n	800405c <_printf_i+0x1cc>
 8004058:	6018      	str	r0, [r3, #0]
 800405a:	e002      	b.n	8004062 <_printf_i+0x1d2>
 800405c:	0671      	lsls	r1, r6, #25
 800405e:	d5fb      	bpl.n	8004058 <_printf_i+0x1c8>
 8004060:	8018      	strh	r0, [r3, #0]
 8004062:	2300      	movs	r3, #0
 8004064:	6123      	str	r3, [r4, #16]
 8004066:	4616      	mov	r6, r2
 8004068:	e7ba      	b.n	8003fe0 <_printf_i+0x150>
 800406a:	680b      	ldr	r3, [r1, #0]
 800406c:	1d1a      	adds	r2, r3, #4
 800406e:	600a      	str	r2, [r1, #0]
 8004070:	681e      	ldr	r6, [r3, #0]
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	2100      	movs	r1, #0
 8004076:	4630      	mov	r0, r6
 8004078:	f7fc f8b2 	bl	80001e0 <memchr>
 800407c:	b108      	cbz	r0, 8004082 <_printf_i+0x1f2>
 800407e:	1b80      	subs	r0, r0, r6
 8004080:	6060      	str	r0, [r4, #4]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	2300      	movs	r3, #0
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	e7a8      	b.n	8003fe0 <_printf_i+0x150>
 800408e:	6923      	ldr	r3, [r4, #16]
 8004090:	4632      	mov	r2, r6
 8004092:	4649      	mov	r1, r9
 8004094:	4640      	mov	r0, r8
 8004096:	47d0      	blx	sl
 8004098:	3001      	adds	r0, #1
 800409a:	d0ab      	beq.n	8003ff4 <_printf_i+0x164>
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	079b      	lsls	r3, r3, #30
 80040a0:	d413      	bmi.n	80040ca <_printf_i+0x23a>
 80040a2:	68e0      	ldr	r0, [r4, #12]
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	4298      	cmp	r0, r3
 80040a8:	bfb8      	it	lt
 80040aa:	4618      	movlt	r0, r3
 80040ac:	e7a4      	b.n	8003ff8 <_printf_i+0x168>
 80040ae:	2301      	movs	r3, #1
 80040b0:	4632      	mov	r2, r6
 80040b2:	4649      	mov	r1, r9
 80040b4:	4640      	mov	r0, r8
 80040b6:	47d0      	blx	sl
 80040b8:	3001      	adds	r0, #1
 80040ba:	d09b      	beq.n	8003ff4 <_printf_i+0x164>
 80040bc:	3501      	adds	r5, #1
 80040be:	68e3      	ldr	r3, [r4, #12]
 80040c0:	9903      	ldr	r1, [sp, #12]
 80040c2:	1a5b      	subs	r3, r3, r1
 80040c4:	42ab      	cmp	r3, r5
 80040c6:	dcf2      	bgt.n	80040ae <_printf_i+0x21e>
 80040c8:	e7eb      	b.n	80040a2 <_printf_i+0x212>
 80040ca:	2500      	movs	r5, #0
 80040cc:	f104 0619 	add.w	r6, r4, #25
 80040d0:	e7f5      	b.n	80040be <_printf_i+0x22e>
 80040d2:	bf00      	nop
 80040d4:	080086b6 	.word	0x080086b6
 80040d8:	080086c7 	.word	0x080086c7

080040dc <_scanf_float>:
 80040dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040e0:	b087      	sub	sp, #28
 80040e2:	4617      	mov	r7, r2
 80040e4:	9303      	str	r3, [sp, #12]
 80040e6:	688b      	ldr	r3, [r1, #8]
 80040e8:	1e5a      	subs	r2, r3, #1
 80040ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040ee:	bf83      	ittte	hi
 80040f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80040f4:	195b      	addhi	r3, r3, r5
 80040f6:	9302      	strhi	r3, [sp, #8]
 80040f8:	2300      	movls	r3, #0
 80040fa:	bf86      	itte	hi
 80040fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004100:	608b      	strhi	r3, [r1, #8]
 8004102:	9302      	strls	r3, [sp, #8]
 8004104:	680b      	ldr	r3, [r1, #0]
 8004106:	468b      	mov	fp, r1
 8004108:	2500      	movs	r5, #0
 800410a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800410e:	f84b 3b1c 	str.w	r3, [fp], #28
 8004112:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004116:	4680      	mov	r8, r0
 8004118:	460c      	mov	r4, r1
 800411a:	465e      	mov	r6, fp
 800411c:	46aa      	mov	sl, r5
 800411e:	46a9      	mov	r9, r5
 8004120:	9501      	str	r5, [sp, #4]
 8004122:	68a2      	ldr	r2, [r4, #8]
 8004124:	b152      	cbz	r2, 800413c <_scanf_float+0x60>
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	2b4e      	cmp	r3, #78	; 0x4e
 800412c:	d864      	bhi.n	80041f8 <_scanf_float+0x11c>
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d83c      	bhi.n	80041ac <_scanf_float+0xd0>
 8004132:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8004136:	b2c8      	uxtb	r0, r1
 8004138:	280e      	cmp	r0, #14
 800413a:	d93a      	bls.n	80041b2 <_scanf_float+0xd6>
 800413c:	f1b9 0f00 	cmp.w	r9, #0
 8004140:	d003      	beq.n	800414a <_scanf_float+0x6e>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004148:	6023      	str	r3, [r4, #0]
 800414a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800414e:	f1ba 0f01 	cmp.w	sl, #1
 8004152:	f200 8113 	bhi.w	800437c <_scanf_float+0x2a0>
 8004156:	455e      	cmp	r6, fp
 8004158:	f200 8105 	bhi.w	8004366 <_scanf_float+0x28a>
 800415c:	2501      	movs	r5, #1
 800415e:	4628      	mov	r0, r5
 8004160:	b007      	add	sp, #28
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800416a:	2a0d      	cmp	r2, #13
 800416c:	d8e6      	bhi.n	800413c <_scanf_float+0x60>
 800416e:	a101      	add	r1, pc, #4	; (adr r1, 8004174 <_scanf_float+0x98>)
 8004170:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004174:	080042b3 	.word	0x080042b3
 8004178:	0800413d 	.word	0x0800413d
 800417c:	0800413d 	.word	0x0800413d
 8004180:	0800413d 	.word	0x0800413d
 8004184:	08004313 	.word	0x08004313
 8004188:	080042eb 	.word	0x080042eb
 800418c:	0800413d 	.word	0x0800413d
 8004190:	0800413d 	.word	0x0800413d
 8004194:	080042c1 	.word	0x080042c1
 8004198:	0800413d 	.word	0x0800413d
 800419c:	0800413d 	.word	0x0800413d
 80041a0:	0800413d 	.word	0x0800413d
 80041a4:	0800413d 	.word	0x0800413d
 80041a8:	08004279 	.word	0x08004279
 80041ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80041b0:	e7db      	b.n	800416a <_scanf_float+0x8e>
 80041b2:	290e      	cmp	r1, #14
 80041b4:	d8c2      	bhi.n	800413c <_scanf_float+0x60>
 80041b6:	a001      	add	r0, pc, #4	; (adr r0, 80041bc <_scanf_float+0xe0>)
 80041b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80041bc:	0800426b 	.word	0x0800426b
 80041c0:	0800413d 	.word	0x0800413d
 80041c4:	0800426b 	.word	0x0800426b
 80041c8:	080042ff 	.word	0x080042ff
 80041cc:	0800413d 	.word	0x0800413d
 80041d0:	08004219 	.word	0x08004219
 80041d4:	08004255 	.word	0x08004255
 80041d8:	08004255 	.word	0x08004255
 80041dc:	08004255 	.word	0x08004255
 80041e0:	08004255 	.word	0x08004255
 80041e4:	08004255 	.word	0x08004255
 80041e8:	08004255 	.word	0x08004255
 80041ec:	08004255 	.word	0x08004255
 80041f0:	08004255 	.word	0x08004255
 80041f4:	08004255 	.word	0x08004255
 80041f8:	2b6e      	cmp	r3, #110	; 0x6e
 80041fa:	d809      	bhi.n	8004210 <_scanf_float+0x134>
 80041fc:	2b60      	cmp	r3, #96	; 0x60
 80041fe:	d8b2      	bhi.n	8004166 <_scanf_float+0x8a>
 8004200:	2b54      	cmp	r3, #84	; 0x54
 8004202:	d077      	beq.n	80042f4 <_scanf_float+0x218>
 8004204:	2b59      	cmp	r3, #89	; 0x59
 8004206:	d199      	bne.n	800413c <_scanf_float+0x60>
 8004208:	2d07      	cmp	r5, #7
 800420a:	d197      	bne.n	800413c <_scanf_float+0x60>
 800420c:	2508      	movs	r5, #8
 800420e:	e029      	b.n	8004264 <_scanf_float+0x188>
 8004210:	2b74      	cmp	r3, #116	; 0x74
 8004212:	d06f      	beq.n	80042f4 <_scanf_float+0x218>
 8004214:	2b79      	cmp	r3, #121	; 0x79
 8004216:	e7f6      	b.n	8004206 <_scanf_float+0x12a>
 8004218:	6821      	ldr	r1, [r4, #0]
 800421a:	05c8      	lsls	r0, r1, #23
 800421c:	d51a      	bpl.n	8004254 <_scanf_float+0x178>
 800421e:	9b02      	ldr	r3, [sp, #8]
 8004220:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004224:	6021      	str	r1, [r4, #0]
 8004226:	f109 0901 	add.w	r9, r9, #1
 800422a:	b11b      	cbz	r3, 8004234 <_scanf_float+0x158>
 800422c:	3b01      	subs	r3, #1
 800422e:	3201      	adds	r2, #1
 8004230:	9302      	str	r3, [sp, #8]
 8004232:	60a2      	str	r2, [r4, #8]
 8004234:	68a3      	ldr	r3, [r4, #8]
 8004236:	3b01      	subs	r3, #1
 8004238:	60a3      	str	r3, [r4, #8]
 800423a:	6923      	ldr	r3, [r4, #16]
 800423c:	3301      	adds	r3, #1
 800423e:	6123      	str	r3, [r4, #16]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3b01      	subs	r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	607b      	str	r3, [r7, #4]
 8004248:	f340 8084 	ble.w	8004354 <_scanf_float+0x278>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	3301      	adds	r3, #1
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	e766      	b.n	8004122 <_scanf_float+0x46>
 8004254:	eb1a 0f05 	cmn.w	sl, r5
 8004258:	f47f af70 	bne.w	800413c <_scanf_float+0x60>
 800425c:	6822      	ldr	r2, [r4, #0]
 800425e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8004262:	6022      	str	r2, [r4, #0]
 8004264:	f806 3b01 	strb.w	r3, [r6], #1
 8004268:	e7e4      	b.n	8004234 <_scanf_float+0x158>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	0610      	lsls	r0, r2, #24
 800426e:	f57f af65 	bpl.w	800413c <_scanf_float+0x60>
 8004272:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004276:	e7f4      	b.n	8004262 <_scanf_float+0x186>
 8004278:	f1ba 0f00 	cmp.w	sl, #0
 800427c:	d10e      	bne.n	800429c <_scanf_float+0x1c0>
 800427e:	f1b9 0f00 	cmp.w	r9, #0
 8004282:	d10e      	bne.n	80042a2 <_scanf_float+0x1c6>
 8004284:	6822      	ldr	r2, [r4, #0]
 8004286:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800428a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800428e:	d108      	bne.n	80042a2 <_scanf_float+0x1c6>
 8004290:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004294:	6022      	str	r2, [r4, #0]
 8004296:	f04f 0a01 	mov.w	sl, #1
 800429a:	e7e3      	b.n	8004264 <_scanf_float+0x188>
 800429c:	f1ba 0f02 	cmp.w	sl, #2
 80042a0:	d055      	beq.n	800434e <_scanf_float+0x272>
 80042a2:	2d01      	cmp	r5, #1
 80042a4:	d002      	beq.n	80042ac <_scanf_float+0x1d0>
 80042a6:	2d04      	cmp	r5, #4
 80042a8:	f47f af48 	bne.w	800413c <_scanf_float+0x60>
 80042ac:	3501      	adds	r5, #1
 80042ae:	b2ed      	uxtb	r5, r5
 80042b0:	e7d8      	b.n	8004264 <_scanf_float+0x188>
 80042b2:	f1ba 0f01 	cmp.w	sl, #1
 80042b6:	f47f af41 	bne.w	800413c <_scanf_float+0x60>
 80042ba:	f04f 0a02 	mov.w	sl, #2
 80042be:	e7d1      	b.n	8004264 <_scanf_float+0x188>
 80042c0:	b97d      	cbnz	r5, 80042e2 <_scanf_float+0x206>
 80042c2:	f1b9 0f00 	cmp.w	r9, #0
 80042c6:	f47f af3c 	bne.w	8004142 <_scanf_float+0x66>
 80042ca:	6822      	ldr	r2, [r4, #0]
 80042cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80042d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80042d4:	f47f af39 	bne.w	800414a <_scanf_float+0x6e>
 80042d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80042dc:	6022      	str	r2, [r4, #0]
 80042de:	2501      	movs	r5, #1
 80042e0:	e7c0      	b.n	8004264 <_scanf_float+0x188>
 80042e2:	2d03      	cmp	r5, #3
 80042e4:	d0e2      	beq.n	80042ac <_scanf_float+0x1d0>
 80042e6:	2d05      	cmp	r5, #5
 80042e8:	e7de      	b.n	80042a8 <_scanf_float+0x1cc>
 80042ea:	2d02      	cmp	r5, #2
 80042ec:	f47f af26 	bne.w	800413c <_scanf_float+0x60>
 80042f0:	2503      	movs	r5, #3
 80042f2:	e7b7      	b.n	8004264 <_scanf_float+0x188>
 80042f4:	2d06      	cmp	r5, #6
 80042f6:	f47f af21 	bne.w	800413c <_scanf_float+0x60>
 80042fa:	2507      	movs	r5, #7
 80042fc:	e7b2      	b.n	8004264 <_scanf_float+0x188>
 80042fe:	6822      	ldr	r2, [r4, #0]
 8004300:	0591      	lsls	r1, r2, #22
 8004302:	f57f af1b 	bpl.w	800413c <_scanf_float+0x60>
 8004306:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800430a:	6022      	str	r2, [r4, #0]
 800430c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004310:	e7a8      	b.n	8004264 <_scanf_float+0x188>
 8004312:	6822      	ldr	r2, [r4, #0]
 8004314:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004318:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800431c:	d006      	beq.n	800432c <_scanf_float+0x250>
 800431e:	0550      	lsls	r0, r2, #21
 8004320:	f57f af0c 	bpl.w	800413c <_scanf_float+0x60>
 8004324:	f1b9 0f00 	cmp.w	r9, #0
 8004328:	f43f af0f 	beq.w	800414a <_scanf_float+0x6e>
 800432c:	0591      	lsls	r1, r2, #22
 800432e:	bf58      	it	pl
 8004330:	9901      	ldrpl	r1, [sp, #4]
 8004332:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004336:	bf58      	it	pl
 8004338:	eba9 0101 	subpl.w	r1, r9, r1
 800433c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8004340:	bf58      	it	pl
 8004342:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004346:	6022      	str	r2, [r4, #0]
 8004348:	f04f 0900 	mov.w	r9, #0
 800434c:	e78a      	b.n	8004264 <_scanf_float+0x188>
 800434e:	f04f 0a03 	mov.w	sl, #3
 8004352:	e787      	b.n	8004264 <_scanf_float+0x188>
 8004354:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004358:	4639      	mov	r1, r7
 800435a:	4640      	mov	r0, r8
 800435c:	4798      	blx	r3
 800435e:	2800      	cmp	r0, #0
 8004360:	f43f aedf 	beq.w	8004122 <_scanf_float+0x46>
 8004364:	e6ea      	b.n	800413c <_scanf_float+0x60>
 8004366:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800436a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800436e:	463a      	mov	r2, r7
 8004370:	4640      	mov	r0, r8
 8004372:	4798      	blx	r3
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	3b01      	subs	r3, #1
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	e6ec      	b.n	8004156 <_scanf_float+0x7a>
 800437c:	1e6b      	subs	r3, r5, #1
 800437e:	2b06      	cmp	r3, #6
 8004380:	d825      	bhi.n	80043ce <_scanf_float+0x2f2>
 8004382:	2d02      	cmp	r5, #2
 8004384:	d836      	bhi.n	80043f4 <_scanf_float+0x318>
 8004386:	455e      	cmp	r6, fp
 8004388:	f67f aee8 	bls.w	800415c <_scanf_float+0x80>
 800438c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004390:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004394:	463a      	mov	r2, r7
 8004396:	4640      	mov	r0, r8
 8004398:	4798      	blx	r3
 800439a:	6923      	ldr	r3, [r4, #16]
 800439c:	3b01      	subs	r3, #1
 800439e:	6123      	str	r3, [r4, #16]
 80043a0:	e7f1      	b.n	8004386 <_scanf_float+0x2aa>
 80043a2:	9802      	ldr	r0, [sp, #8]
 80043a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80043ac:	9002      	str	r0, [sp, #8]
 80043ae:	463a      	mov	r2, r7
 80043b0:	4640      	mov	r0, r8
 80043b2:	4798      	blx	r3
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6123      	str	r3, [r4, #16]
 80043ba:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80043be:	fa5f fa8a 	uxtb.w	sl, sl
 80043c2:	f1ba 0f02 	cmp.w	sl, #2
 80043c6:	d1ec      	bne.n	80043a2 <_scanf_float+0x2c6>
 80043c8:	3d03      	subs	r5, #3
 80043ca:	b2ed      	uxtb	r5, r5
 80043cc:	1b76      	subs	r6, r6, r5
 80043ce:	6823      	ldr	r3, [r4, #0]
 80043d0:	05da      	lsls	r2, r3, #23
 80043d2:	d52f      	bpl.n	8004434 <_scanf_float+0x358>
 80043d4:	055b      	lsls	r3, r3, #21
 80043d6:	d510      	bpl.n	80043fa <_scanf_float+0x31e>
 80043d8:	455e      	cmp	r6, fp
 80043da:	f67f aebf 	bls.w	800415c <_scanf_float+0x80>
 80043de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80043e6:	463a      	mov	r2, r7
 80043e8:	4640      	mov	r0, r8
 80043ea:	4798      	blx	r3
 80043ec:	6923      	ldr	r3, [r4, #16]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	6123      	str	r3, [r4, #16]
 80043f2:	e7f1      	b.n	80043d8 <_scanf_float+0x2fc>
 80043f4:	46aa      	mov	sl, r5
 80043f6:	9602      	str	r6, [sp, #8]
 80043f8:	e7df      	b.n	80043ba <_scanf_float+0x2de>
 80043fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80043fe:	6923      	ldr	r3, [r4, #16]
 8004400:	2965      	cmp	r1, #101	; 0x65
 8004402:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004406:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800440a:	6123      	str	r3, [r4, #16]
 800440c:	d00c      	beq.n	8004428 <_scanf_float+0x34c>
 800440e:	2945      	cmp	r1, #69	; 0x45
 8004410:	d00a      	beq.n	8004428 <_scanf_float+0x34c>
 8004412:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004416:	463a      	mov	r2, r7
 8004418:	4640      	mov	r0, r8
 800441a:	4798      	blx	r3
 800441c:	6923      	ldr	r3, [r4, #16]
 800441e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004422:	3b01      	subs	r3, #1
 8004424:	1eb5      	subs	r5, r6, #2
 8004426:	6123      	str	r3, [r4, #16]
 8004428:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800442c:	463a      	mov	r2, r7
 800442e:	4640      	mov	r0, r8
 8004430:	4798      	blx	r3
 8004432:	462e      	mov	r6, r5
 8004434:	6825      	ldr	r5, [r4, #0]
 8004436:	f015 0510 	ands.w	r5, r5, #16
 800443a:	d158      	bne.n	80044ee <_scanf_float+0x412>
 800443c:	7035      	strb	r5, [r6, #0]
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004448:	d11c      	bne.n	8004484 <_scanf_float+0x3a8>
 800444a:	9b01      	ldr	r3, [sp, #4]
 800444c:	454b      	cmp	r3, r9
 800444e:	eba3 0209 	sub.w	r2, r3, r9
 8004452:	d124      	bne.n	800449e <_scanf_float+0x3c2>
 8004454:	2200      	movs	r2, #0
 8004456:	4659      	mov	r1, fp
 8004458:	4640      	mov	r0, r8
 800445a:	f000 fe9b 	bl	8005194 <_strtod_r>
 800445e:	9b03      	ldr	r3, [sp, #12]
 8004460:	6821      	ldr	r1, [r4, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f011 0f02 	tst.w	r1, #2
 8004468:	ec57 6b10 	vmov	r6, r7, d0
 800446c:	f103 0204 	add.w	r2, r3, #4
 8004470:	d020      	beq.n	80044b4 <_scanf_float+0x3d8>
 8004472:	9903      	ldr	r1, [sp, #12]
 8004474:	600a      	str	r2, [r1, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	e9c3 6700 	strd	r6, r7, [r3]
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60e3      	str	r3, [r4, #12]
 8004482:	e66c      	b.n	800415e <_scanf_float+0x82>
 8004484:	9b04      	ldr	r3, [sp, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0e4      	beq.n	8004454 <_scanf_float+0x378>
 800448a:	9905      	ldr	r1, [sp, #20]
 800448c:	230a      	movs	r3, #10
 800448e:	462a      	mov	r2, r5
 8004490:	3101      	adds	r1, #1
 8004492:	4640      	mov	r0, r8
 8004494:	f000 ff08 	bl	80052a8 <_strtol_r>
 8004498:	9b04      	ldr	r3, [sp, #16]
 800449a:	9e05      	ldr	r6, [sp, #20]
 800449c:	1ac2      	subs	r2, r0, r3
 800449e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80044a2:	429e      	cmp	r6, r3
 80044a4:	bf28      	it	cs
 80044a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80044aa:	4912      	ldr	r1, [pc, #72]	; (80044f4 <_scanf_float+0x418>)
 80044ac:	4630      	mov	r0, r6
 80044ae:	f000 f82b 	bl	8004508 <siprintf>
 80044b2:	e7cf      	b.n	8004454 <_scanf_float+0x378>
 80044b4:	f011 0f04 	tst.w	r1, #4
 80044b8:	9903      	ldr	r1, [sp, #12]
 80044ba:	600a      	str	r2, [r1, #0]
 80044bc:	d1db      	bne.n	8004476 <_scanf_float+0x39a>
 80044be:	f8d3 8000 	ldr.w	r8, [r3]
 80044c2:	ee10 2a10 	vmov	r2, s0
 80044c6:	ee10 0a10 	vmov	r0, s0
 80044ca:	463b      	mov	r3, r7
 80044cc:	4639      	mov	r1, r7
 80044ce:	f7fc fb2d 	bl	8000b2c <__aeabi_dcmpun>
 80044d2:	b128      	cbz	r0, 80044e0 <_scanf_float+0x404>
 80044d4:	4808      	ldr	r0, [pc, #32]	; (80044f8 <_scanf_float+0x41c>)
 80044d6:	f000 f811 	bl	80044fc <nanf>
 80044da:	ed88 0a00 	vstr	s0, [r8]
 80044de:	e7cd      	b.n	800447c <_scanf_float+0x3a0>
 80044e0:	4630      	mov	r0, r6
 80044e2:	4639      	mov	r1, r7
 80044e4:	f7fc fb80 	bl	8000be8 <__aeabi_d2f>
 80044e8:	f8c8 0000 	str.w	r0, [r8]
 80044ec:	e7c6      	b.n	800447c <_scanf_float+0x3a0>
 80044ee:	2500      	movs	r5, #0
 80044f0:	e635      	b.n	800415e <_scanf_float+0x82>
 80044f2:	bf00      	nop
 80044f4:	080086d8 	.word	0x080086d8
 80044f8:	08008af0 	.word	0x08008af0

080044fc <nanf>:
 80044fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004504 <nanf+0x8>
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	7fc00000 	.word	0x7fc00000

08004508 <siprintf>:
 8004508:	b40e      	push	{r1, r2, r3}
 800450a:	b500      	push	{lr}
 800450c:	b09c      	sub	sp, #112	; 0x70
 800450e:	ab1d      	add	r3, sp, #116	; 0x74
 8004510:	9002      	str	r0, [sp, #8]
 8004512:	9006      	str	r0, [sp, #24]
 8004514:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004518:	4809      	ldr	r0, [pc, #36]	; (8004540 <siprintf+0x38>)
 800451a:	9107      	str	r1, [sp, #28]
 800451c:	9104      	str	r1, [sp, #16]
 800451e:	4909      	ldr	r1, [pc, #36]	; (8004544 <siprintf+0x3c>)
 8004520:	f853 2b04 	ldr.w	r2, [r3], #4
 8004524:	9105      	str	r1, [sp, #20]
 8004526:	6800      	ldr	r0, [r0, #0]
 8004528:	9301      	str	r3, [sp, #4]
 800452a:	a902      	add	r1, sp, #8
 800452c:	f002 fea4 	bl	8007278 <_svfiprintf_r>
 8004530:	9b02      	ldr	r3, [sp, #8]
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	b01c      	add	sp, #112	; 0x70
 8004538:	f85d eb04 	ldr.w	lr, [sp], #4
 800453c:	b003      	add	sp, #12
 800453e:	4770      	bx	lr
 8004540:	20000018 	.word	0x20000018
 8004544:	ffff0208 	.word	0xffff0208

08004548 <sulp>:
 8004548:	b570      	push	{r4, r5, r6, lr}
 800454a:	4604      	mov	r4, r0
 800454c:	460d      	mov	r5, r1
 800454e:	ec45 4b10 	vmov	d0, r4, r5
 8004552:	4616      	mov	r6, r2
 8004554:	f002 fc2c 	bl	8006db0 <__ulp>
 8004558:	ec51 0b10 	vmov	r0, r1, d0
 800455c:	b17e      	cbz	r6, 800457e <sulp+0x36>
 800455e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004562:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004566:	2b00      	cmp	r3, #0
 8004568:	dd09      	ble.n	800457e <sulp+0x36>
 800456a:	051b      	lsls	r3, r3, #20
 800456c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004570:	2400      	movs	r4, #0
 8004572:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004576:	4622      	mov	r2, r4
 8004578:	462b      	mov	r3, r5
 800457a:	f7fc f83d 	bl	80005f8 <__aeabi_dmul>
 800457e:	bd70      	pop	{r4, r5, r6, pc}

08004580 <_strtod_l>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b0a3      	sub	sp, #140	; 0x8c
 8004586:	461f      	mov	r7, r3
 8004588:	2300      	movs	r3, #0
 800458a:	931e      	str	r3, [sp, #120]	; 0x78
 800458c:	4ba4      	ldr	r3, [pc, #656]	; (8004820 <_strtod_l+0x2a0>)
 800458e:	9219      	str	r2, [sp, #100]	; 0x64
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	9307      	str	r3, [sp, #28]
 8004594:	4604      	mov	r4, r0
 8004596:	4618      	mov	r0, r3
 8004598:	4688      	mov	r8, r1
 800459a:	f7fb fe19 	bl	80001d0 <strlen>
 800459e:	f04f 0a00 	mov.w	sl, #0
 80045a2:	4605      	mov	r5, r0
 80045a4:	f04f 0b00 	mov.w	fp, #0
 80045a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80045ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	2a2b      	cmp	r2, #43	; 0x2b
 80045b2:	d04c      	beq.n	800464e <_strtod_l+0xce>
 80045b4:	d839      	bhi.n	800462a <_strtod_l+0xaa>
 80045b6:	2a0d      	cmp	r2, #13
 80045b8:	d832      	bhi.n	8004620 <_strtod_l+0xa0>
 80045ba:	2a08      	cmp	r2, #8
 80045bc:	d832      	bhi.n	8004624 <_strtod_l+0xa4>
 80045be:	2a00      	cmp	r2, #0
 80045c0:	d03c      	beq.n	800463c <_strtod_l+0xbc>
 80045c2:	2300      	movs	r3, #0
 80045c4:	930e      	str	r3, [sp, #56]	; 0x38
 80045c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80045c8:	7833      	ldrb	r3, [r6, #0]
 80045ca:	2b30      	cmp	r3, #48	; 0x30
 80045cc:	f040 80b4 	bne.w	8004738 <_strtod_l+0x1b8>
 80045d0:	7873      	ldrb	r3, [r6, #1]
 80045d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80045d6:	2b58      	cmp	r3, #88	; 0x58
 80045d8:	d16c      	bne.n	80046b4 <_strtod_l+0x134>
 80045da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	ab1e      	add	r3, sp, #120	; 0x78
 80045e0:	9702      	str	r7, [sp, #8]
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	4a8f      	ldr	r2, [pc, #572]	; (8004824 <_strtod_l+0x2a4>)
 80045e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80045e8:	a91d      	add	r1, sp, #116	; 0x74
 80045ea:	4620      	mov	r0, r4
 80045ec:	f001 fd40 	bl	8006070 <__gethex>
 80045f0:	f010 0707 	ands.w	r7, r0, #7
 80045f4:	4605      	mov	r5, r0
 80045f6:	d005      	beq.n	8004604 <_strtod_l+0x84>
 80045f8:	2f06      	cmp	r7, #6
 80045fa:	d12a      	bne.n	8004652 <_strtod_l+0xd2>
 80045fc:	3601      	adds	r6, #1
 80045fe:	2300      	movs	r3, #0
 8004600:	961d      	str	r6, [sp, #116]	; 0x74
 8004602:	930e      	str	r3, [sp, #56]	; 0x38
 8004604:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8596 	bne.w	8005138 <_strtod_l+0xbb8>
 800460c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800460e:	b1db      	cbz	r3, 8004648 <_strtod_l+0xc8>
 8004610:	4652      	mov	r2, sl
 8004612:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004616:	ec43 2b10 	vmov	d0, r2, r3
 800461a:	b023      	add	sp, #140	; 0x8c
 800461c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004620:	2a20      	cmp	r2, #32
 8004622:	d1ce      	bne.n	80045c2 <_strtod_l+0x42>
 8004624:	3301      	adds	r3, #1
 8004626:	931d      	str	r3, [sp, #116]	; 0x74
 8004628:	e7c0      	b.n	80045ac <_strtod_l+0x2c>
 800462a:	2a2d      	cmp	r2, #45	; 0x2d
 800462c:	d1c9      	bne.n	80045c2 <_strtod_l+0x42>
 800462e:	2201      	movs	r2, #1
 8004630:	920e      	str	r2, [sp, #56]	; 0x38
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	921d      	str	r2, [sp, #116]	; 0x74
 8004636:	785b      	ldrb	r3, [r3, #1]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1c4      	bne.n	80045c6 <_strtod_l+0x46>
 800463c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800463e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 8576 	bne.w	8005134 <_strtod_l+0xbb4>
 8004648:	4652      	mov	r2, sl
 800464a:	465b      	mov	r3, fp
 800464c:	e7e3      	b.n	8004616 <_strtod_l+0x96>
 800464e:	2200      	movs	r2, #0
 8004650:	e7ee      	b.n	8004630 <_strtod_l+0xb0>
 8004652:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004654:	b13a      	cbz	r2, 8004666 <_strtod_l+0xe6>
 8004656:	2135      	movs	r1, #53	; 0x35
 8004658:	a820      	add	r0, sp, #128	; 0x80
 800465a:	f002 fcb4 	bl	8006fc6 <__copybits>
 800465e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004660:	4620      	mov	r0, r4
 8004662:	f002 f879 	bl	8006758 <_Bfree>
 8004666:	3f01      	subs	r7, #1
 8004668:	2f05      	cmp	r7, #5
 800466a:	d807      	bhi.n	800467c <_strtod_l+0xfc>
 800466c:	e8df f007 	tbb	[pc, r7]
 8004670:	1d180b0e 	.word	0x1d180b0e
 8004674:	030e      	.short	0x030e
 8004676:	f04f 0b00 	mov.w	fp, #0
 800467a:	46da      	mov	sl, fp
 800467c:	0728      	lsls	r0, r5, #28
 800467e:	d5c1      	bpl.n	8004604 <_strtod_l+0x84>
 8004680:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004684:	e7be      	b.n	8004604 <_strtod_l+0x84>
 8004686:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800468a:	e7f7      	b.n	800467c <_strtod_l+0xfc>
 800468c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8004690:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004692:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004696:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800469a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800469e:	e7ed      	b.n	800467c <_strtod_l+0xfc>
 80046a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8004828 <_strtod_l+0x2a8>
 80046a4:	f04f 0a00 	mov.w	sl, #0
 80046a8:	e7e8      	b.n	800467c <_strtod_l+0xfc>
 80046aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80046ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80046b2:	e7e3      	b.n	800467c <_strtod_l+0xfc>
 80046b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	921d      	str	r2, [sp, #116]	; 0x74
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b30      	cmp	r3, #48	; 0x30
 80046be:	d0f9      	beq.n	80046b4 <_strtod_l+0x134>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d09f      	beq.n	8004604 <_strtod_l+0x84>
 80046c4:	2301      	movs	r3, #1
 80046c6:	f04f 0900 	mov.w	r9, #0
 80046ca:	9304      	str	r3, [sp, #16]
 80046cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046ce:	930a      	str	r3, [sp, #40]	; 0x28
 80046d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80046d4:	464f      	mov	r7, r9
 80046d6:	220a      	movs	r2, #10
 80046d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80046da:	7806      	ldrb	r6, [r0, #0]
 80046dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80046e0:	b2d9      	uxtb	r1, r3
 80046e2:	2909      	cmp	r1, #9
 80046e4:	d92a      	bls.n	800473c <_strtod_l+0x1bc>
 80046e6:	9907      	ldr	r1, [sp, #28]
 80046e8:	462a      	mov	r2, r5
 80046ea:	f002 fedd 	bl	80074a8 <strncmp>
 80046ee:	b398      	cbz	r0, 8004758 <_strtod_l+0x1d8>
 80046f0:	2000      	movs	r0, #0
 80046f2:	4633      	mov	r3, r6
 80046f4:	463d      	mov	r5, r7
 80046f6:	9007      	str	r0, [sp, #28]
 80046f8:	4602      	mov	r2, r0
 80046fa:	2b65      	cmp	r3, #101	; 0x65
 80046fc:	d001      	beq.n	8004702 <_strtod_l+0x182>
 80046fe:	2b45      	cmp	r3, #69	; 0x45
 8004700:	d118      	bne.n	8004734 <_strtod_l+0x1b4>
 8004702:	b91d      	cbnz	r5, 800470c <_strtod_l+0x18c>
 8004704:	9b04      	ldr	r3, [sp, #16]
 8004706:	4303      	orrs	r3, r0
 8004708:	d098      	beq.n	800463c <_strtod_l+0xbc>
 800470a:	2500      	movs	r5, #0
 800470c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8004710:	f108 0301 	add.w	r3, r8, #1
 8004714:	931d      	str	r3, [sp, #116]	; 0x74
 8004716:	f898 3001 	ldrb.w	r3, [r8, #1]
 800471a:	2b2b      	cmp	r3, #43	; 0x2b
 800471c:	d075      	beq.n	800480a <_strtod_l+0x28a>
 800471e:	2b2d      	cmp	r3, #45	; 0x2d
 8004720:	d07b      	beq.n	800481a <_strtod_l+0x29a>
 8004722:	f04f 0c00 	mov.w	ip, #0
 8004726:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800472a:	2909      	cmp	r1, #9
 800472c:	f240 8082 	bls.w	8004834 <_strtod_l+0x2b4>
 8004730:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8004734:	2600      	movs	r6, #0
 8004736:	e09d      	b.n	8004874 <_strtod_l+0x2f4>
 8004738:	2300      	movs	r3, #0
 800473a:	e7c4      	b.n	80046c6 <_strtod_l+0x146>
 800473c:	2f08      	cmp	r7, #8
 800473e:	bfd8      	it	le
 8004740:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8004742:	f100 0001 	add.w	r0, r0, #1
 8004746:	bfda      	itte	le
 8004748:	fb02 3301 	mlale	r3, r2, r1, r3
 800474c:	9309      	strle	r3, [sp, #36]	; 0x24
 800474e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004752:	3701      	adds	r7, #1
 8004754:	901d      	str	r0, [sp, #116]	; 0x74
 8004756:	e7bf      	b.n	80046d8 <_strtod_l+0x158>
 8004758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800475a:	195a      	adds	r2, r3, r5
 800475c:	921d      	str	r2, [sp, #116]	; 0x74
 800475e:	5d5b      	ldrb	r3, [r3, r5]
 8004760:	2f00      	cmp	r7, #0
 8004762:	d037      	beq.n	80047d4 <_strtod_l+0x254>
 8004764:	9007      	str	r0, [sp, #28]
 8004766:	463d      	mov	r5, r7
 8004768:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800476c:	2a09      	cmp	r2, #9
 800476e:	d912      	bls.n	8004796 <_strtod_l+0x216>
 8004770:	2201      	movs	r2, #1
 8004772:	e7c2      	b.n	80046fa <_strtod_l+0x17a>
 8004774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	921d      	str	r2, [sp, #116]	; 0x74
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	3001      	adds	r0, #1
 800477e:	2b30      	cmp	r3, #48	; 0x30
 8004780:	d0f8      	beq.n	8004774 <_strtod_l+0x1f4>
 8004782:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004786:	2a08      	cmp	r2, #8
 8004788:	f200 84db 	bhi.w	8005142 <_strtod_l+0xbc2>
 800478c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800478e:	9007      	str	r0, [sp, #28]
 8004790:	2000      	movs	r0, #0
 8004792:	920a      	str	r2, [sp, #40]	; 0x28
 8004794:	4605      	mov	r5, r0
 8004796:	3b30      	subs	r3, #48	; 0x30
 8004798:	f100 0201 	add.w	r2, r0, #1
 800479c:	d014      	beq.n	80047c8 <_strtod_l+0x248>
 800479e:	9907      	ldr	r1, [sp, #28]
 80047a0:	4411      	add	r1, r2
 80047a2:	9107      	str	r1, [sp, #28]
 80047a4:	462a      	mov	r2, r5
 80047a6:	eb00 0e05 	add.w	lr, r0, r5
 80047aa:	210a      	movs	r1, #10
 80047ac:	4572      	cmp	r2, lr
 80047ae:	d113      	bne.n	80047d8 <_strtod_l+0x258>
 80047b0:	182a      	adds	r2, r5, r0
 80047b2:	2a08      	cmp	r2, #8
 80047b4:	f105 0501 	add.w	r5, r5, #1
 80047b8:	4405      	add	r5, r0
 80047ba:	dc1c      	bgt.n	80047f6 <_strtod_l+0x276>
 80047bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80047be:	220a      	movs	r2, #10
 80047c0:	fb02 3301 	mla	r3, r2, r1, r3
 80047c4:	9309      	str	r3, [sp, #36]	; 0x24
 80047c6:	2200      	movs	r2, #0
 80047c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047ca:	1c59      	adds	r1, r3, #1
 80047cc:	911d      	str	r1, [sp, #116]	; 0x74
 80047ce:	785b      	ldrb	r3, [r3, #1]
 80047d0:	4610      	mov	r0, r2
 80047d2:	e7c9      	b.n	8004768 <_strtod_l+0x1e8>
 80047d4:	4638      	mov	r0, r7
 80047d6:	e7d2      	b.n	800477e <_strtod_l+0x1fe>
 80047d8:	2a08      	cmp	r2, #8
 80047da:	dc04      	bgt.n	80047e6 <_strtod_l+0x266>
 80047dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80047de:	434e      	muls	r6, r1
 80047e0:	9609      	str	r6, [sp, #36]	; 0x24
 80047e2:	3201      	adds	r2, #1
 80047e4:	e7e2      	b.n	80047ac <_strtod_l+0x22c>
 80047e6:	f102 0c01 	add.w	ip, r2, #1
 80047ea:	f1bc 0f10 	cmp.w	ip, #16
 80047ee:	bfd8      	it	le
 80047f0:	fb01 f909 	mulle.w	r9, r1, r9
 80047f4:	e7f5      	b.n	80047e2 <_strtod_l+0x262>
 80047f6:	2d10      	cmp	r5, #16
 80047f8:	bfdc      	itt	le
 80047fa:	220a      	movle	r2, #10
 80047fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8004800:	e7e1      	b.n	80047c6 <_strtod_l+0x246>
 8004802:	2300      	movs	r3, #0
 8004804:	9307      	str	r3, [sp, #28]
 8004806:	2201      	movs	r2, #1
 8004808:	e77c      	b.n	8004704 <_strtod_l+0x184>
 800480a:	f04f 0c00 	mov.w	ip, #0
 800480e:	f108 0302 	add.w	r3, r8, #2
 8004812:	931d      	str	r3, [sp, #116]	; 0x74
 8004814:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004818:	e785      	b.n	8004726 <_strtod_l+0x1a6>
 800481a:	f04f 0c01 	mov.w	ip, #1
 800481e:	e7f6      	b.n	800480e <_strtod_l+0x28e>
 8004820:	08008930 	.word	0x08008930
 8004824:	080086e0 	.word	0x080086e0
 8004828:	7ff00000 	.word	0x7ff00000
 800482c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800482e:	1c59      	adds	r1, r3, #1
 8004830:	911d      	str	r1, [sp, #116]	; 0x74
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	2b30      	cmp	r3, #48	; 0x30
 8004836:	d0f9      	beq.n	800482c <_strtod_l+0x2ac>
 8004838:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800483c:	2908      	cmp	r1, #8
 800483e:	f63f af79 	bhi.w	8004734 <_strtod_l+0x1b4>
 8004842:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004846:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004848:	9308      	str	r3, [sp, #32]
 800484a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	911d      	str	r1, [sp, #116]	; 0x74
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8004856:	2e09      	cmp	r6, #9
 8004858:	d937      	bls.n	80048ca <_strtod_l+0x34a>
 800485a:	9e08      	ldr	r6, [sp, #32]
 800485c:	1b89      	subs	r1, r1, r6
 800485e:	2908      	cmp	r1, #8
 8004860:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004864:	dc02      	bgt.n	800486c <_strtod_l+0x2ec>
 8004866:	4576      	cmp	r6, lr
 8004868:	bfa8      	it	ge
 800486a:	4676      	movge	r6, lr
 800486c:	f1bc 0f00 	cmp.w	ip, #0
 8004870:	d000      	beq.n	8004874 <_strtod_l+0x2f4>
 8004872:	4276      	negs	r6, r6
 8004874:	2d00      	cmp	r5, #0
 8004876:	d14f      	bne.n	8004918 <_strtod_l+0x398>
 8004878:	9904      	ldr	r1, [sp, #16]
 800487a:	4301      	orrs	r1, r0
 800487c:	f47f aec2 	bne.w	8004604 <_strtod_l+0x84>
 8004880:	2a00      	cmp	r2, #0
 8004882:	f47f aedb 	bne.w	800463c <_strtod_l+0xbc>
 8004886:	2b69      	cmp	r3, #105	; 0x69
 8004888:	d027      	beq.n	80048da <_strtod_l+0x35a>
 800488a:	dc24      	bgt.n	80048d6 <_strtod_l+0x356>
 800488c:	2b49      	cmp	r3, #73	; 0x49
 800488e:	d024      	beq.n	80048da <_strtod_l+0x35a>
 8004890:	2b4e      	cmp	r3, #78	; 0x4e
 8004892:	f47f aed3 	bne.w	800463c <_strtod_l+0xbc>
 8004896:	499e      	ldr	r1, [pc, #632]	; (8004b10 <_strtod_l+0x590>)
 8004898:	a81d      	add	r0, sp, #116	; 0x74
 800489a:	f001 fe41 	bl	8006520 <__match>
 800489e:	2800      	cmp	r0, #0
 80048a0:	f43f aecc 	beq.w	800463c <_strtod_l+0xbc>
 80048a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b28      	cmp	r3, #40	; 0x28
 80048aa:	d12d      	bne.n	8004908 <_strtod_l+0x388>
 80048ac:	4999      	ldr	r1, [pc, #612]	; (8004b14 <_strtod_l+0x594>)
 80048ae:	aa20      	add	r2, sp, #128	; 0x80
 80048b0:	a81d      	add	r0, sp, #116	; 0x74
 80048b2:	f001 fe49 	bl	8006548 <__hexnan>
 80048b6:	2805      	cmp	r0, #5
 80048b8:	d126      	bne.n	8004908 <_strtod_l+0x388>
 80048ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80048c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80048c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80048c8:	e69c      	b.n	8004604 <_strtod_l+0x84>
 80048ca:	210a      	movs	r1, #10
 80048cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80048d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80048d4:	e7b9      	b.n	800484a <_strtod_l+0x2ca>
 80048d6:	2b6e      	cmp	r3, #110	; 0x6e
 80048d8:	e7db      	b.n	8004892 <_strtod_l+0x312>
 80048da:	498f      	ldr	r1, [pc, #572]	; (8004b18 <_strtod_l+0x598>)
 80048dc:	a81d      	add	r0, sp, #116	; 0x74
 80048de:	f001 fe1f 	bl	8006520 <__match>
 80048e2:	2800      	cmp	r0, #0
 80048e4:	f43f aeaa 	beq.w	800463c <_strtod_l+0xbc>
 80048e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048ea:	498c      	ldr	r1, [pc, #560]	; (8004b1c <_strtod_l+0x59c>)
 80048ec:	3b01      	subs	r3, #1
 80048ee:	a81d      	add	r0, sp, #116	; 0x74
 80048f0:	931d      	str	r3, [sp, #116]	; 0x74
 80048f2:	f001 fe15 	bl	8006520 <__match>
 80048f6:	b910      	cbnz	r0, 80048fe <_strtod_l+0x37e>
 80048f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80048fa:	3301      	adds	r3, #1
 80048fc:	931d      	str	r3, [sp, #116]	; 0x74
 80048fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8004b2c <_strtod_l+0x5ac>
 8004902:	f04f 0a00 	mov.w	sl, #0
 8004906:	e67d      	b.n	8004604 <_strtod_l+0x84>
 8004908:	4885      	ldr	r0, [pc, #532]	; (8004b20 <_strtod_l+0x5a0>)
 800490a:	f002 fdb5 	bl	8007478 <nan>
 800490e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004912:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004916:	e675      	b.n	8004604 <_strtod_l+0x84>
 8004918:	9b07      	ldr	r3, [sp, #28]
 800491a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800491c:	1af3      	subs	r3, r6, r3
 800491e:	2f00      	cmp	r7, #0
 8004920:	bf08      	it	eq
 8004922:	462f      	moveq	r7, r5
 8004924:	2d10      	cmp	r5, #16
 8004926:	9308      	str	r3, [sp, #32]
 8004928:	46a8      	mov	r8, r5
 800492a:	bfa8      	it	ge
 800492c:	f04f 0810 	movge.w	r8, #16
 8004930:	f7fb fde8 	bl	8000504 <__aeabi_ui2d>
 8004934:	2d09      	cmp	r5, #9
 8004936:	4682      	mov	sl, r0
 8004938:	468b      	mov	fp, r1
 800493a:	dd13      	ble.n	8004964 <_strtod_l+0x3e4>
 800493c:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <_strtod_l+0x5a4>)
 800493e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004942:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004946:	f7fb fe57 	bl	80005f8 <__aeabi_dmul>
 800494a:	4682      	mov	sl, r0
 800494c:	4648      	mov	r0, r9
 800494e:	468b      	mov	fp, r1
 8004950:	f7fb fdd8 	bl	8000504 <__aeabi_ui2d>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4650      	mov	r0, sl
 800495a:	4659      	mov	r1, fp
 800495c:	f7fb fc96 	bl	800028c <__adddf3>
 8004960:	4682      	mov	sl, r0
 8004962:	468b      	mov	fp, r1
 8004964:	2d0f      	cmp	r5, #15
 8004966:	dc38      	bgt.n	80049da <_strtod_l+0x45a>
 8004968:	9b08      	ldr	r3, [sp, #32]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f43f ae4a 	beq.w	8004604 <_strtod_l+0x84>
 8004970:	dd24      	ble.n	80049bc <_strtod_l+0x43c>
 8004972:	2b16      	cmp	r3, #22
 8004974:	dc0b      	bgt.n	800498e <_strtod_l+0x40e>
 8004976:	4d6b      	ldr	r5, [pc, #428]	; (8004b24 <_strtod_l+0x5a4>)
 8004978:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800497c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004980:	4652      	mov	r2, sl
 8004982:	465b      	mov	r3, fp
 8004984:	f7fb fe38 	bl	80005f8 <__aeabi_dmul>
 8004988:	4682      	mov	sl, r0
 800498a:	468b      	mov	fp, r1
 800498c:	e63a      	b.n	8004604 <_strtod_l+0x84>
 800498e:	9a08      	ldr	r2, [sp, #32]
 8004990:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8004994:	4293      	cmp	r3, r2
 8004996:	db20      	blt.n	80049da <_strtod_l+0x45a>
 8004998:	4c62      	ldr	r4, [pc, #392]	; (8004b24 <_strtod_l+0x5a4>)
 800499a:	f1c5 050f 	rsb	r5, r5, #15
 800499e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80049a2:	4652      	mov	r2, sl
 80049a4:	465b      	mov	r3, fp
 80049a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049aa:	f7fb fe25 	bl	80005f8 <__aeabi_dmul>
 80049ae:	9b08      	ldr	r3, [sp, #32]
 80049b0:	1b5d      	subs	r5, r3, r5
 80049b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80049b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80049ba:	e7e3      	b.n	8004984 <_strtod_l+0x404>
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	3316      	adds	r3, #22
 80049c0:	db0b      	blt.n	80049da <_strtod_l+0x45a>
 80049c2:	9b07      	ldr	r3, [sp, #28]
 80049c4:	4a57      	ldr	r2, [pc, #348]	; (8004b24 <_strtod_l+0x5a4>)
 80049c6:	1b9e      	subs	r6, r3, r6
 80049c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80049cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80049d0:	4650      	mov	r0, sl
 80049d2:	4659      	mov	r1, fp
 80049d4:	f7fb ff3a 	bl	800084c <__aeabi_ddiv>
 80049d8:	e7d6      	b.n	8004988 <_strtod_l+0x408>
 80049da:	9b08      	ldr	r3, [sp, #32]
 80049dc:	eba5 0808 	sub.w	r8, r5, r8
 80049e0:	4498      	add	r8, r3
 80049e2:	f1b8 0f00 	cmp.w	r8, #0
 80049e6:	dd71      	ble.n	8004acc <_strtod_l+0x54c>
 80049e8:	f018 030f 	ands.w	r3, r8, #15
 80049ec:	d00a      	beq.n	8004a04 <_strtod_l+0x484>
 80049ee:	494d      	ldr	r1, [pc, #308]	; (8004b24 <_strtod_l+0x5a4>)
 80049f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049f4:	4652      	mov	r2, sl
 80049f6:	465b      	mov	r3, fp
 80049f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fc:	f7fb fdfc 	bl	80005f8 <__aeabi_dmul>
 8004a00:	4682      	mov	sl, r0
 8004a02:	468b      	mov	fp, r1
 8004a04:	f038 080f 	bics.w	r8, r8, #15
 8004a08:	d04d      	beq.n	8004aa6 <_strtod_l+0x526>
 8004a0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004a0e:	dd22      	ble.n	8004a56 <_strtod_l+0x4d6>
 8004a10:	2500      	movs	r5, #0
 8004a12:	462e      	mov	r6, r5
 8004a14:	9509      	str	r5, [sp, #36]	; 0x24
 8004a16:	9507      	str	r5, [sp, #28]
 8004a18:	2322      	movs	r3, #34	; 0x22
 8004a1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8004b2c <_strtod_l+0x5ac>
 8004a1e:	6023      	str	r3, [r4, #0]
 8004a20:	f04f 0a00 	mov.w	sl, #0
 8004a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f43f adec 	beq.w	8004604 <_strtod_l+0x84>
 8004a2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004a2e:	4620      	mov	r0, r4
 8004a30:	f001 fe92 	bl	8006758 <_Bfree>
 8004a34:	9907      	ldr	r1, [sp, #28]
 8004a36:	4620      	mov	r0, r4
 8004a38:	f001 fe8e 	bl	8006758 <_Bfree>
 8004a3c:	4631      	mov	r1, r6
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f001 fe8a 	bl	8006758 <_Bfree>
 8004a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004a46:	4620      	mov	r0, r4
 8004a48:	f001 fe86 	bl	8006758 <_Bfree>
 8004a4c:	4629      	mov	r1, r5
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f001 fe82 	bl	8006758 <_Bfree>
 8004a54:	e5d6      	b.n	8004604 <_strtod_l+0x84>
 8004a56:	2300      	movs	r3, #0
 8004a58:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	4659      	mov	r1, fp
 8004a60:	4699      	mov	r9, r3
 8004a62:	f1b8 0f01 	cmp.w	r8, #1
 8004a66:	dc21      	bgt.n	8004aac <_strtod_l+0x52c>
 8004a68:	b10b      	cbz	r3, 8004a6e <_strtod_l+0x4ee>
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	468b      	mov	fp, r1
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <_strtod_l+0x5a8>)
 8004a70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004a74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8004a78:	4652      	mov	r2, sl
 8004a7a:	465b      	mov	r3, fp
 8004a7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8004a80:	f7fb fdba 	bl	80005f8 <__aeabi_dmul>
 8004a84:	4b29      	ldr	r3, [pc, #164]	; (8004b2c <_strtod_l+0x5ac>)
 8004a86:	460a      	mov	r2, r1
 8004a88:	400b      	ands	r3, r1
 8004a8a:	4929      	ldr	r1, [pc, #164]	; (8004b30 <_strtod_l+0x5b0>)
 8004a8c:	428b      	cmp	r3, r1
 8004a8e:	4682      	mov	sl, r0
 8004a90:	d8be      	bhi.n	8004a10 <_strtod_l+0x490>
 8004a92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004a96:	428b      	cmp	r3, r1
 8004a98:	bf86      	itte	hi
 8004a9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004b34 <_strtod_l+0x5b4>
 8004a9e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8004aa2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	9304      	str	r3, [sp, #16]
 8004aaa:	e081      	b.n	8004bb0 <_strtod_l+0x630>
 8004aac:	f018 0f01 	tst.w	r8, #1
 8004ab0:	d007      	beq.n	8004ac2 <_strtod_l+0x542>
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <_strtod_l+0x5a8>)
 8004ab4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	f7fb fd9c 	bl	80005f8 <__aeabi_dmul>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	f109 0901 	add.w	r9, r9, #1
 8004ac6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004aca:	e7ca      	b.n	8004a62 <_strtod_l+0x4e2>
 8004acc:	d0eb      	beq.n	8004aa6 <_strtod_l+0x526>
 8004ace:	f1c8 0800 	rsb	r8, r8, #0
 8004ad2:	f018 020f 	ands.w	r2, r8, #15
 8004ad6:	d00a      	beq.n	8004aee <_strtod_l+0x56e>
 8004ad8:	4b12      	ldr	r3, [pc, #72]	; (8004b24 <_strtod_l+0x5a4>)
 8004ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ade:	4650      	mov	r0, sl
 8004ae0:	4659      	mov	r1, fp
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	f7fb feb1 	bl	800084c <__aeabi_ddiv>
 8004aea:	4682      	mov	sl, r0
 8004aec:	468b      	mov	fp, r1
 8004aee:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004af2:	d0d8      	beq.n	8004aa6 <_strtod_l+0x526>
 8004af4:	f1b8 0f1f 	cmp.w	r8, #31
 8004af8:	dd1e      	ble.n	8004b38 <_strtod_l+0x5b8>
 8004afa:	2500      	movs	r5, #0
 8004afc:	462e      	mov	r6, r5
 8004afe:	9509      	str	r5, [sp, #36]	; 0x24
 8004b00:	9507      	str	r5, [sp, #28]
 8004b02:	2322      	movs	r3, #34	; 0x22
 8004b04:	f04f 0a00 	mov.w	sl, #0
 8004b08:	f04f 0b00 	mov.w	fp, #0
 8004b0c:	6023      	str	r3, [r4, #0]
 8004b0e:	e789      	b.n	8004a24 <_strtod_l+0x4a4>
 8004b10:	080086b1 	.word	0x080086b1
 8004b14:	080086f4 	.word	0x080086f4
 8004b18:	080086a9 	.word	0x080086a9
 8004b1c:	08008834 	.word	0x08008834
 8004b20:	08008af0 	.word	0x08008af0
 8004b24:	080089d0 	.word	0x080089d0
 8004b28:	080089a8 	.word	0x080089a8
 8004b2c:	7ff00000 	.word	0x7ff00000
 8004b30:	7ca00000 	.word	0x7ca00000
 8004b34:	7fefffff 	.word	0x7fefffff
 8004b38:	f018 0310 	ands.w	r3, r8, #16
 8004b3c:	bf18      	it	ne
 8004b3e:	236a      	movne	r3, #106	; 0x6a
 8004b40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8004ef8 <_strtod_l+0x978>
 8004b44:	9304      	str	r3, [sp, #16]
 8004b46:	4650      	mov	r0, sl
 8004b48:	4659      	mov	r1, fp
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f018 0f01 	tst.w	r8, #1
 8004b50:	d004      	beq.n	8004b5c <_strtod_l+0x5dc>
 8004b52:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b56:	f7fb fd4f 	bl	80005f8 <__aeabi_dmul>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8004b60:	f109 0908 	add.w	r9, r9, #8
 8004b64:	d1f2      	bne.n	8004b4c <_strtod_l+0x5cc>
 8004b66:	b10b      	cbz	r3, 8004b6c <_strtod_l+0x5ec>
 8004b68:	4682      	mov	sl, r0
 8004b6a:	468b      	mov	fp, r1
 8004b6c:	9b04      	ldr	r3, [sp, #16]
 8004b6e:	b1bb      	cbz	r3, 8004ba0 <_strtod_l+0x620>
 8004b70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004b74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	dd10      	ble.n	8004ba0 <_strtod_l+0x620>
 8004b7e:	2b1f      	cmp	r3, #31
 8004b80:	f340 8128 	ble.w	8004dd4 <_strtod_l+0x854>
 8004b84:	2b34      	cmp	r3, #52	; 0x34
 8004b86:	bfde      	ittt	le
 8004b88:	3b20      	suble	r3, #32
 8004b8a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8004b8e:	fa02 f303 	lslle.w	r3, r2, r3
 8004b92:	f04f 0a00 	mov.w	sl, #0
 8004b96:	bfcc      	ite	gt
 8004b98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004b9c:	ea03 0b01 	andle.w	fp, r3, r1
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4650      	mov	r0, sl
 8004ba6:	4659      	mov	r1, fp
 8004ba8:	f7fb ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bac:	2800      	cmp	r0, #0
 8004bae:	d1a4      	bne.n	8004afa <_strtod_l+0x57a>
 8004bb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004bb6:	462b      	mov	r3, r5
 8004bb8:	463a      	mov	r2, r7
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f001 fe38 	bl	8006830 <__s2b>
 8004bc0:	9009      	str	r0, [sp, #36]	; 0x24
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	f43f af24 	beq.w	8004a10 <_strtod_l+0x490>
 8004bc8:	9b07      	ldr	r3, [sp, #28]
 8004bca:	1b9e      	subs	r6, r3, r6
 8004bcc:	9b08      	ldr	r3, [sp, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	bfb4      	ite	lt
 8004bd2:	4633      	movlt	r3, r6
 8004bd4:	2300      	movge	r3, #0
 8004bd6:	9310      	str	r3, [sp, #64]	; 0x40
 8004bd8:	9b08      	ldr	r3, [sp, #32]
 8004bda:	2500      	movs	r5, #0
 8004bdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004be0:	9318      	str	r3, [sp, #96]	; 0x60
 8004be2:	462e      	mov	r6, r5
 8004be4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004be6:	4620      	mov	r0, r4
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	f001 fd75 	bl	80066d8 <_Balloc>
 8004bee:	9007      	str	r0, [sp, #28]
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	f43f af11 	beq.w	8004a18 <_strtod_l+0x498>
 8004bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	3202      	adds	r2, #2
 8004bfc:	f103 010c 	add.w	r1, r3, #12
 8004c00:	0092      	lsls	r2, r2, #2
 8004c02:	300c      	adds	r0, #12
 8004c04:	f001 fd5a 	bl	80066bc <memcpy>
 8004c08:	ec4b ab10 	vmov	d0, sl, fp
 8004c0c:	aa20      	add	r2, sp, #128	; 0x80
 8004c0e:	a91f      	add	r1, sp, #124	; 0x7c
 8004c10:	4620      	mov	r0, r4
 8004c12:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004c16:	f002 f947 	bl	8006ea8 <__d2b>
 8004c1a:	901e      	str	r0, [sp, #120]	; 0x78
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f43f aefb 	beq.w	8004a18 <_strtod_l+0x498>
 8004c22:	2101      	movs	r1, #1
 8004c24:	4620      	mov	r0, r4
 8004c26:	f001 fe9d 	bl	8006964 <__i2b>
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	f43f aef3 	beq.w	8004a18 <_strtod_l+0x498>
 8004c32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004c34:	9904      	ldr	r1, [sp, #16]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	bfab      	itete	ge
 8004c3a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8004c3c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8004c3e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8004c40:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8004c44:	bfac      	ite	ge
 8004c46:	eb03 0902 	addge.w	r9, r3, r2
 8004c4a:	1ad7      	sublt	r7, r2, r3
 8004c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004c4e:	eba3 0801 	sub.w	r8, r3, r1
 8004c52:	4490      	add	r8, r2
 8004c54:	4ba3      	ldr	r3, [pc, #652]	; (8004ee4 <_strtod_l+0x964>)
 8004c56:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004c5a:	4598      	cmp	r8, r3
 8004c5c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c60:	f280 80cc 	bge.w	8004dfc <_strtod_l+0x87c>
 8004c64:	eba3 0308 	sub.w	r3, r3, r8
 8004c68:	2b1f      	cmp	r3, #31
 8004c6a:	eba2 0203 	sub.w	r2, r2, r3
 8004c6e:	f04f 0101 	mov.w	r1, #1
 8004c72:	f300 80b6 	bgt.w	8004de2 <_strtod_l+0x862>
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	9311      	str	r3, [sp, #68]	; 0x44
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8004c80:	eb09 0802 	add.w	r8, r9, r2
 8004c84:	9b04      	ldr	r3, [sp, #16]
 8004c86:	45c1      	cmp	r9, r8
 8004c88:	4417      	add	r7, r2
 8004c8a:	441f      	add	r7, r3
 8004c8c:	464b      	mov	r3, r9
 8004c8e:	bfa8      	it	ge
 8004c90:	4643      	movge	r3, r8
 8004c92:	42bb      	cmp	r3, r7
 8004c94:	bfa8      	it	ge
 8004c96:	463b      	movge	r3, r7
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	bfc2      	ittt	gt
 8004c9c:	eba8 0803 	subgt.w	r8, r8, r3
 8004ca0:	1aff      	subgt	r7, r7, r3
 8004ca2:	eba9 0903 	subgt.w	r9, r9, r3
 8004ca6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	dd17      	ble.n	8004cdc <_strtod_l+0x75c>
 8004cac:	4631      	mov	r1, r6
 8004cae:	461a      	mov	r2, r3
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	f001 ff13 	bl	8006adc <__pow5mult>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f43f aead 	beq.w	8004a18 <_strtod_l+0x498>
 8004cbe:	4601      	mov	r1, r0
 8004cc0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f001 fe64 	bl	8006990 <__multiply>
 8004cc8:	900f      	str	r0, [sp, #60]	; 0x3c
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	f43f aea4 	beq.w	8004a18 <_strtod_l+0x498>
 8004cd0:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f001 fd40 	bl	8006758 <_Bfree>
 8004cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cda:	931e      	str	r3, [sp, #120]	; 0x78
 8004cdc:	f1b8 0f00 	cmp.w	r8, #0
 8004ce0:	f300 8091 	bgt.w	8004e06 <_strtod_l+0x886>
 8004ce4:	9b08      	ldr	r3, [sp, #32]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd08      	ble.n	8004cfc <_strtod_l+0x77c>
 8004cea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004cec:	9907      	ldr	r1, [sp, #28]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f001 fef4 	bl	8006adc <__pow5mult>
 8004cf4:	9007      	str	r0, [sp, #28]
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f43f ae8e 	beq.w	8004a18 <_strtod_l+0x498>
 8004cfc:	2f00      	cmp	r7, #0
 8004cfe:	dd08      	ble.n	8004d12 <_strtod_l+0x792>
 8004d00:	9907      	ldr	r1, [sp, #28]
 8004d02:	463a      	mov	r2, r7
 8004d04:	4620      	mov	r0, r4
 8004d06:	f001 ff43 	bl	8006b90 <__lshift>
 8004d0a:	9007      	str	r0, [sp, #28]
 8004d0c:	2800      	cmp	r0, #0
 8004d0e:	f43f ae83 	beq.w	8004a18 <_strtod_l+0x498>
 8004d12:	f1b9 0f00 	cmp.w	r9, #0
 8004d16:	dd08      	ble.n	8004d2a <_strtod_l+0x7aa>
 8004d18:	4631      	mov	r1, r6
 8004d1a:	464a      	mov	r2, r9
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f001 ff37 	bl	8006b90 <__lshift>
 8004d22:	4606      	mov	r6, r0
 8004d24:	2800      	cmp	r0, #0
 8004d26:	f43f ae77 	beq.w	8004a18 <_strtod_l+0x498>
 8004d2a:	9a07      	ldr	r2, [sp, #28]
 8004d2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004d2e:	4620      	mov	r0, r4
 8004d30:	f001 ffb6 	bl	8006ca0 <__mdiff>
 8004d34:	4605      	mov	r5, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	f43f ae6e 	beq.w	8004a18 <_strtod_l+0x498>
 8004d3c:	68c3      	ldr	r3, [r0, #12]
 8004d3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d40:	2300      	movs	r3, #0
 8004d42:	60c3      	str	r3, [r0, #12]
 8004d44:	4631      	mov	r1, r6
 8004d46:	f001 ff8f 	bl	8006c68 <__mcmp>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	da65      	bge.n	8004e1a <_strtod_l+0x89a>
 8004d4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d50:	ea53 030a 	orrs.w	r3, r3, sl
 8004d54:	f040 8087 	bne.w	8004e66 <_strtod_l+0x8e6>
 8004d58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f040 8082 	bne.w	8004e66 <_strtod_l+0x8e6>
 8004d62:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d66:	0d1b      	lsrs	r3, r3, #20
 8004d68:	051b      	lsls	r3, r3, #20
 8004d6a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d6e:	d97a      	bls.n	8004e66 <_strtod_l+0x8e6>
 8004d70:	696b      	ldr	r3, [r5, #20]
 8004d72:	b913      	cbnz	r3, 8004d7a <_strtod_l+0x7fa>
 8004d74:	692b      	ldr	r3, [r5, #16]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	dd75      	ble.n	8004e66 <_strtod_l+0x8e6>
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f001 ff06 	bl	8006b90 <__lshift>
 8004d84:	4631      	mov	r1, r6
 8004d86:	4605      	mov	r5, r0
 8004d88:	f001 ff6e 	bl	8006c68 <__mcmp>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	dd6a      	ble.n	8004e66 <_strtod_l+0x8e6>
 8004d90:	9904      	ldr	r1, [sp, #16]
 8004d92:	4a55      	ldr	r2, [pc, #340]	; (8004ee8 <_strtod_l+0x968>)
 8004d94:	465b      	mov	r3, fp
 8004d96:	2900      	cmp	r1, #0
 8004d98:	f000 8085 	beq.w	8004ea6 <_strtod_l+0x926>
 8004d9c:	ea02 010b 	and.w	r1, r2, fp
 8004da0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004da4:	dc7f      	bgt.n	8004ea6 <_strtod_l+0x926>
 8004da6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004daa:	f77f aeaa 	ble.w	8004b02 <_strtod_l+0x582>
 8004dae:	4a4f      	ldr	r2, [pc, #316]	; (8004eec <_strtod_l+0x96c>)
 8004db0:	2300      	movs	r3, #0
 8004db2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8004db6:	4650      	mov	r0, sl
 8004db8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004dbc:	4659      	mov	r1, fp
 8004dbe:	f7fb fc1b 	bl	80005f8 <__aeabi_dmul>
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4303      	orrs	r3, r0
 8004dc6:	bf08      	it	eq
 8004dc8:	2322      	moveq	r3, #34	; 0x22
 8004dca:	4682      	mov	sl, r0
 8004dcc:	468b      	mov	fp, r1
 8004dce:	bf08      	it	eq
 8004dd0:	6023      	streq	r3, [r4, #0]
 8004dd2:	e62b      	b.n	8004a2c <_strtod_l+0x4ac>
 8004dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	ea03 0a0a 	and.w	sl, r3, sl
 8004de0:	e6de      	b.n	8004ba0 <_strtod_l+0x620>
 8004de2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8004de6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8004dea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8004dee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8004df2:	fa01 f308 	lsl.w	r3, r1, r8
 8004df6:	930c      	str	r3, [sp, #48]	; 0x30
 8004df8:	9111      	str	r1, [sp, #68]	; 0x44
 8004dfa:	e741      	b.n	8004c80 <_strtod_l+0x700>
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8004e00:	2301      	movs	r3, #1
 8004e02:	9311      	str	r3, [sp, #68]	; 0x44
 8004e04:	e73c      	b.n	8004c80 <_strtod_l+0x700>
 8004e06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004e08:	4642      	mov	r2, r8
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f001 fec0 	bl	8006b90 <__lshift>
 8004e10:	901e      	str	r0, [sp, #120]	; 0x78
 8004e12:	2800      	cmp	r0, #0
 8004e14:	f47f af66 	bne.w	8004ce4 <_strtod_l+0x764>
 8004e18:	e5fe      	b.n	8004a18 <_strtod_l+0x498>
 8004e1a:	465f      	mov	r7, fp
 8004e1c:	d16e      	bne.n	8004efc <_strtod_l+0x97c>
 8004e1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004e20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e24:	b342      	cbz	r2, 8004e78 <_strtod_l+0x8f8>
 8004e26:	4a32      	ldr	r2, [pc, #200]	; (8004ef0 <_strtod_l+0x970>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d128      	bne.n	8004e7e <_strtod_l+0x8fe>
 8004e2c:	9b04      	ldr	r3, [sp, #16]
 8004e2e:	4650      	mov	r0, sl
 8004e30:	b1eb      	cbz	r3, 8004e6e <_strtod_l+0x8ee>
 8004e32:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <_strtod_l+0x968>)
 8004e34:	403a      	ands	r2, r7
 8004e36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004e3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e3e:	d819      	bhi.n	8004e74 <_strtod_l+0x8f4>
 8004e40:	0d12      	lsrs	r2, r2, #20
 8004e42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	4298      	cmp	r0, r3
 8004e4c:	d117      	bne.n	8004e7e <_strtod_l+0x8fe>
 8004e4e:	4b29      	ldr	r3, [pc, #164]	; (8004ef4 <_strtod_l+0x974>)
 8004e50:	429f      	cmp	r7, r3
 8004e52:	d102      	bne.n	8004e5a <_strtod_l+0x8da>
 8004e54:	3001      	adds	r0, #1
 8004e56:	f43f addf 	beq.w	8004a18 <_strtod_l+0x498>
 8004e5a:	4b23      	ldr	r3, [pc, #140]	; (8004ee8 <_strtod_l+0x968>)
 8004e5c:	403b      	ands	r3, r7
 8004e5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004e62:	f04f 0a00 	mov.w	sl, #0
 8004e66:	9b04      	ldr	r3, [sp, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1a0      	bne.n	8004dae <_strtod_l+0x82e>
 8004e6c:	e5de      	b.n	8004a2c <_strtod_l+0x4ac>
 8004e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e72:	e7ea      	b.n	8004e4a <_strtod_l+0x8ca>
 8004e74:	460b      	mov	r3, r1
 8004e76:	e7e8      	b.n	8004e4a <_strtod_l+0x8ca>
 8004e78:	ea53 030a 	orrs.w	r3, r3, sl
 8004e7c:	d088      	beq.n	8004d90 <_strtod_l+0x810>
 8004e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e80:	b1db      	cbz	r3, 8004eba <_strtod_l+0x93a>
 8004e82:	423b      	tst	r3, r7
 8004e84:	d0ef      	beq.n	8004e66 <_strtod_l+0x8e6>
 8004e86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e88:	9a04      	ldr	r2, [sp, #16]
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	b1c3      	cbz	r3, 8004ec2 <_strtod_l+0x942>
 8004e90:	f7ff fb5a 	bl	8004548 <sulp>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e9c:	f7fb f9f6 	bl	800028c <__adddf3>
 8004ea0:	4682      	mov	sl, r0
 8004ea2:	468b      	mov	fp, r1
 8004ea4:	e7df      	b.n	8004e66 <_strtod_l+0x8e6>
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004eac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004eb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004eb4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004eb8:	e7d5      	b.n	8004e66 <_strtod_l+0x8e6>
 8004eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ebc:	ea13 0f0a 	tst.w	r3, sl
 8004ec0:	e7e0      	b.n	8004e84 <_strtod_l+0x904>
 8004ec2:	f7ff fb41 	bl	8004548 <sulp>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ece:	f7fb f9db 	bl	8000288 <__aeabi_dsub>
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	4682      	mov	sl, r0
 8004ed8:	468b      	mov	fp, r1
 8004eda:	f7fb fdf5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0c1      	beq.n	8004e66 <_strtod_l+0x8e6>
 8004ee2:	e60e      	b.n	8004b02 <_strtod_l+0x582>
 8004ee4:	fffffc02 	.word	0xfffffc02
 8004ee8:	7ff00000 	.word	0x7ff00000
 8004eec:	39500000 	.word	0x39500000
 8004ef0:	000fffff 	.word	0x000fffff
 8004ef4:	7fefffff 	.word	0x7fefffff
 8004ef8:	08008708 	.word	0x08008708
 8004efc:	4631      	mov	r1, r6
 8004efe:	4628      	mov	r0, r5
 8004f00:	f002 f82e 	bl	8006f60 <__ratio>
 8004f04:	ec59 8b10 	vmov	r8, r9, d0
 8004f08:	ee10 0a10 	vmov	r0, s0
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb fdec 	bl	8000af0 <__aeabi_dcmple>
 8004f18:	2800      	cmp	r0, #0
 8004f1a:	d07c      	beq.n	8005016 <_strtod_l+0xa96>
 8004f1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04c      	beq.n	8004fbc <_strtod_l+0xa3c>
 8004f22:	4b95      	ldr	r3, [pc, #596]	; (8005178 <_strtod_l+0xbf8>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004f2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005178 <_strtod_l+0xbf8>
 8004f2e:	f04f 0800 	mov.w	r8, #0
 8004f32:	4b92      	ldr	r3, [pc, #584]	; (800517c <_strtod_l+0xbfc>)
 8004f34:	403b      	ands	r3, r7
 8004f36:	9311      	str	r3, [sp, #68]	; 0x44
 8004f38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f3a:	4b91      	ldr	r3, [pc, #580]	; (8005180 <_strtod_l+0xc00>)
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	f040 80b2 	bne.w	80050a6 <_strtod_l+0xb26>
 8004f42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8004f4e:	ec4b ab10 	vmov	d0, sl, fp
 8004f52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8004f56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004f5a:	f001 ff29 	bl	8006db0 <__ulp>
 8004f5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f62:	ec53 2b10 	vmov	r2, r3, d0
 8004f66:	f7fb fb47 	bl	80005f8 <__aeabi_dmul>
 8004f6a:	4652      	mov	r2, sl
 8004f6c:	465b      	mov	r3, fp
 8004f6e:	f7fb f98d 	bl	800028c <__adddf3>
 8004f72:	460b      	mov	r3, r1
 8004f74:	4981      	ldr	r1, [pc, #516]	; (800517c <_strtod_l+0xbfc>)
 8004f76:	4a83      	ldr	r2, [pc, #524]	; (8005184 <_strtod_l+0xc04>)
 8004f78:	4019      	ands	r1, r3
 8004f7a:	4291      	cmp	r1, r2
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	d95e      	bls.n	800503e <_strtod_l+0xabe>
 8004f80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d103      	bne.n	8004f92 <_strtod_l+0xa12>
 8004f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	f43f ad43 	beq.w	8004a18 <_strtod_l+0x498>
 8004f92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8005190 <_strtod_l+0xc10>
 8004f96:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8004f9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f001 fbdb 	bl	8006758 <_Bfree>
 8004fa2:	9907      	ldr	r1, [sp, #28]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f001 fbd7 	bl	8006758 <_Bfree>
 8004faa:	4631      	mov	r1, r6
 8004fac:	4620      	mov	r0, r4
 8004fae:	f001 fbd3 	bl	8006758 <_Bfree>
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f001 fbcf 	bl	8006758 <_Bfree>
 8004fba:	e613      	b.n	8004be4 <_strtod_l+0x664>
 8004fbc:	f1ba 0f00 	cmp.w	sl, #0
 8004fc0:	d11b      	bne.n	8004ffa <_strtod_l+0xa7a>
 8004fc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fc6:	b9f3      	cbnz	r3, 8005006 <_strtod_l+0xa86>
 8004fc8:	4b6b      	ldr	r3, [pc, #428]	; (8005178 <_strtod_l+0xbf8>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb fd84 	bl	8000adc <__aeabi_dcmplt>
 8004fd4:	b9d0      	cbnz	r0, 800500c <_strtod_l+0xa8c>
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	4b6b      	ldr	r3, [pc, #428]	; (8005188 <_strtod_l+0xc08>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f7fb fb0b 	bl	80005f8 <__aeabi_dmul>
 8004fe2:	4680      	mov	r8, r0
 8004fe4:	4689      	mov	r9, r1
 8004fe6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004fea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8004fee:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ff0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8004ff4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004ff8:	e79b      	b.n	8004f32 <_strtod_l+0x9b2>
 8004ffa:	f1ba 0f01 	cmp.w	sl, #1
 8004ffe:	d102      	bne.n	8005006 <_strtod_l+0xa86>
 8005000:	2f00      	cmp	r7, #0
 8005002:	f43f ad7e 	beq.w	8004b02 <_strtod_l+0x582>
 8005006:	4b61      	ldr	r3, [pc, #388]	; (800518c <_strtod_l+0xc0c>)
 8005008:	2200      	movs	r2, #0
 800500a:	e78c      	b.n	8004f26 <_strtod_l+0x9a6>
 800500c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005188 <_strtod_l+0xc08>
 8005010:	f04f 0800 	mov.w	r8, #0
 8005014:	e7e7      	b.n	8004fe6 <_strtod_l+0xa66>
 8005016:	4b5c      	ldr	r3, [pc, #368]	; (8005188 <_strtod_l+0xc08>)
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	2200      	movs	r2, #0
 800501e:	f7fb faeb 	bl	80005f8 <__aeabi_dmul>
 8005022:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	b933      	cbnz	r3, 8005038 <_strtod_l+0xab8>
 800502a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800502e:	9012      	str	r0, [sp, #72]	; 0x48
 8005030:	9313      	str	r3, [sp, #76]	; 0x4c
 8005032:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8005036:	e7dd      	b.n	8004ff4 <_strtod_l+0xa74>
 8005038:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800503c:	e7f9      	b.n	8005032 <_strtod_l+0xab2>
 800503e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8005042:	9b04      	ldr	r3, [sp, #16]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1a8      	bne.n	8004f9a <_strtod_l+0xa1a>
 8005048:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800504c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800504e:	0d1b      	lsrs	r3, r3, #20
 8005050:	051b      	lsls	r3, r3, #20
 8005052:	429a      	cmp	r2, r3
 8005054:	d1a1      	bne.n	8004f9a <_strtod_l+0xa1a>
 8005056:	4640      	mov	r0, r8
 8005058:	4649      	mov	r1, r9
 800505a:	f7fb fe2d 	bl	8000cb8 <__aeabi_d2lz>
 800505e:	f7fb fa9d 	bl	800059c <__aeabi_l2d>
 8005062:	4602      	mov	r2, r0
 8005064:	460b      	mov	r3, r1
 8005066:	4640      	mov	r0, r8
 8005068:	4649      	mov	r1, r9
 800506a:	f7fb f90d 	bl	8000288 <__aeabi_dsub>
 800506e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005070:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005074:	ea43 030a 	orr.w	r3, r3, sl
 8005078:	4313      	orrs	r3, r2
 800507a:	4680      	mov	r8, r0
 800507c:	4689      	mov	r9, r1
 800507e:	d053      	beq.n	8005128 <_strtod_l+0xba8>
 8005080:	a335      	add	r3, pc, #212	; (adr r3, 8005158 <_strtod_l+0xbd8>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb fd29 	bl	8000adc <__aeabi_dcmplt>
 800508a:	2800      	cmp	r0, #0
 800508c:	f47f acce 	bne.w	8004a2c <_strtod_l+0x4ac>
 8005090:	a333      	add	r3, pc, #204	; (adr r3, 8005160 <_strtod_l+0xbe0>)
 8005092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb fd3d 	bl	8000b18 <__aeabi_dcmpgt>
 800509e:	2800      	cmp	r0, #0
 80050a0:	f43f af7b 	beq.w	8004f9a <_strtod_l+0xa1a>
 80050a4:	e4c2      	b.n	8004a2c <_strtod_l+0x4ac>
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	b333      	cbz	r3, 80050f8 <_strtod_l+0xb78>
 80050aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80050ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050b0:	d822      	bhi.n	80050f8 <_strtod_l+0xb78>
 80050b2:	a32d      	add	r3, pc, #180	; (adr r3, 8005168 <_strtod_l+0xbe8>)
 80050b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b8:	4640      	mov	r0, r8
 80050ba:	4649      	mov	r1, r9
 80050bc:	f7fb fd18 	bl	8000af0 <__aeabi_dcmple>
 80050c0:	b1a0      	cbz	r0, 80050ec <_strtod_l+0xb6c>
 80050c2:	4649      	mov	r1, r9
 80050c4:	4640      	mov	r0, r8
 80050c6:	f7fb fd6f 	bl	8000ba8 <__aeabi_d2uiz>
 80050ca:	2801      	cmp	r0, #1
 80050cc:	bf38      	it	cc
 80050ce:	2001      	movcc	r0, #1
 80050d0:	f7fb fa18 	bl	8000504 <__aeabi_ui2d>
 80050d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050d6:	4680      	mov	r8, r0
 80050d8:	4689      	mov	r9, r1
 80050da:	bb13      	cbnz	r3, 8005122 <_strtod_l+0xba2>
 80050dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050e0:	9014      	str	r0, [sp, #80]	; 0x50
 80050e2:	9315      	str	r3, [sp, #84]	; 0x54
 80050e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80050e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80050ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80050f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	930d      	str	r3, [sp, #52]	; 0x34
 80050f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005100:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005104:	f001 fe54 	bl	8006db0 <__ulp>
 8005108:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800510c:	ec53 2b10 	vmov	r2, r3, d0
 8005110:	f7fb fa72 	bl	80005f8 <__aeabi_dmul>
 8005114:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005118:	f7fb f8b8 	bl	800028c <__adddf3>
 800511c:	4682      	mov	sl, r0
 800511e:	468b      	mov	fp, r1
 8005120:	e78f      	b.n	8005042 <_strtod_l+0xac2>
 8005122:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8005126:	e7dd      	b.n	80050e4 <_strtod_l+0xb64>
 8005128:	a311      	add	r3, pc, #68	; (adr r3, 8005170 <_strtod_l+0xbf0>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fcd5 	bl	8000adc <__aeabi_dcmplt>
 8005132:	e7b4      	b.n	800509e <_strtod_l+0xb1e>
 8005134:	2300      	movs	r3, #0
 8005136:	930e      	str	r3, [sp, #56]	; 0x38
 8005138:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800513a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	f7ff ba65 	b.w	800460c <_strtod_l+0x8c>
 8005142:	2b65      	cmp	r3, #101	; 0x65
 8005144:	f43f ab5d 	beq.w	8004802 <_strtod_l+0x282>
 8005148:	2b45      	cmp	r3, #69	; 0x45
 800514a:	f43f ab5a 	beq.w	8004802 <_strtod_l+0x282>
 800514e:	2201      	movs	r2, #1
 8005150:	f7ff bb92 	b.w	8004878 <_strtod_l+0x2f8>
 8005154:	f3af 8000 	nop.w
 8005158:	94a03595 	.word	0x94a03595
 800515c:	3fdfffff 	.word	0x3fdfffff
 8005160:	35afe535 	.word	0x35afe535
 8005164:	3fe00000 	.word	0x3fe00000
 8005168:	ffc00000 	.word	0xffc00000
 800516c:	41dfffff 	.word	0x41dfffff
 8005170:	94a03595 	.word	0x94a03595
 8005174:	3fcfffff 	.word	0x3fcfffff
 8005178:	3ff00000 	.word	0x3ff00000
 800517c:	7ff00000 	.word	0x7ff00000
 8005180:	7fe00000 	.word	0x7fe00000
 8005184:	7c9fffff 	.word	0x7c9fffff
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	bff00000 	.word	0xbff00000
 8005190:	7fefffff 	.word	0x7fefffff

08005194 <_strtod_r>:
 8005194:	4b01      	ldr	r3, [pc, #4]	; (800519c <_strtod_r+0x8>)
 8005196:	f7ff b9f3 	b.w	8004580 <_strtod_l>
 800519a:	bf00      	nop
 800519c:	20000080 	.word	0x20000080

080051a0 <_strtol_l.isra.0>:
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051a6:	d001      	beq.n	80051ac <_strtol_l.isra.0+0xc>
 80051a8:	2b24      	cmp	r3, #36	; 0x24
 80051aa:	d906      	bls.n	80051ba <_strtol_l.isra.0+0x1a>
 80051ac:	f7fe fafa 	bl	80037a4 <__errno>
 80051b0:	2316      	movs	r3, #22
 80051b2:	6003      	str	r3, [r0, #0]
 80051b4:	2000      	movs	r0, #0
 80051b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ba:	4f3a      	ldr	r7, [pc, #232]	; (80052a4 <_strtol_l.isra.0+0x104>)
 80051bc:	468e      	mov	lr, r1
 80051be:	4676      	mov	r6, lr
 80051c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80051c4:	5de5      	ldrb	r5, [r4, r7]
 80051c6:	f015 0508 	ands.w	r5, r5, #8
 80051ca:	d1f8      	bne.n	80051be <_strtol_l.isra.0+0x1e>
 80051cc:	2c2d      	cmp	r4, #45	; 0x2d
 80051ce:	d134      	bne.n	800523a <_strtol_l.isra.0+0x9a>
 80051d0:	f89e 4000 	ldrb.w	r4, [lr]
 80051d4:	f04f 0801 	mov.w	r8, #1
 80051d8:	f106 0e02 	add.w	lr, r6, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d05c      	beq.n	800529a <_strtol_l.isra.0+0xfa>
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d10c      	bne.n	80051fe <_strtol_l.isra.0+0x5e>
 80051e4:	2c30      	cmp	r4, #48	; 0x30
 80051e6:	d10a      	bne.n	80051fe <_strtol_l.isra.0+0x5e>
 80051e8:	f89e 4000 	ldrb.w	r4, [lr]
 80051ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80051f0:	2c58      	cmp	r4, #88	; 0x58
 80051f2:	d14d      	bne.n	8005290 <_strtol_l.isra.0+0xf0>
 80051f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80051f8:	2310      	movs	r3, #16
 80051fa:	f10e 0e02 	add.w	lr, lr, #2
 80051fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005202:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8005206:	2600      	movs	r6, #0
 8005208:	fbbc f9f3 	udiv	r9, ip, r3
 800520c:	4635      	mov	r5, r6
 800520e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005212:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005216:	2f09      	cmp	r7, #9
 8005218:	d818      	bhi.n	800524c <_strtol_l.isra.0+0xac>
 800521a:	463c      	mov	r4, r7
 800521c:	42a3      	cmp	r3, r4
 800521e:	dd24      	ble.n	800526a <_strtol_l.isra.0+0xca>
 8005220:	2e00      	cmp	r6, #0
 8005222:	db1f      	blt.n	8005264 <_strtol_l.isra.0+0xc4>
 8005224:	45a9      	cmp	r9, r5
 8005226:	d31d      	bcc.n	8005264 <_strtol_l.isra.0+0xc4>
 8005228:	d101      	bne.n	800522e <_strtol_l.isra.0+0x8e>
 800522a:	45a2      	cmp	sl, r4
 800522c:	db1a      	blt.n	8005264 <_strtol_l.isra.0+0xc4>
 800522e:	fb05 4503 	mla	r5, r5, r3, r4
 8005232:	2601      	movs	r6, #1
 8005234:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005238:	e7eb      	b.n	8005212 <_strtol_l.isra.0+0x72>
 800523a:	2c2b      	cmp	r4, #43	; 0x2b
 800523c:	bf08      	it	eq
 800523e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005242:	46a8      	mov	r8, r5
 8005244:	bf08      	it	eq
 8005246:	f106 0e02 	addeq.w	lr, r6, #2
 800524a:	e7c7      	b.n	80051dc <_strtol_l.isra.0+0x3c>
 800524c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005250:	2f19      	cmp	r7, #25
 8005252:	d801      	bhi.n	8005258 <_strtol_l.isra.0+0xb8>
 8005254:	3c37      	subs	r4, #55	; 0x37
 8005256:	e7e1      	b.n	800521c <_strtol_l.isra.0+0x7c>
 8005258:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800525c:	2f19      	cmp	r7, #25
 800525e:	d804      	bhi.n	800526a <_strtol_l.isra.0+0xca>
 8005260:	3c57      	subs	r4, #87	; 0x57
 8005262:	e7db      	b.n	800521c <_strtol_l.isra.0+0x7c>
 8005264:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005268:	e7e4      	b.n	8005234 <_strtol_l.isra.0+0x94>
 800526a:	2e00      	cmp	r6, #0
 800526c:	da05      	bge.n	800527a <_strtol_l.isra.0+0xda>
 800526e:	2322      	movs	r3, #34	; 0x22
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	4665      	mov	r5, ip
 8005274:	b942      	cbnz	r2, 8005288 <_strtol_l.isra.0+0xe8>
 8005276:	4628      	mov	r0, r5
 8005278:	e79d      	b.n	80051b6 <_strtol_l.isra.0+0x16>
 800527a:	f1b8 0f00 	cmp.w	r8, #0
 800527e:	d000      	beq.n	8005282 <_strtol_l.isra.0+0xe2>
 8005280:	426d      	negs	r5, r5
 8005282:	2a00      	cmp	r2, #0
 8005284:	d0f7      	beq.n	8005276 <_strtol_l.isra.0+0xd6>
 8005286:	b10e      	cbz	r6, 800528c <_strtol_l.isra.0+0xec>
 8005288:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800528c:	6011      	str	r1, [r2, #0]
 800528e:	e7f2      	b.n	8005276 <_strtol_l.isra.0+0xd6>
 8005290:	2430      	movs	r4, #48	; 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d1b3      	bne.n	80051fe <_strtol_l.isra.0+0x5e>
 8005296:	2308      	movs	r3, #8
 8005298:	e7b1      	b.n	80051fe <_strtol_l.isra.0+0x5e>
 800529a:	2c30      	cmp	r4, #48	; 0x30
 800529c:	d0a4      	beq.n	80051e8 <_strtol_l.isra.0+0x48>
 800529e:	230a      	movs	r3, #10
 80052a0:	e7ad      	b.n	80051fe <_strtol_l.isra.0+0x5e>
 80052a2:	bf00      	nop
 80052a4:	08008731 	.word	0x08008731

080052a8 <_strtol_r>:
 80052a8:	f7ff bf7a 	b.w	80051a0 <_strtol_l.isra.0>

080052ac <quorem>:
 80052ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b0:	6903      	ldr	r3, [r0, #16]
 80052b2:	690c      	ldr	r4, [r1, #16]
 80052b4:	42a3      	cmp	r3, r4
 80052b6:	4607      	mov	r7, r0
 80052b8:	f2c0 8081 	blt.w	80053be <quorem+0x112>
 80052bc:	3c01      	subs	r4, #1
 80052be:	f101 0814 	add.w	r8, r1, #20
 80052c2:	f100 0514 	add.w	r5, r0, #20
 80052c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052ca:	9301      	str	r3, [sp, #4]
 80052cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052d4:	3301      	adds	r3, #1
 80052d6:	429a      	cmp	r2, r3
 80052d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052e0:	fbb2 f6f3 	udiv	r6, r2, r3
 80052e4:	d331      	bcc.n	800534a <quorem+0x9e>
 80052e6:	f04f 0e00 	mov.w	lr, #0
 80052ea:	4640      	mov	r0, r8
 80052ec:	46ac      	mov	ip, r5
 80052ee:	46f2      	mov	sl, lr
 80052f0:	f850 2b04 	ldr.w	r2, [r0], #4
 80052f4:	b293      	uxth	r3, r2
 80052f6:	fb06 e303 	mla	r3, r6, r3, lr
 80052fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ebaa 0303 	sub.w	r3, sl, r3
 8005304:	0c12      	lsrs	r2, r2, #16
 8005306:	f8dc a000 	ldr.w	sl, [ip]
 800530a:	fb06 e202 	mla	r2, r6, r2, lr
 800530e:	fa13 f38a 	uxtah	r3, r3, sl
 8005312:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005316:	fa1f fa82 	uxth.w	sl, r2
 800531a:	f8dc 2000 	ldr.w	r2, [ip]
 800531e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005322:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005326:	b29b      	uxth	r3, r3
 8005328:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800532c:	4581      	cmp	r9, r0
 800532e:	f84c 3b04 	str.w	r3, [ip], #4
 8005332:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005336:	d2db      	bcs.n	80052f0 <quorem+0x44>
 8005338:	f855 300b 	ldr.w	r3, [r5, fp]
 800533c:	b92b      	cbnz	r3, 800534a <quorem+0x9e>
 800533e:	9b01      	ldr	r3, [sp, #4]
 8005340:	3b04      	subs	r3, #4
 8005342:	429d      	cmp	r5, r3
 8005344:	461a      	mov	r2, r3
 8005346:	d32e      	bcc.n	80053a6 <quorem+0xfa>
 8005348:	613c      	str	r4, [r7, #16]
 800534a:	4638      	mov	r0, r7
 800534c:	f001 fc8c 	bl	8006c68 <__mcmp>
 8005350:	2800      	cmp	r0, #0
 8005352:	db24      	blt.n	800539e <quorem+0xf2>
 8005354:	3601      	adds	r6, #1
 8005356:	4628      	mov	r0, r5
 8005358:	f04f 0c00 	mov.w	ip, #0
 800535c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005360:	f8d0 e000 	ldr.w	lr, [r0]
 8005364:	b293      	uxth	r3, r2
 8005366:	ebac 0303 	sub.w	r3, ip, r3
 800536a:	0c12      	lsrs	r2, r2, #16
 800536c:	fa13 f38e 	uxtah	r3, r3, lr
 8005370:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005374:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005378:	b29b      	uxth	r3, r3
 800537a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800537e:	45c1      	cmp	r9, r8
 8005380:	f840 3b04 	str.w	r3, [r0], #4
 8005384:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005388:	d2e8      	bcs.n	800535c <quorem+0xb0>
 800538a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800538e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005392:	b922      	cbnz	r2, 800539e <quorem+0xf2>
 8005394:	3b04      	subs	r3, #4
 8005396:	429d      	cmp	r5, r3
 8005398:	461a      	mov	r2, r3
 800539a:	d30a      	bcc.n	80053b2 <quorem+0x106>
 800539c:	613c      	str	r4, [r7, #16]
 800539e:	4630      	mov	r0, r6
 80053a0:	b003      	add	sp, #12
 80053a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d1cc      	bne.n	8005348 <quorem+0x9c>
 80053ae:	3c01      	subs	r4, #1
 80053b0:	e7c7      	b.n	8005342 <quorem+0x96>
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	3b04      	subs	r3, #4
 80053b6:	2a00      	cmp	r2, #0
 80053b8:	d1f0      	bne.n	800539c <quorem+0xf0>
 80053ba:	3c01      	subs	r4, #1
 80053bc:	e7eb      	b.n	8005396 <quorem+0xea>
 80053be:	2000      	movs	r0, #0
 80053c0:	e7ee      	b.n	80053a0 <quorem+0xf4>
 80053c2:	0000      	movs	r0, r0
 80053c4:	0000      	movs	r0, r0
	...

080053c8 <_dtoa_r>:
 80053c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053cc:	ed2d 8b02 	vpush	{d8}
 80053d0:	ec57 6b10 	vmov	r6, r7, d0
 80053d4:	b095      	sub	sp, #84	; 0x54
 80053d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053dc:	9105      	str	r1, [sp, #20]
 80053de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80053e2:	4604      	mov	r4, r0
 80053e4:	9209      	str	r2, [sp, #36]	; 0x24
 80053e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80053e8:	b975      	cbnz	r5, 8005408 <_dtoa_r+0x40>
 80053ea:	2010      	movs	r0, #16
 80053ec:	f001 f94c 	bl	8006688 <malloc>
 80053f0:	4602      	mov	r2, r0
 80053f2:	6260      	str	r0, [r4, #36]	; 0x24
 80053f4:	b920      	cbnz	r0, 8005400 <_dtoa_r+0x38>
 80053f6:	4bb2      	ldr	r3, [pc, #712]	; (80056c0 <_dtoa_r+0x2f8>)
 80053f8:	21ea      	movs	r1, #234	; 0xea
 80053fa:	48b2      	ldr	r0, [pc, #712]	; (80056c4 <_dtoa_r+0x2fc>)
 80053fc:	f002 f874 	bl	80074e8 <__assert_func>
 8005400:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005404:	6005      	str	r5, [r0, #0]
 8005406:	60c5      	str	r5, [r0, #12]
 8005408:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800540a:	6819      	ldr	r1, [r3, #0]
 800540c:	b151      	cbz	r1, 8005424 <_dtoa_r+0x5c>
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	604a      	str	r2, [r1, #4]
 8005412:	2301      	movs	r3, #1
 8005414:	4093      	lsls	r3, r2
 8005416:	608b      	str	r3, [r1, #8]
 8005418:	4620      	mov	r0, r4
 800541a:	f001 f99d 	bl	8006758 <_Bfree>
 800541e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	1e3b      	subs	r3, r7, #0
 8005426:	bfb9      	ittee	lt
 8005428:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800542c:	9303      	strlt	r3, [sp, #12]
 800542e:	2300      	movge	r3, #0
 8005430:	f8c8 3000 	strge.w	r3, [r8]
 8005434:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005438:	4ba3      	ldr	r3, [pc, #652]	; (80056c8 <_dtoa_r+0x300>)
 800543a:	bfbc      	itt	lt
 800543c:	2201      	movlt	r2, #1
 800543e:	f8c8 2000 	strlt.w	r2, [r8]
 8005442:	ea33 0309 	bics.w	r3, r3, r9
 8005446:	d11b      	bne.n	8005480 <_dtoa_r+0xb8>
 8005448:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800544a:	f242 730f 	movw	r3, #9999	; 0x270f
 800544e:	6013      	str	r3, [r2, #0]
 8005450:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005454:	4333      	orrs	r3, r6
 8005456:	f000 857a 	beq.w	8005f4e <_dtoa_r+0xb86>
 800545a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800545c:	b963      	cbnz	r3, 8005478 <_dtoa_r+0xb0>
 800545e:	4b9b      	ldr	r3, [pc, #620]	; (80056cc <_dtoa_r+0x304>)
 8005460:	e024      	b.n	80054ac <_dtoa_r+0xe4>
 8005462:	4b9b      	ldr	r3, [pc, #620]	; (80056d0 <_dtoa_r+0x308>)
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	3308      	adds	r3, #8
 8005468:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800546a:	6013      	str	r3, [r2, #0]
 800546c:	9800      	ldr	r0, [sp, #0]
 800546e:	b015      	add	sp, #84	; 0x54
 8005470:	ecbd 8b02 	vpop	{d8}
 8005474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005478:	4b94      	ldr	r3, [pc, #592]	; (80056cc <_dtoa_r+0x304>)
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	3303      	adds	r3, #3
 800547e:	e7f3      	b.n	8005468 <_dtoa_r+0xa0>
 8005480:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	ec51 0b17 	vmov	r0, r1, d7
 800548a:	2300      	movs	r3, #0
 800548c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005490:	f7fb fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005494:	4680      	mov	r8, r0
 8005496:	b158      	cbz	r0, 80054b0 <_dtoa_r+0xe8>
 8005498:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800549a:	2301      	movs	r3, #1
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	f000 8551 	beq.w	8005f48 <_dtoa_r+0xb80>
 80054a6:	488b      	ldr	r0, [pc, #556]	; (80056d4 <_dtoa_r+0x30c>)
 80054a8:	6018      	str	r0, [r3, #0]
 80054aa:	1e43      	subs	r3, r0, #1
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	e7dd      	b.n	800546c <_dtoa_r+0xa4>
 80054b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80054b4:	aa12      	add	r2, sp, #72	; 0x48
 80054b6:	a913      	add	r1, sp, #76	; 0x4c
 80054b8:	4620      	mov	r0, r4
 80054ba:	f001 fcf5 	bl	8006ea8 <__d2b>
 80054be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80054c2:	4683      	mov	fp, r0
 80054c4:	2d00      	cmp	r5, #0
 80054c6:	d07c      	beq.n	80055c2 <_dtoa_r+0x1fa>
 80054c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80054ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80054d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054e2:	4b7d      	ldr	r3, [pc, #500]	; (80056d8 <_dtoa_r+0x310>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fecd 	bl	8000288 <__aeabi_dsub>
 80054ee:	a36e      	add	r3, pc, #440	; (adr r3, 80056a8 <_dtoa_r+0x2e0>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fb f880 	bl	80005f8 <__aeabi_dmul>
 80054f8:	a36d      	add	r3, pc, #436	; (adr r3, 80056b0 <_dtoa_r+0x2e8>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fa fec5 	bl	800028c <__adddf3>
 8005502:	4606      	mov	r6, r0
 8005504:	4628      	mov	r0, r5
 8005506:	460f      	mov	r7, r1
 8005508:	f7fb f80c 	bl	8000524 <__aeabi_i2d>
 800550c:	a36a      	add	r3, pc, #424	; (adr r3, 80056b8 <_dtoa_r+0x2f0>)
 800550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005512:	f7fb f871 	bl	80005f8 <__aeabi_dmul>
 8005516:	4602      	mov	r2, r0
 8005518:	460b      	mov	r3, r1
 800551a:	4630      	mov	r0, r6
 800551c:	4639      	mov	r1, r7
 800551e:	f7fa feb5 	bl	800028c <__adddf3>
 8005522:	4606      	mov	r6, r0
 8005524:	460f      	mov	r7, r1
 8005526:	f7fb fb17 	bl	8000b58 <__aeabi_d2iz>
 800552a:	2200      	movs	r2, #0
 800552c:	4682      	mov	sl, r0
 800552e:	2300      	movs	r3, #0
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fb fad2 	bl	8000adc <__aeabi_dcmplt>
 8005538:	b148      	cbz	r0, 800554e <_dtoa_r+0x186>
 800553a:	4650      	mov	r0, sl
 800553c:	f7fa fff2 	bl	8000524 <__aeabi_i2d>
 8005540:	4632      	mov	r2, r6
 8005542:	463b      	mov	r3, r7
 8005544:	f7fb fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005548:	b908      	cbnz	r0, 800554e <_dtoa_r+0x186>
 800554a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800554e:	f1ba 0f16 	cmp.w	sl, #22
 8005552:	d854      	bhi.n	80055fe <_dtoa_r+0x236>
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <_dtoa_r+0x314>)
 8005556:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005562:	f7fb fabb 	bl	8000adc <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d04b      	beq.n	8005602 <_dtoa_r+0x23a>
 800556a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800556e:	2300      	movs	r3, #0
 8005570:	930e      	str	r3, [sp, #56]	; 0x38
 8005572:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005574:	1b5d      	subs	r5, r3, r5
 8005576:	1e6b      	subs	r3, r5, #1
 8005578:	9304      	str	r3, [sp, #16]
 800557a:	bf43      	ittte	mi
 800557c:	2300      	movmi	r3, #0
 800557e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005582:	9304      	strmi	r3, [sp, #16]
 8005584:	f04f 0800 	movpl.w	r8, #0
 8005588:	f1ba 0f00 	cmp.w	sl, #0
 800558c:	db3b      	blt.n	8005606 <_dtoa_r+0x23e>
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005594:	4453      	add	r3, sl
 8005596:	9304      	str	r3, [sp, #16]
 8005598:	2300      	movs	r3, #0
 800559a:	9306      	str	r3, [sp, #24]
 800559c:	9b05      	ldr	r3, [sp, #20]
 800559e:	2b09      	cmp	r3, #9
 80055a0:	d869      	bhi.n	8005676 <_dtoa_r+0x2ae>
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	bfc4      	itt	gt
 80055a6:	3b04      	subgt	r3, #4
 80055a8:	9305      	strgt	r3, [sp, #20]
 80055aa:	9b05      	ldr	r3, [sp, #20]
 80055ac:	f1a3 0302 	sub.w	r3, r3, #2
 80055b0:	bfcc      	ite	gt
 80055b2:	2500      	movgt	r5, #0
 80055b4:	2501      	movle	r5, #1
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d869      	bhi.n	800568e <_dtoa_r+0x2c6>
 80055ba:	e8df f003 	tbb	[pc, r3]
 80055be:	4e2c      	.short	0x4e2c
 80055c0:	5a4c      	.short	0x5a4c
 80055c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80055c6:	441d      	add	r5, r3
 80055c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	bfc1      	itttt	gt
 80055d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80055dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055e0:	bfda      	itte	le
 80055e2:	f1c3 0320 	rsble	r3, r3, #32
 80055e6:	fa06 f003 	lslle.w	r0, r6, r3
 80055ea:	4318      	orrgt	r0, r3
 80055ec:	f7fa ff8a 	bl	8000504 <__aeabi_ui2d>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4606      	mov	r6, r0
 80055f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055f8:	3d01      	subs	r5, #1
 80055fa:	9310      	str	r3, [sp, #64]	; 0x40
 80055fc:	e771      	b.n	80054e2 <_dtoa_r+0x11a>
 80055fe:	2301      	movs	r3, #1
 8005600:	e7b6      	b.n	8005570 <_dtoa_r+0x1a8>
 8005602:	900e      	str	r0, [sp, #56]	; 0x38
 8005604:	e7b5      	b.n	8005572 <_dtoa_r+0x1aa>
 8005606:	f1ca 0300 	rsb	r3, sl, #0
 800560a:	9306      	str	r3, [sp, #24]
 800560c:	2300      	movs	r3, #0
 800560e:	eba8 080a 	sub.w	r8, r8, sl
 8005612:	930d      	str	r3, [sp, #52]	; 0x34
 8005614:	e7c2      	b.n	800559c <_dtoa_r+0x1d4>
 8005616:	2300      	movs	r3, #0
 8005618:	9308      	str	r3, [sp, #32]
 800561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561c:	2b00      	cmp	r3, #0
 800561e:	dc39      	bgt.n	8005694 <_dtoa_r+0x2cc>
 8005620:	f04f 0901 	mov.w	r9, #1
 8005624:	f8cd 9004 	str.w	r9, [sp, #4]
 8005628:	464b      	mov	r3, r9
 800562a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800562e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005630:	2200      	movs	r2, #0
 8005632:	6042      	str	r2, [r0, #4]
 8005634:	2204      	movs	r2, #4
 8005636:	f102 0614 	add.w	r6, r2, #20
 800563a:	429e      	cmp	r6, r3
 800563c:	6841      	ldr	r1, [r0, #4]
 800563e:	d92f      	bls.n	80056a0 <_dtoa_r+0x2d8>
 8005640:	4620      	mov	r0, r4
 8005642:	f001 f849 	bl	80066d8 <_Balloc>
 8005646:	9000      	str	r0, [sp, #0]
 8005648:	2800      	cmp	r0, #0
 800564a:	d14b      	bne.n	80056e4 <_dtoa_r+0x31c>
 800564c:	4b24      	ldr	r3, [pc, #144]	; (80056e0 <_dtoa_r+0x318>)
 800564e:	4602      	mov	r2, r0
 8005650:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005654:	e6d1      	b.n	80053fa <_dtoa_r+0x32>
 8005656:	2301      	movs	r3, #1
 8005658:	e7de      	b.n	8005618 <_dtoa_r+0x250>
 800565a:	2300      	movs	r3, #0
 800565c:	9308      	str	r3, [sp, #32]
 800565e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005660:	eb0a 0903 	add.w	r9, sl, r3
 8005664:	f109 0301 	add.w	r3, r9, #1
 8005668:	2b01      	cmp	r3, #1
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	bfb8      	it	lt
 800566e:	2301      	movlt	r3, #1
 8005670:	e7dd      	b.n	800562e <_dtoa_r+0x266>
 8005672:	2301      	movs	r3, #1
 8005674:	e7f2      	b.n	800565c <_dtoa_r+0x294>
 8005676:	2501      	movs	r5, #1
 8005678:	2300      	movs	r3, #0
 800567a:	9305      	str	r3, [sp, #20]
 800567c:	9508      	str	r5, [sp, #32]
 800567e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005682:	2200      	movs	r2, #0
 8005684:	f8cd 9004 	str.w	r9, [sp, #4]
 8005688:	2312      	movs	r3, #18
 800568a:	9209      	str	r2, [sp, #36]	; 0x24
 800568c:	e7cf      	b.n	800562e <_dtoa_r+0x266>
 800568e:	2301      	movs	r3, #1
 8005690:	9308      	str	r3, [sp, #32]
 8005692:	e7f4      	b.n	800567e <_dtoa_r+0x2b6>
 8005694:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005698:	f8cd 9004 	str.w	r9, [sp, #4]
 800569c:	464b      	mov	r3, r9
 800569e:	e7c6      	b.n	800562e <_dtoa_r+0x266>
 80056a0:	3101      	adds	r1, #1
 80056a2:	6041      	str	r1, [r0, #4]
 80056a4:	0052      	lsls	r2, r2, #1
 80056a6:	e7c6      	b.n	8005636 <_dtoa_r+0x26e>
 80056a8:	636f4361 	.word	0x636f4361
 80056ac:	3fd287a7 	.word	0x3fd287a7
 80056b0:	8b60c8b3 	.word	0x8b60c8b3
 80056b4:	3fc68a28 	.word	0x3fc68a28
 80056b8:	509f79fb 	.word	0x509f79fb
 80056bc:	3fd34413 	.word	0x3fd34413
 80056c0:	0800883e 	.word	0x0800883e
 80056c4:	08008855 	.word	0x08008855
 80056c8:	7ff00000 	.word	0x7ff00000
 80056cc:	0800883a 	.word	0x0800883a
 80056d0:	08008831 	.word	0x08008831
 80056d4:	080086b5 	.word	0x080086b5
 80056d8:	3ff80000 	.word	0x3ff80000
 80056dc:	080089d0 	.word	0x080089d0
 80056e0:	080088b4 	.word	0x080088b4
 80056e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e6:	9a00      	ldr	r2, [sp, #0]
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	9b01      	ldr	r3, [sp, #4]
 80056ec:	2b0e      	cmp	r3, #14
 80056ee:	f200 80ad 	bhi.w	800584c <_dtoa_r+0x484>
 80056f2:	2d00      	cmp	r5, #0
 80056f4:	f000 80aa 	beq.w	800584c <_dtoa_r+0x484>
 80056f8:	f1ba 0f00 	cmp.w	sl, #0
 80056fc:	dd36      	ble.n	800576c <_dtoa_r+0x3a4>
 80056fe:	4ac3      	ldr	r2, [pc, #780]	; (8005a0c <_dtoa_r+0x644>)
 8005700:	f00a 030f 	and.w	r3, sl, #15
 8005704:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005708:	ed93 7b00 	vldr	d7, [r3]
 800570c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005710:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005714:	eeb0 8a47 	vmov.f32	s16, s14
 8005718:	eef0 8a67 	vmov.f32	s17, s15
 800571c:	d016      	beq.n	800574c <_dtoa_r+0x384>
 800571e:	4bbc      	ldr	r3, [pc, #752]	; (8005a10 <_dtoa_r+0x648>)
 8005720:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005724:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005728:	f7fb f890 	bl	800084c <__aeabi_ddiv>
 800572c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005730:	f007 070f 	and.w	r7, r7, #15
 8005734:	2503      	movs	r5, #3
 8005736:	4eb6      	ldr	r6, [pc, #728]	; (8005a10 <_dtoa_r+0x648>)
 8005738:	b957      	cbnz	r7, 8005750 <_dtoa_r+0x388>
 800573a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800573e:	ec53 2b18 	vmov	r2, r3, d8
 8005742:	f7fb f883 	bl	800084c <__aeabi_ddiv>
 8005746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800574a:	e029      	b.n	80057a0 <_dtoa_r+0x3d8>
 800574c:	2502      	movs	r5, #2
 800574e:	e7f2      	b.n	8005736 <_dtoa_r+0x36e>
 8005750:	07f9      	lsls	r1, r7, #31
 8005752:	d508      	bpl.n	8005766 <_dtoa_r+0x39e>
 8005754:	ec51 0b18 	vmov	r0, r1, d8
 8005758:	e9d6 2300 	ldrd	r2, r3, [r6]
 800575c:	f7fa ff4c 	bl	80005f8 <__aeabi_dmul>
 8005760:	ec41 0b18 	vmov	d8, r0, r1
 8005764:	3501      	adds	r5, #1
 8005766:	107f      	asrs	r7, r7, #1
 8005768:	3608      	adds	r6, #8
 800576a:	e7e5      	b.n	8005738 <_dtoa_r+0x370>
 800576c:	f000 80a6 	beq.w	80058bc <_dtoa_r+0x4f4>
 8005770:	f1ca 0600 	rsb	r6, sl, #0
 8005774:	4ba5      	ldr	r3, [pc, #660]	; (8005a0c <_dtoa_r+0x644>)
 8005776:	4fa6      	ldr	r7, [pc, #664]	; (8005a10 <_dtoa_r+0x648>)
 8005778:	f006 020f 	and.w	r2, r6, #15
 800577c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005788:	f7fa ff36 	bl	80005f8 <__aeabi_dmul>
 800578c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005790:	1136      	asrs	r6, r6, #4
 8005792:	2300      	movs	r3, #0
 8005794:	2502      	movs	r5, #2
 8005796:	2e00      	cmp	r6, #0
 8005798:	f040 8085 	bne.w	80058a6 <_dtoa_r+0x4de>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1d2      	bne.n	8005746 <_dtoa_r+0x37e>
 80057a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 808c 	beq.w	80058c0 <_dtoa_r+0x4f8>
 80057a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057ac:	4b99      	ldr	r3, [pc, #612]	; (8005a14 <_dtoa_r+0x64c>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	4630      	mov	r0, r6
 80057b2:	4639      	mov	r1, r7
 80057b4:	f7fb f992 	bl	8000adc <__aeabi_dcmplt>
 80057b8:	2800      	cmp	r0, #0
 80057ba:	f000 8081 	beq.w	80058c0 <_dtoa_r+0x4f8>
 80057be:	9b01      	ldr	r3, [sp, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d07d      	beq.n	80058c0 <_dtoa_r+0x4f8>
 80057c4:	f1b9 0f00 	cmp.w	r9, #0
 80057c8:	dd3c      	ble.n	8005844 <_dtoa_r+0x47c>
 80057ca:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80057ce:	9307      	str	r3, [sp, #28]
 80057d0:	2200      	movs	r2, #0
 80057d2:	4b91      	ldr	r3, [pc, #580]	; (8005a18 <_dtoa_r+0x650>)
 80057d4:	4630      	mov	r0, r6
 80057d6:	4639      	mov	r1, r7
 80057d8:	f7fa ff0e 	bl	80005f8 <__aeabi_dmul>
 80057dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057e0:	3501      	adds	r5, #1
 80057e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80057e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80057ea:	4628      	mov	r0, r5
 80057ec:	f7fa fe9a 	bl	8000524 <__aeabi_i2d>
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	f7fa ff00 	bl	80005f8 <__aeabi_dmul>
 80057f8:	4b88      	ldr	r3, [pc, #544]	; (8005a1c <_dtoa_r+0x654>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	f7fa fd46 	bl	800028c <__adddf3>
 8005800:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005804:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800580c:	2b00      	cmp	r3, #0
 800580e:	d15c      	bne.n	80058ca <_dtoa_r+0x502>
 8005810:	4b83      	ldr	r3, [pc, #524]	; (8005a20 <_dtoa_r+0x658>)
 8005812:	2200      	movs	r2, #0
 8005814:	4630      	mov	r0, r6
 8005816:	4639      	mov	r1, r7
 8005818:	f7fa fd36 	bl	8000288 <__aeabi_dsub>
 800581c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005820:	4606      	mov	r6, r0
 8005822:	460f      	mov	r7, r1
 8005824:	f7fb f978 	bl	8000b18 <__aeabi_dcmpgt>
 8005828:	2800      	cmp	r0, #0
 800582a:	f040 8296 	bne.w	8005d5a <_dtoa_r+0x992>
 800582e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005832:	4630      	mov	r0, r6
 8005834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005838:	4639      	mov	r1, r7
 800583a:	f7fb f94f 	bl	8000adc <__aeabi_dcmplt>
 800583e:	2800      	cmp	r0, #0
 8005840:	f040 8288 	bne.w	8005d54 <_dtoa_r+0x98c>
 8005844:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005848:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800584c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800584e:	2b00      	cmp	r3, #0
 8005850:	f2c0 8158 	blt.w	8005b04 <_dtoa_r+0x73c>
 8005854:	f1ba 0f0e 	cmp.w	sl, #14
 8005858:	f300 8154 	bgt.w	8005b04 <_dtoa_r+0x73c>
 800585c:	4b6b      	ldr	r3, [pc, #428]	; (8005a0c <_dtoa_r+0x644>)
 800585e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005862:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005868:	2b00      	cmp	r3, #0
 800586a:	f280 80e3 	bge.w	8005a34 <_dtoa_r+0x66c>
 800586e:	9b01      	ldr	r3, [sp, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	f300 80df 	bgt.w	8005a34 <_dtoa_r+0x66c>
 8005876:	f040 826d 	bne.w	8005d54 <_dtoa_r+0x98c>
 800587a:	4b69      	ldr	r3, [pc, #420]	; (8005a20 <_dtoa_r+0x658>)
 800587c:	2200      	movs	r2, #0
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa feb9 	bl	80005f8 <__aeabi_dmul>
 8005886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800588a:	f7fb f93b 	bl	8000b04 <__aeabi_dcmpge>
 800588e:	9e01      	ldr	r6, [sp, #4]
 8005890:	4637      	mov	r7, r6
 8005892:	2800      	cmp	r0, #0
 8005894:	f040 8243 	bne.w	8005d1e <_dtoa_r+0x956>
 8005898:	9d00      	ldr	r5, [sp, #0]
 800589a:	2331      	movs	r3, #49	; 0x31
 800589c:	f805 3b01 	strb.w	r3, [r5], #1
 80058a0:	f10a 0a01 	add.w	sl, sl, #1
 80058a4:	e23f      	b.n	8005d26 <_dtoa_r+0x95e>
 80058a6:	07f2      	lsls	r2, r6, #31
 80058a8:	d505      	bpl.n	80058b6 <_dtoa_r+0x4ee>
 80058aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ae:	f7fa fea3 	bl	80005f8 <__aeabi_dmul>
 80058b2:	3501      	adds	r5, #1
 80058b4:	2301      	movs	r3, #1
 80058b6:	1076      	asrs	r6, r6, #1
 80058b8:	3708      	adds	r7, #8
 80058ba:	e76c      	b.n	8005796 <_dtoa_r+0x3ce>
 80058bc:	2502      	movs	r5, #2
 80058be:	e76f      	b.n	80057a0 <_dtoa_r+0x3d8>
 80058c0:	9b01      	ldr	r3, [sp, #4]
 80058c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80058c6:	930c      	str	r3, [sp, #48]	; 0x30
 80058c8:	e78d      	b.n	80057e6 <_dtoa_r+0x41e>
 80058ca:	9900      	ldr	r1, [sp, #0]
 80058cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80058d0:	4b4e      	ldr	r3, [pc, #312]	; (8005a0c <_dtoa_r+0x644>)
 80058d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058d6:	4401      	add	r1, r0
 80058d8:	9102      	str	r1, [sp, #8]
 80058da:	9908      	ldr	r1, [sp, #32]
 80058dc:	eeb0 8a47 	vmov.f32	s16, s14
 80058e0:	eef0 8a67 	vmov.f32	s17, s15
 80058e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d045      	beq.n	800597c <_dtoa_r+0x5b4>
 80058f0:	494c      	ldr	r1, [pc, #304]	; (8005a24 <_dtoa_r+0x65c>)
 80058f2:	2000      	movs	r0, #0
 80058f4:	f7fa ffaa 	bl	800084c <__aeabi_ddiv>
 80058f8:	ec53 2b18 	vmov	r2, r3, d8
 80058fc:	f7fa fcc4 	bl	8000288 <__aeabi_dsub>
 8005900:	9d00      	ldr	r5, [sp, #0]
 8005902:	ec41 0b18 	vmov	d8, r0, r1
 8005906:	4639      	mov	r1, r7
 8005908:	4630      	mov	r0, r6
 800590a:	f7fb f925 	bl	8000b58 <__aeabi_d2iz>
 800590e:	900c      	str	r0, [sp, #48]	; 0x30
 8005910:	f7fa fe08 	bl	8000524 <__aeabi_i2d>
 8005914:	4602      	mov	r2, r0
 8005916:	460b      	mov	r3, r1
 8005918:	4630      	mov	r0, r6
 800591a:	4639      	mov	r1, r7
 800591c:	f7fa fcb4 	bl	8000288 <__aeabi_dsub>
 8005920:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005922:	3330      	adds	r3, #48	; 0x30
 8005924:	f805 3b01 	strb.w	r3, [r5], #1
 8005928:	ec53 2b18 	vmov	r2, r3, d8
 800592c:	4606      	mov	r6, r0
 800592e:	460f      	mov	r7, r1
 8005930:	f7fb f8d4 	bl	8000adc <__aeabi_dcmplt>
 8005934:	2800      	cmp	r0, #0
 8005936:	d165      	bne.n	8005a04 <_dtoa_r+0x63c>
 8005938:	4632      	mov	r2, r6
 800593a:	463b      	mov	r3, r7
 800593c:	4935      	ldr	r1, [pc, #212]	; (8005a14 <_dtoa_r+0x64c>)
 800593e:	2000      	movs	r0, #0
 8005940:	f7fa fca2 	bl	8000288 <__aeabi_dsub>
 8005944:	ec53 2b18 	vmov	r2, r3, d8
 8005948:	f7fb f8c8 	bl	8000adc <__aeabi_dcmplt>
 800594c:	2800      	cmp	r0, #0
 800594e:	f040 80b9 	bne.w	8005ac4 <_dtoa_r+0x6fc>
 8005952:	9b02      	ldr	r3, [sp, #8]
 8005954:	429d      	cmp	r5, r3
 8005956:	f43f af75 	beq.w	8005844 <_dtoa_r+0x47c>
 800595a:	4b2f      	ldr	r3, [pc, #188]	; (8005a18 <_dtoa_r+0x650>)
 800595c:	ec51 0b18 	vmov	r0, r1, d8
 8005960:	2200      	movs	r2, #0
 8005962:	f7fa fe49 	bl	80005f8 <__aeabi_dmul>
 8005966:	4b2c      	ldr	r3, [pc, #176]	; (8005a18 <_dtoa_r+0x650>)
 8005968:	ec41 0b18 	vmov	d8, r0, r1
 800596c:	2200      	movs	r2, #0
 800596e:	4630      	mov	r0, r6
 8005970:	4639      	mov	r1, r7
 8005972:	f7fa fe41 	bl	80005f8 <__aeabi_dmul>
 8005976:	4606      	mov	r6, r0
 8005978:	460f      	mov	r7, r1
 800597a:	e7c4      	b.n	8005906 <_dtoa_r+0x53e>
 800597c:	ec51 0b17 	vmov	r0, r1, d7
 8005980:	f7fa fe3a 	bl	80005f8 <__aeabi_dmul>
 8005984:	9b02      	ldr	r3, [sp, #8]
 8005986:	9d00      	ldr	r5, [sp, #0]
 8005988:	930c      	str	r3, [sp, #48]	; 0x30
 800598a:	ec41 0b18 	vmov	d8, r0, r1
 800598e:	4639      	mov	r1, r7
 8005990:	4630      	mov	r0, r6
 8005992:	f7fb f8e1 	bl	8000b58 <__aeabi_d2iz>
 8005996:	9011      	str	r0, [sp, #68]	; 0x44
 8005998:	f7fa fdc4 	bl	8000524 <__aeabi_i2d>
 800599c:	4602      	mov	r2, r0
 800599e:	460b      	mov	r3, r1
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	f7fa fc70 	bl	8000288 <__aeabi_dsub>
 80059a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80059aa:	3330      	adds	r3, #48	; 0x30
 80059ac:	f805 3b01 	strb.w	r3, [r5], #1
 80059b0:	9b02      	ldr	r3, [sp, #8]
 80059b2:	429d      	cmp	r5, r3
 80059b4:	4606      	mov	r6, r0
 80059b6:	460f      	mov	r7, r1
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	d134      	bne.n	8005a28 <_dtoa_r+0x660>
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <_dtoa_r+0x65c>)
 80059c0:	ec51 0b18 	vmov	r0, r1, d8
 80059c4:	f7fa fc62 	bl	800028c <__adddf3>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4630      	mov	r0, r6
 80059ce:	4639      	mov	r1, r7
 80059d0:	f7fb f8a2 	bl	8000b18 <__aeabi_dcmpgt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d175      	bne.n	8005ac4 <_dtoa_r+0x6fc>
 80059d8:	ec53 2b18 	vmov	r2, r3, d8
 80059dc:	4911      	ldr	r1, [pc, #68]	; (8005a24 <_dtoa_r+0x65c>)
 80059de:	2000      	movs	r0, #0
 80059e0:	f7fa fc52 	bl	8000288 <__aeabi_dsub>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fb f876 	bl	8000adc <__aeabi_dcmplt>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	f43f af27 	beq.w	8005844 <_dtoa_r+0x47c>
 80059f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80059f8:	1e6b      	subs	r3, r5, #1
 80059fa:	930c      	str	r3, [sp, #48]	; 0x30
 80059fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a00:	2b30      	cmp	r3, #48	; 0x30
 8005a02:	d0f8      	beq.n	80059f6 <_dtoa_r+0x62e>
 8005a04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005a08:	e04a      	b.n	8005aa0 <_dtoa_r+0x6d8>
 8005a0a:	bf00      	nop
 8005a0c:	080089d0 	.word	0x080089d0
 8005a10:	080089a8 	.word	0x080089a8
 8005a14:	3ff00000 	.word	0x3ff00000
 8005a18:	40240000 	.word	0x40240000
 8005a1c:	401c0000 	.word	0x401c0000
 8005a20:	40140000 	.word	0x40140000
 8005a24:	3fe00000 	.word	0x3fe00000
 8005a28:	4baf      	ldr	r3, [pc, #700]	; (8005ce8 <_dtoa_r+0x920>)
 8005a2a:	f7fa fde5 	bl	80005f8 <__aeabi_dmul>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	e7ac      	b.n	800598e <_dtoa_r+0x5c6>
 8005a34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005a38:	9d00      	ldr	r5, [sp, #0]
 8005a3a:	4642      	mov	r2, r8
 8005a3c:	464b      	mov	r3, r9
 8005a3e:	4630      	mov	r0, r6
 8005a40:	4639      	mov	r1, r7
 8005a42:	f7fa ff03 	bl	800084c <__aeabi_ddiv>
 8005a46:	f7fb f887 	bl	8000b58 <__aeabi_d2iz>
 8005a4a:	9002      	str	r0, [sp, #8]
 8005a4c:	f7fa fd6a 	bl	8000524 <__aeabi_i2d>
 8005a50:	4642      	mov	r2, r8
 8005a52:	464b      	mov	r3, r9
 8005a54:	f7fa fdd0 	bl	80005f8 <__aeabi_dmul>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	4630      	mov	r0, r6
 8005a5e:	4639      	mov	r1, r7
 8005a60:	f7fa fc12 	bl	8000288 <__aeabi_dsub>
 8005a64:	9e02      	ldr	r6, [sp, #8]
 8005a66:	9f01      	ldr	r7, [sp, #4]
 8005a68:	3630      	adds	r6, #48	; 0x30
 8005a6a:	f805 6b01 	strb.w	r6, [r5], #1
 8005a6e:	9e00      	ldr	r6, [sp, #0]
 8005a70:	1bae      	subs	r6, r5, r6
 8005a72:	42b7      	cmp	r7, r6
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	d137      	bne.n	8005aea <_dtoa_r+0x722>
 8005a7a:	f7fa fc07 	bl	800028c <__adddf3>
 8005a7e:	4642      	mov	r2, r8
 8005a80:	464b      	mov	r3, r9
 8005a82:	4606      	mov	r6, r0
 8005a84:	460f      	mov	r7, r1
 8005a86:	f7fb f847 	bl	8000b18 <__aeabi_dcmpgt>
 8005a8a:	b9c8      	cbnz	r0, 8005ac0 <_dtoa_r+0x6f8>
 8005a8c:	4642      	mov	r2, r8
 8005a8e:	464b      	mov	r3, r9
 8005a90:	4630      	mov	r0, r6
 8005a92:	4639      	mov	r1, r7
 8005a94:	f7fb f818 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a98:	b110      	cbz	r0, 8005aa0 <_dtoa_r+0x6d8>
 8005a9a:	9b02      	ldr	r3, [sp, #8]
 8005a9c:	07d9      	lsls	r1, r3, #31
 8005a9e:	d40f      	bmi.n	8005ac0 <_dtoa_r+0x6f8>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	f000 fe58 	bl	8006758 <_Bfree>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	702b      	strb	r3, [r5, #0]
 8005aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005aae:	f10a 0001 	add.w	r0, sl, #1
 8005ab2:	6018      	str	r0, [r3, #0]
 8005ab4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f43f acd8 	beq.w	800546c <_dtoa_r+0xa4>
 8005abc:	601d      	str	r5, [r3, #0]
 8005abe:	e4d5      	b.n	800546c <_dtoa_r+0xa4>
 8005ac0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	461d      	mov	r5, r3
 8005ac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005acc:	2a39      	cmp	r2, #57	; 0x39
 8005ace:	d108      	bne.n	8005ae2 <_dtoa_r+0x71a>
 8005ad0:	9a00      	ldr	r2, [sp, #0]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d1f7      	bne.n	8005ac6 <_dtoa_r+0x6fe>
 8005ad6:	9a07      	ldr	r2, [sp, #28]
 8005ad8:	9900      	ldr	r1, [sp, #0]
 8005ada:	3201      	adds	r2, #1
 8005adc:	9207      	str	r2, [sp, #28]
 8005ade:	2230      	movs	r2, #48	; 0x30
 8005ae0:	700a      	strb	r2, [r1, #0]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	3201      	adds	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]
 8005ae8:	e78c      	b.n	8005a04 <_dtoa_r+0x63c>
 8005aea:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <_dtoa_r+0x920>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	f7fa fd83 	bl	80005f8 <__aeabi_dmul>
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	4606      	mov	r6, r0
 8005af8:	460f      	mov	r7, r1
 8005afa:	f7fa ffe5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d09b      	beq.n	8005a3a <_dtoa_r+0x672>
 8005b02:	e7cd      	b.n	8005aa0 <_dtoa_r+0x6d8>
 8005b04:	9a08      	ldr	r2, [sp, #32]
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	f000 80c4 	beq.w	8005c94 <_dtoa_r+0x8cc>
 8005b0c:	9a05      	ldr	r2, [sp, #20]
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	f300 80a8 	bgt.w	8005c64 <_dtoa_r+0x89c>
 8005b14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005b16:	2a00      	cmp	r2, #0
 8005b18:	f000 80a0 	beq.w	8005c5c <_dtoa_r+0x894>
 8005b1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b20:	9e06      	ldr	r6, [sp, #24]
 8005b22:	4645      	mov	r5, r8
 8005b24:	9a04      	ldr	r2, [sp, #16]
 8005b26:	2101      	movs	r1, #1
 8005b28:	441a      	add	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	4498      	add	r8, r3
 8005b2e:	9204      	str	r2, [sp, #16]
 8005b30:	f000 ff18 	bl	8006964 <__i2b>
 8005b34:	4607      	mov	r7, r0
 8005b36:	2d00      	cmp	r5, #0
 8005b38:	dd0b      	ble.n	8005b52 <_dtoa_r+0x78a>
 8005b3a:	9b04      	ldr	r3, [sp, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dd08      	ble.n	8005b52 <_dtoa_r+0x78a>
 8005b40:	42ab      	cmp	r3, r5
 8005b42:	9a04      	ldr	r2, [sp, #16]
 8005b44:	bfa8      	it	ge
 8005b46:	462b      	movge	r3, r5
 8005b48:	eba8 0803 	sub.w	r8, r8, r3
 8005b4c:	1aed      	subs	r5, r5, r3
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	9304      	str	r3, [sp, #16]
 8005b52:	9b06      	ldr	r3, [sp, #24]
 8005b54:	b1fb      	cbz	r3, 8005b96 <_dtoa_r+0x7ce>
 8005b56:	9b08      	ldr	r3, [sp, #32]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 809f 	beq.w	8005c9c <_dtoa_r+0x8d4>
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	dd11      	ble.n	8005b86 <_dtoa_r+0x7be>
 8005b62:	4639      	mov	r1, r7
 8005b64:	4632      	mov	r2, r6
 8005b66:	4620      	mov	r0, r4
 8005b68:	f000 ffb8 	bl	8006adc <__pow5mult>
 8005b6c:	465a      	mov	r2, fp
 8005b6e:	4601      	mov	r1, r0
 8005b70:	4607      	mov	r7, r0
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 ff0c 	bl	8006990 <__multiply>
 8005b78:	4659      	mov	r1, fp
 8005b7a:	9007      	str	r0, [sp, #28]
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fdeb 	bl	8006758 <_Bfree>
 8005b82:	9b07      	ldr	r3, [sp, #28]
 8005b84:	469b      	mov	fp, r3
 8005b86:	9b06      	ldr	r3, [sp, #24]
 8005b88:	1b9a      	subs	r2, r3, r6
 8005b8a:	d004      	beq.n	8005b96 <_dtoa_r+0x7ce>
 8005b8c:	4659      	mov	r1, fp
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 ffa4 	bl	8006adc <__pow5mult>
 8005b94:	4683      	mov	fp, r0
 8005b96:	2101      	movs	r1, #1
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 fee3 	bl	8006964 <__i2b>
 8005b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	4606      	mov	r6, r0
 8005ba4:	dd7c      	ble.n	8005ca0 <_dtoa_r+0x8d8>
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4601      	mov	r1, r0
 8005baa:	4620      	mov	r0, r4
 8005bac:	f000 ff96 	bl	8006adc <__pow5mult>
 8005bb0:	9b05      	ldr	r3, [sp, #20]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	4606      	mov	r6, r0
 8005bb6:	dd76      	ble.n	8005ca6 <_dtoa_r+0x8de>
 8005bb8:	2300      	movs	r3, #0
 8005bba:	9306      	str	r3, [sp, #24]
 8005bbc:	6933      	ldr	r3, [r6, #16]
 8005bbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005bc2:	6918      	ldr	r0, [r3, #16]
 8005bc4:	f000 fe7e 	bl	80068c4 <__hi0bits>
 8005bc8:	f1c0 0020 	rsb	r0, r0, #32
 8005bcc:	9b04      	ldr	r3, [sp, #16]
 8005bce:	4418      	add	r0, r3
 8005bd0:	f010 001f 	ands.w	r0, r0, #31
 8005bd4:	f000 8086 	beq.w	8005ce4 <_dtoa_r+0x91c>
 8005bd8:	f1c0 0320 	rsb	r3, r0, #32
 8005bdc:	2b04      	cmp	r3, #4
 8005bde:	dd7f      	ble.n	8005ce0 <_dtoa_r+0x918>
 8005be0:	f1c0 001c 	rsb	r0, r0, #28
 8005be4:	9b04      	ldr	r3, [sp, #16]
 8005be6:	4403      	add	r3, r0
 8005be8:	4480      	add	r8, r0
 8005bea:	4405      	add	r5, r0
 8005bec:	9304      	str	r3, [sp, #16]
 8005bee:	f1b8 0f00 	cmp.w	r8, #0
 8005bf2:	dd05      	ble.n	8005c00 <_dtoa_r+0x838>
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	4642      	mov	r2, r8
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	f000 ffc9 	bl	8006b90 <__lshift>
 8005bfe:	4683      	mov	fp, r0
 8005c00:	9b04      	ldr	r3, [sp, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	dd05      	ble.n	8005c12 <_dtoa_r+0x84a>
 8005c06:	4631      	mov	r1, r6
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4620      	mov	r0, r4
 8005c0c:	f000 ffc0 	bl	8006b90 <__lshift>
 8005c10:	4606      	mov	r6, r0
 8005c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d069      	beq.n	8005cec <_dtoa_r+0x924>
 8005c18:	4631      	mov	r1, r6
 8005c1a:	4658      	mov	r0, fp
 8005c1c:	f001 f824 	bl	8006c68 <__mcmp>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	da63      	bge.n	8005cec <_dtoa_r+0x924>
 8005c24:	2300      	movs	r3, #0
 8005c26:	4659      	mov	r1, fp
 8005c28:	220a      	movs	r2, #10
 8005c2a:	4620      	mov	r0, r4
 8005c2c:	f000 fdb6 	bl	800679c <__multadd>
 8005c30:	9b08      	ldr	r3, [sp, #32]
 8005c32:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005c36:	4683      	mov	fp, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f000 818f 	beq.w	8005f5c <_dtoa_r+0xb94>
 8005c3e:	4639      	mov	r1, r7
 8005c40:	2300      	movs	r3, #0
 8005c42:	220a      	movs	r2, #10
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fda9 	bl	800679c <__multadd>
 8005c4a:	f1b9 0f00 	cmp.w	r9, #0
 8005c4e:	4607      	mov	r7, r0
 8005c50:	f300 808e 	bgt.w	8005d70 <_dtoa_r+0x9a8>
 8005c54:	9b05      	ldr	r3, [sp, #20]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	dc50      	bgt.n	8005cfc <_dtoa_r+0x934>
 8005c5a:	e089      	b.n	8005d70 <_dtoa_r+0x9a8>
 8005c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c62:	e75d      	b.n	8005b20 <_dtoa_r+0x758>
 8005c64:	9b01      	ldr	r3, [sp, #4]
 8005c66:	1e5e      	subs	r6, r3, #1
 8005c68:	9b06      	ldr	r3, [sp, #24]
 8005c6a:	42b3      	cmp	r3, r6
 8005c6c:	bfbf      	itttt	lt
 8005c6e:	9b06      	ldrlt	r3, [sp, #24]
 8005c70:	9606      	strlt	r6, [sp, #24]
 8005c72:	1af2      	sublt	r2, r6, r3
 8005c74:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005c76:	bfb6      	itet	lt
 8005c78:	189b      	addlt	r3, r3, r2
 8005c7a:	1b9e      	subge	r6, r3, r6
 8005c7c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005c7e:	9b01      	ldr	r3, [sp, #4]
 8005c80:	bfb8      	it	lt
 8005c82:	2600      	movlt	r6, #0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfb5      	itete	lt
 8005c88:	eba8 0503 	sublt.w	r5, r8, r3
 8005c8c:	9b01      	ldrge	r3, [sp, #4]
 8005c8e:	2300      	movlt	r3, #0
 8005c90:	4645      	movge	r5, r8
 8005c92:	e747      	b.n	8005b24 <_dtoa_r+0x75c>
 8005c94:	9e06      	ldr	r6, [sp, #24]
 8005c96:	9f08      	ldr	r7, [sp, #32]
 8005c98:	4645      	mov	r5, r8
 8005c9a:	e74c      	b.n	8005b36 <_dtoa_r+0x76e>
 8005c9c:	9a06      	ldr	r2, [sp, #24]
 8005c9e:	e775      	b.n	8005b8c <_dtoa_r+0x7c4>
 8005ca0:	9b05      	ldr	r3, [sp, #20]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	dc18      	bgt.n	8005cd8 <_dtoa_r+0x910>
 8005ca6:	9b02      	ldr	r3, [sp, #8]
 8005ca8:	b9b3      	cbnz	r3, 8005cd8 <_dtoa_r+0x910>
 8005caa:	9b03      	ldr	r3, [sp, #12]
 8005cac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb0:	b9a3      	cbnz	r3, 8005cdc <_dtoa_r+0x914>
 8005cb2:	9b03      	ldr	r3, [sp, #12]
 8005cb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005cb8:	0d1b      	lsrs	r3, r3, #20
 8005cba:	051b      	lsls	r3, r3, #20
 8005cbc:	b12b      	cbz	r3, 8005cca <_dtoa_r+0x902>
 8005cbe:	9b04      	ldr	r3, [sp, #16]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	f108 0801 	add.w	r8, r8, #1
 8005cc8:	2301      	movs	r3, #1
 8005cca:	9306      	str	r3, [sp, #24]
 8005ccc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	f47f af74 	bne.w	8005bbc <_dtoa_r+0x7f4>
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e779      	b.n	8005bcc <_dtoa_r+0x804>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	e7f6      	b.n	8005cca <_dtoa_r+0x902>
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	e7f4      	b.n	8005cca <_dtoa_r+0x902>
 8005ce0:	d085      	beq.n	8005bee <_dtoa_r+0x826>
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	301c      	adds	r0, #28
 8005ce6:	e77d      	b.n	8005be4 <_dtoa_r+0x81c>
 8005ce8:	40240000 	.word	0x40240000
 8005cec:	9b01      	ldr	r3, [sp, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dc38      	bgt.n	8005d64 <_dtoa_r+0x99c>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	dd35      	ble.n	8005d64 <_dtoa_r+0x99c>
 8005cf8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005cfc:	f1b9 0f00 	cmp.w	r9, #0
 8005d00:	d10d      	bne.n	8005d1e <_dtoa_r+0x956>
 8005d02:	4631      	mov	r1, r6
 8005d04:	464b      	mov	r3, r9
 8005d06:	2205      	movs	r2, #5
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fd47 	bl	800679c <__multadd>
 8005d0e:	4601      	mov	r1, r0
 8005d10:	4606      	mov	r6, r0
 8005d12:	4658      	mov	r0, fp
 8005d14:	f000 ffa8 	bl	8006c68 <__mcmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	f73f adbd 	bgt.w	8005898 <_dtoa_r+0x4d0>
 8005d1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d20:	9d00      	ldr	r5, [sp, #0]
 8005d22:	ea6f 0a03 	mvn.w	sl, r3
 8005d26:	f04f 0800 	mov.w	r8, #0
 8005d2a:	4631      	mov	r1, r6
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f000 fd13 	bl	8006758 <_Bfree>
 8005d32:	2f00      	cmp	r7, #0
 8005d34:	f43f aeb4 	beq.w	8005aa0 <_dtoa_r+0x6d8>
 8005d38:	f1b8 0f00 	cmp.w	r8, #0
 8005d3c:	d005      	beq.n	8005d4a <_dtoa_r+0x982>
 8005d3e:	45b8      	cmp	r8, r7
 8005d40:	d003      	beq.n	8005d4a <_dtoa_r+0x982>
 8005d42:	4641      	mov	r1, r8
 8005d44:	4620      	mov	r0, r4
 8005d46:	f000 fd07 	bl	8006758 <_Bfree>
 8005d4a:	4639      	mov	r1, r7
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f000 fd03 	bl	8006758 <_Bfree>
 8005d52:	e6a5      	b.n	8005aa0 <_dtoa_r+0x6d8>
 8005d54:	2600      	movs	r6, #0
 8005d56:	4637      	mov	r7, r6
 8005d58:	e7e1      	b.n	8005d1e <_dtoa_r+0x956>
 8005d5a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005d5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005d60:	4637      	mov	r7, r6
 8005d62:	e599      	b.n	8005898 <_dtoa_r+0x4d0>
 8005d64:	9b08      	ldr	r3, [sp, #32]
 8005d66:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 80fd 	beq.w	8005f6a <_dtoa_r+0xba2>
 8005d70:	2d00      	cmp	r5, #0
 8005d72:	dd05      	ble.n	8005d80 <_dtoa_r+0x9b8>
 8005d74:	4639      	mov	r1, r7
 8005d76:	462a      	mov	r2, r5
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 ff09 	bl	8006b90 <__lshift>
 8005d7e:	4607      	mov	r7, r0
 8005d80:	9b06      	ldr	r3, [sp, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d05c      	beq.n	8005e40 <_dtoa_r+0xa78>
 8005d86:	6879      	ldr	r1, [r7, #4]
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f000 fca5 	bl	80066d8 <_Balloc>
 8005d8e:	4605      	mov	r5, r0
 8005d90:	b928      	cbnz	r0, 8005d9e <_dtoa_r+0x9d6>
 8005d92:	4b80      	ldr	r3, [pc, #512]	; (8005f94 <_dtoa_r+0xbcc>)
 8005d94:	4602      	mov	r2, r0
 8005d96:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d9a:	f7ff bb2e 	b.w	80053fa <_dtoa_r+0x32>
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	3202      	adds	r2, #2
 8005da2:	0092      	lsls	r2, r2, #2
 8005da4:	f107 010c 	add.w	r1, r7, #12
 8005da8:	300c      	adds	r0, #12
 8005daa:	f000 fc87 	bl	80066bc <memcpy>
 8005dae:	2201      	movs	r2, #1
 8005db0:	4629      	mov	r1, r5
 8005db2:	4620      	mov	r0, r4
 8005db4:	f000 feec 	bl	8006b90 <__lshift>
 8005db8:	9b00      	ldr	r3, [sp, #0]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	9b00      	ldr	r3, [sp, #0]
 8005dc0:	444b      	add	r3, r9
 8005dc2:	9307      	str	r3, [sp, #28]
 8005dc4:	9b02      	ldr	r3, [sp, #8]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	46b8      	mov	r8, r7
 8005dcc:	9306      	str	r3, [sp, #24]
 8005dce:	4607      	mov	r7, r0
 8005dd0:	9b01      	ldr	r3, [sp, #4]
 8005dd2:	4631      	mov	r1, r6
 8005dd4:	3b01      	subs	r3, #1
 8005dd6:	4658      	mov	r0, fp
 8005dd8:	9302      	str	r3, [sp, #8]
 8005dda:	f7ff fa67 	bl	80052ac <quorem>
 8005dde:	4603      	mov	r3, r0
 8005de0:	3330      	adds	r3, #48	; 0x30
 8005de2:	9004      	str	r0, [sp, #16]
 8005de4:	4641      	mov	r1, r8
 8005de6:	4658      	mov	r0, fp
 8005de8:	9308      	str	r3, [sp, #32]
 8005dea:	f000 ff3d 	bl	8006c68 <__mcmp>
 8005dee:	463a      	mov	r2, r7
 8005df0:	4681      	mov	r9, r0
 8005df2:	4631      	mov	r1, r6
 8005df4:	4620      	mov	r0, r4
 8005df6:	f000 ff53 	bl	8006ca0 <__mdiff>
 8005dfa:	68c2      	ldr	r2, [r0, #12]
 8005dfc:	9b08      	ldr	r3, [sp, #32]
 8005dfe:	4605      	mov	r5, r0
 8005e00:	bb02      	cbnz	r2, 8005e44 <_dtoa_r+0xa7c>
 8005e02:	4601      	mov	r1, r0
 8005e04:	4658      	mov	r0, fp
 8005e06:	f000 ff2f 	bl	8006c68 <__mcmp>
 8005e0a:	9b08      	ldr	r3, [sp, #32]
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4629      	mov	r1, r5
 8005e10:	4620      	mov	r0, r4
 8005e12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005e16:	f000 fc9f 	bl	8006758 <_Bfree>
 8005e1a:	9b05      	ldr	r3, [sp, #20]
 8005e1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e1e:	9d01      	ldr	r5, [sp, #4]
 8005e20:	ea43 0102 	orr.w	r1, r3, r2
 8005e24:	9b06      	ldr	r3, [sp, #24]
 8005e26:	430b      	orrs	r3, r1
 8005e28:	9b08      	ldr	r3, [sp, #32]
 8005e2a:	d10d      	bne.n	8005e48 <_dtoa_r+0xa80>
 8005e2c:	2b39      	cmp	r3, #57	; 0x39
 8005e2e:	d029      	beq.n	8005e84 <_dtoa_r+0xabc>
 8005e30:	f1b9 0f00 	cmp.w	r9, #0
 8005e34:	dd01      	ble.n	8005e3a <_dtoa_r+0xa72>
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	3331      	adds	r3, #49	; 0x31
 8005e3a:	9a02      	ldr	r2, [sp, #8]
 8005e3c:	7013      	strb	r3, [r2, #0]
 8005e3e:	e774      	b.n	8005d2a <_dtoa_r+0x962>
 8005e40:	4638      	mov	r0, r7
 8005e42:	e7b9      	b.n	8005db8 <_dtoa_r+0x9f0>
 8005e44:	2201      	movs	r2, #1
 8005e46:	e7e2      	b.n	8005e0e <_dtoa_r+0xa46>
 8005e48:	f1b9 0f00 	cmp.w	r9, #0
 8005e4c:	db06      	blt.n	8005e5c <_dtoa_r+0xa94>
 8005e4e:	9905      	ldr	r1, [sp, #20]
 8005e50:	ea41 0909 	orr.w	r9, r1, r9
 8005e54:	9906      	ldr	r1, [sp, #24]
 8005e56:	ea59 0101 	orrs.w	r1, r9, r1
 8005e5a:	d120      	bne.n	8005e9e <_dtoa_r+0xad6>
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	ddec      	ble.n	8005e3a <_dtoa_r+0xa72>
 8005e60:	4659      	mov	r1, fp
 8005e62:	2201      	movs	r2, #1
 8005e64:	4620      	mov	r0, r4
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	f000 fe92 	bl	8006b90 <__lshift>
 8005e6c:	4631      	mov	r1, r6
 8005e6e:	4683      	mov	fp, r0
 8005e70:	f000 fefa 	bl	8006c68 <__mcmp>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	9b01      	ldr	r3, [sp, #4]
 8005e78:	dc02      	bgt.n	8005e80 <_dtoa_r+0xab8>
 8005e7a:	d1de      	bne.n	8005e3a <_dtoa_r+0xa72>
 8005e7c:	07da      	lsls	r2, r3, #31
 8005e7e:	d5dc      	bpl.n	8005e3a <_dtoa_r+0xa72>
 8005e80:	2b39      	cmp	r3, #57	; 0x39
 8005e82:	d1d8      	bne.n	8005e36 <_dtoa_r+0xa6e>
 8005e84:	9a02      	ldr	r2, [sp, #8]
 8005e86:	2339      	movs	r3, #57	; 0x39
 8005e88:	7013      	strb	r3, [r2, #0]
 8005e8a:	462b      	mov	r3, r5
 8005e8c:	461d      	mov	r5, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e94:	2a39      	cmp	r2, #57	; 0x39
 8005e96:	d050      	beq.n	8005f3a <_dtoa_r+0xb72>
 8005e98:	3201      	adds	r2, #1
 8005e9a:	701a      	strb	r2, [r3, #0]
 8005e9c:	e745      	b.n	8005d2a <_dtoa_r+0x962>
 8005e9e:	2a00      	cmp	r2, #0
 8005ea0:	dd03      	ble.n	8005eaa <_dtoa_r+0xae2>
 8005ea2:	2b39      	cmp	r3, #57	; 0x39
 8005ea4:	d0ee      	beq.n	8005e84 <_dtoa_r+0xabc>
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	e7c7      	b.n	8005e3a <_dtoa_r+0xa72>
 8005eaa:	9a01      	ldr	r2, [sp, #4]
 8005eac:	9907      	ldr	r1, [sp, #28]
 8005eae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005eb2:	428a      	cmp	r2, r1
 8005eb4:	d02a      	beq.n	8005f0c <_dtoa_r+0xb44>
 8005eb6:	4659      	mov	r1, fp
 8005eb8:	2300      	movs	r3, #0
 8005eba:	220a      	movs	r2, #10
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	f000 fc6d 	bl	800679c <__multadd>
 8005ec2:	45b8      	cmp	r8, r7
 8005ec4:	4683      	mov	fp, r0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f04f 020a 	mov.w	r2, #10
 8005ece:	4641      	mov	r1, r8
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	d107      	bne.n	8005ee4 <_dtoa_r+0xb1c>
 8005ed4:	f000 fc62 	bl	800679c <__multadd>
 8005ed8:	4680      	mov	r8, r0
 8005eda:	4607      	mov	r7, r0
 8005edc:	9b01      	ldr	r3, [sp, #4]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	9301      	str	r3, [sp, #4]
 8005ee2:	e775      	b.n	8005dd0 <_dtoa_r+0xa08>
 8005ee4:	f000 fc5a 	bl	800679c <__multadd>
 8005ee8:	4639      	mov	r1, r7
 8005eea:	4680      	mov	r8, r0
 8005eec:	2300      	movs	r3, #0
 8005eee:	220a      	movs	r2, #10
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 fc53 	bl	800679c <__multadd>
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	e7f0      	b.n	8005edc <_dtoa_r+0xb14>
 8005efa:	f1b9 0f00 	cmp.w	r9, #0
 8005efe:	9a00      	ldr	r2, [sp, #0]
 8005f00:	bfcc      	ite	gt
 8005f02:	464d      	movgt	r5, r9
 8005f04:	2501      	movle	r5, #1
 8005f06:	4415      	add	r5, r2
 8005f08:	f04f 0800 	mov.w	r8, #0
 8005f0c:	4659      	mov	r1, fp
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4620      	mov	r0, r4
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	f000 fe3c 	bl	8006b90 <__lshift>
 8005f18:	4631      	mov	r1, r6
 8005f1a:	4683      	mov	fp, r0
 8005f1c:	f000 fea4 	bl	8006c68 <__mcmp>
 8005f20:	2800      	cmp	r0, #0
 8005f22:	dcb2      	bgt.n	8005e8a <_dtoa_r+0xac2>
 8005f24:	d102      	bne.n	8005f2c <_dtoa_r+0xb64>
 8005f26:	9b01      	ldr	r3, [sp, #4]
 8005f28:	07db      	lsls	r3, r3, #31
 8005f2a:	d4ae      	bmi.n	8005e8a <_dtoa_r+0xac2>
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	461d      	mov	r5, r3
 8005f30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f34:	2a30      	cmp	r2, #48	; 0x30
 8005f36:	d0fa      	beq.n	8005f2e <_dtoa_r+0xb66>
 8005f38:	e6f7      	b.n	8005d2a <_dtoa_r+0x962>
 8005f3a:	9a00      	ldr	r2, [sp, #0]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1a5      	bne.n	8005e8c <_dtoa_r+0xac4>
 8005f40:	f10a 0a01 	add.w	sl, sl, #1
 8005f44:	2331      	movs	r3, #49	; 0x31
 8005f46:	e779      	b.n	8005e3c <_dtoa_r+0xa74>
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <_dtoa_r+0xbd0>)
 8005f4a:	f7ff baaf 	b.w	80054ac <_dtoa_r+0xe4>
 8005f4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f47f aa86 	bne.w	8005462 <_dtoa_r+0x9a>
 8005f56:	4b11      	ldr	r3, [pc, #68]	; (8005f9c <_dtoa_r+0xbd4>)
 8005f58:	f7ff baa8 	b.w	80054ac <_dtoa_r+0xe4>
 8005f5c:	f1b9 0f00 	cmp.w	r9, #0
 8005f60:	dc03      	bgt.n	8005f6a <_dtoa_r+0xba2>
 8005f62:	9b05      	ldr	r3, [sp, #20]
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	f73f aec9 	bgt.w	8005cfc <_dtoa_r+0x934>
 8005f6a:	9d00      	ldr	r5, [sp, #0]
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4658      	mov	r0, fp
 8005f70:	f7ff f99c 	bl	80052ac <quorem>
 8005f74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005f78:	f805 3b01 	strb.w	r3, [r5], #1
 8005f7c:	9a00      	ldr	r2, [sp, #0]
 8005f7e:	1aaa      	subs	r2, r5, r2
 8005f80:	4591      	cmp	r9, r2
 8005f82:	ddba      	ble.n	8005efa <_dtoa_r+0xb32>
 8005f84:	4659      	mov	r1, fp
 8005f86:	2300      	movs	r3, #0
 8005f88:	220a      	movs	r2, #10
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 fc06 	bl	800679c <__multadd>
 8005f90:	4683      	mov	fp, r0
 8005f92:	e7eb      	b.n	8005f6c <_dtoa_r+0xba4>
 8005f94:	080088b4 	.word	0x080088b4
 8005f98:	080086b4 	.word	0x080086b4
 8005f9c:	08008831 	.word	0x08008831

08005fa0 <rshift>:
 8005fa0:	6903      	ldr	r3, [r0, #16]
 8005fa2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005fa6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005faa:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005fae:	f100 0414 	add.w	r4, r0, #20
 8005fb2:	dd45      	ble.n	8006040 <rshift+0xa0>
 8005fb4:	f011 011f 	ands.w	r1, r1, #31
 8005fb8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005fbc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005fc0:	d10c      	bne.n	8005fdc <rshift+0x3c>
 8005fc2:	f100 0710 	add.w	r7, r0, #16
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	42b1      	cmp	r1, r6
 8005fca:	d334      	bcc.n	8006036 <rshift+0x96>
 8005fcc:	1a9b      	subs	r3, r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	1eea      	subs	r2, r5, #3
 8005fd2:	4296      	cmp	r6, r2
 8005fd4:	bf38      	it	cc
 8005fd6:	2300      	movcc	r3, #0
 8005fd8:	4423      	add	r3, r4
 8005fda:	e015      	b.n	8006008 <rshift+0x68>
 8005fdc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005fe0:	f1c1 0820 	rsb	r8, r1, #32
 8005fe4:	40cf      	lsrs	r7, r1
 8005fe6:	f105 0e04 	add.w	lr, r5, #4
 8005fea:	46a1      	mov	r9, r4
 8005fec:	4576      	cmp	r6, lr
 8005fee:	46f4      	mov	ip, lr
 8005ff0:	d815      	bhi.n	800601e <rshift+0x7e>
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	009a      	lsls	r2, r3, #2
 8005ff6:	3a04      	subs	r2, #4
 8005ff8:	3501      	adds	r5, #1
 8005ffa:	42ae      	cmp	r6, r5
 8005ffc:	bf38      	it	cc
 8005ffe:	2200      	movcc	r2, #0
 8006000:	18a3      	adds	r3, r4, r2
 8006002:	50a7      	str	r7, [r4, r2]
 8006004:	b107      	cbz	r7, 8006008 <rshift+0x68>
 8006006:	3304      	adds	r3, #4
 8006008:	1b1a      	subs	r2, r3, r4
 800600a:	42a3      	cmp	r3, r4
 800600c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006010:	bf08      	it	eq
 8006012:	2300      	moveq	r3, #0
 8006014:	6102      	str	r2, [r0, #16]
 8006016:	bf08      	it	eq
 8006018:	6143      	streq	r3, [r0, #20]
 800601a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800601e:	f8dc c000 	ldr.w	ip, [ip]
 8006022:	fa0c fc08 	lsl.w	ip, ip, r8
 8006026:	ea4c 0707 	orr.w	r7, ip, r7
 800602a:	f849 7b04 	str.w	r7, [r9], #4
 800602e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006032:	40cf      	lsrs	r7, r1
 8006034:	e7da      	b.n	8005fec <rshift+0x4c>
 8006036:	f851 cb04 	ldr.w	ip, [r1], #4
 800603a:	f847 cf04 	str.w	ip, [r7, #4]!
 800603e:	e7c3      	b.n	8005fc8 <rshift+0x28>
 8006040:	4623      	mov	r3, r4
 8006042:	e7e1      	b.n	8006008 <rshift+0x68>

08006044 <__hexdig_fun>:
 8006044:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006048:	2b09      	cmp	r3, #9
 800604a:	d802      	bhi.n	8006052 <__hexdig_fun+0xe>
 800604c:	3820      	subs	r0, #32
 800604e:	b2c0      	uxtb	r0, r0
 8006050:	4770      	bx	lr
 8006052:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006056:	2b05      	cmp	r3, #5
 8006058:	d801      	bhi.n	800605e <__hexdig_fun+0x1a>
 800605a:	3847      	subs	r0, #71	; 0x47
 800605c:	e7f7      	b.n	800604e <__hexdig_fun+0xa>
 800605e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006062:	2b05      	cmp	r3, #5
 8006064:	d801      	bhi.n	800606a <__hexdig_fun+0x26>
 8006066:	3827      	subs	r0, #39	; 0x27
 8006068:	e7f1      	b.n	800604e <__hexdig_fun+0xa>
 800606a:	2000      	movs	r0, #0
 800606c:	4770      	bx	lr
	...

08006070 <__gethex>:
 8006070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006074:	ed2d 8b02 	vpush	{d8}
 8006078:	b089      	sub	sp, #36	; 0x24
 800607a:	ee08 0a10 	vmov	s16, r0
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	4bbc      	ldr	r3, [pc, #752]	; (8006374 <__gethex+0x304>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	9301      	str	r3, [sp, #4]
 8006086:	4618      	mov	r0, r3
 8006088:	468b      	mov	fp, r1
 800608a:	4690      	mov	r8, r2
 800608c:	f7fa f8a0 	bl	80001d0 <strlen>
 8006090:	9b01      	ldr	r3, [sp, #4]
 8006092:	f8db 2000 	ldr.w	r2, [fp]
 8006096:	4403      	add	r3, r0
 8006098:	4682      	mov	sl, r0
 800609a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800609e:	9305      	str	r3, [sp, #20]
 80060a0:	1c93      	adds	r3, r2, #2
 80060a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80060a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80060aa:	32fe      	adds	r2, #254	; 0xfe
 80060ac:	18d1      	adds	r1, r2, r3
 80060ae:	461f      	mov	r7, r3
 80060b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80060b4:	9100      	str	r1, [sp, #0]
 80060b6:	2830      	cmp	r0, #48	; 0x30
 80060b8:	d0f8      	beq.n	80060ac <__gethex+0x3c>
 80060ba:	f7ff ffc3 	bl	8006044 <__hexdig_fun>
 80060be:	4604      	mov	r4, r0
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d13a      	bne.n	800613a <__gethex+0xca>
 80060c4:	9901      	ldr	r1, [sp, #4]
 80060c6:	4652      	mov	r2, sl
 80060c8:	4638      	mov	r0, r7
 80060ca:	f001 f9ed 	bl	80074a8 <strncmp>
 80060ce:	4605      	mov	r5, r0
 80060d0:	2800      	cmp	r0, #0
 80060d2:	d168      	bne.n	80061a6 <__gethex+0x136>
 80060d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 80060d8:	eb07 060a 	add.w	r6, r7, sl
 80060dc:	f7ff ffb2 	bl	8006044 <__hexdig_fun>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	d062      	beq.n	80061aa <__gethex+0x13a>
 80060e4:	4633      	mov	r3, r6
 80060e6:	7818      	ldrb	r0, [r3, #0]
 80060e8:	2830      	cmp	r0, #48	; 0x30
 80060ea:	461f      	mov	r7, r3
 80060ec:	f103 0301 	add.w	r3, r3, #1
 80060f0:	d0f9      	beq.n	80060e6 <__gethex+0x76>
 80060f2:	f7ff ffa7 	bl	8006044 <__hexdig_fun>
 80060f6:	2301      	movs	r3, #1
 80060f8:	fab0 f480 	clz	r4, r0
 80060fc:	0964      	lsrs	r4, r4, #5
 80060fe:	4635      	mov	r5, r6
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	463a      	mov	r2, r7
 8006104:	4616      	mov	r6, r2
 8006106:	3201      	adds	r2, #1
 8006108:	7830      	ldrb	r0, [r6, #0]
 800610a:	f7ff ff9b 	bl	8006044 <__hexdig_fun>
 800610e:	2800      	cmp	r0, #0
 8006110:	d1f8      	bne.n	8006104 <__gethex+0x94>
 8006112:	9901      	ldr	r1, [sp, #4]
 8006114:	4652      	mov	r2, sl
 8006116:	4630      	mov	r0, r6
 8006118:	f001 f9c6 	bl	80074a8 <strncmp>
 800611c:	b980      	cbnz	r0, 8006140 <__gethex+0xd0>
 800611e:	b94d      	cbnz	r5, 8006134 <__gethex+0xc4>
 8006120:	eb06 050a 	add.w	r5, r6, sl
 8006124:	462a      	mov	r2, r5
 8006126:	4616      	mov	r6, r2
 8006128:	3201      	adds	r2, #1
 800612a:	7830      	ldrb	r0, [r6, #0]
 800612c:	f7ff ff8a 	bl	8006044 <__hexdig_fun>
 8006130:	2800      	cmp	r0, #0
 8006132:	d1f8      	bne.n	8006126 <__gethex+0xb6>
 8006134:	1bad      	subs	r5, r5, r6
 8006136:	00ad      	lsls	r5, r5, #2
 8006138:	e004      	b.n	8006144 <__gethex+0xd4>
 800613a:	2400      	movs	r4, #0
 800613c:	4625      	mov	r5, r4
 800613e:	e7e0      	b.n	8006102 <__gethex+0x92>
 8006140:	2d00      	cmp	r5, #0
 8006142:	d1f7      	bne.n	8006134 <__gethex+0xc4>
 8006144:	7833      	ldrb	r3, [r6, #0]
 8006146:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800614a:	2b50      	cmp	r3, #80	; 0x50
 800614c:	d13b      	bne.n	80061c6 <__gethex+0x156>
 800614e:	7873      	ldrb	r3, [r6, #1]
 8006150:	2b2b      	cmp	r3, #43	; 0x2b
 8006152:	d02c      	beq.n	80061ae <__gethex+0x13e>
 8006154:	2b2d      	cmp	r3, #45	; 0x2d
 8006156:	d02e      	beq.n	80061b6 <__gethex+0x146>
 8006158:	1c71      	adds	r1, r6, #1
 800615a:	f04f 0900 	mov.w	r9, #0
 800615e:	7808      	ldrb	r0, [r1, #0]
 8006160:	f7ff ff70 	bl	8006044 <__hexdig_fun>
 8006164:	1e43      	subs	r3, r0, #1
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b18      	cmp	r3, #24
 800616a:	d82c      	bhi.n	80061c6 <__gethex+0x156>
 800616c:	f1a0 0210 	sub.w	r2, r0, #16
 8006170:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006174:	f7ff ff66 	bl	8006044 <__hexdig_fun>
 8006178:	1e43      	subs	r3, r0, #1
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b18      	cmp	r3, #24
 800617e:	d91d      	bls.n	80061bc <__gethex+0x14c>
 8006180:	f1b9 0f00 	cmp.w	r9, #0
 8006184:	d000      	beq.n	8006188 <__gethex+0x118>
 8006186:	4252      	negs	r2, r2
 8006188:	4415      	add	r5, r2
 800618a:	f8cb 1000 	str.w	r1, [fp]
 800618e:	b1e4      	cbz	r4, 80061ca <__gethex+0x15a>
 8006190:	9b00      	ldr	r3, [sp, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	bf14      	ite	ne
 8006196:	2700      	movne	r7, #0
 8006198:	2706      	moveq	r7, #6
 800619a:	4638      	mov	r0, r7
 800619c:	b009      	add	sp, #36	; 0x24
 800619e:	ecbd 8b02 	vpop	{d8}
 80061a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a6:	463e      	mov	r6, r7
 80061a8:	4625      	mov	r5, r4
 80061aa:	2401      	movs	r4, #1
 80061ac:	e7ca      	b.n	8006144 <__gethex+0xd4>
 80061ae:	f04f 0900 	mov.w	r9, #0
 80061b2:	1cb1      	adds	r1, r6, #2
 80061b4:	e7d3      	b.n	800615e <__gethex+0xee>
 80061b6:	f04f 0901 	mov.w	r9, #1
 80061ba:	e7fa      	b.n	80061b2 <__gethex+0x142>
 80061bc:	230a      	movs	r3, #10
 80061be:	fb03 0202 	mla	r2, r3, r2, r0
 80061c2:	3a10      	subs	r2, #16
 80061c4:	e7d4      	b.n	8006170 <__gethex+0x100>
 80061c6:	4631      	mov	r1, r6
 80061c8:	e7df      	b.n	800618a <__gethex+0x11a>
 80061ca:	1bf3      	subs	r3, r6, r7
 80061cc:	3b01      	subs	r3, #1
 80061ce:	4621      	mov	r1, r4
 80061d0:	2b07      	cmp	r3, #7
 80061d2:	dc0b      	bgt.n	80061ec <__gethex+0x17c>
 80061d4:	ee18 0a10 	vmov	r0, s16
 80061d8:	f000 fa7e 	bl	80066d8 <_Balloc>
 80061dc:	4604      	mov	r4, r0
 80061de:	b940      	cbnz	r0, 80061f2 <__gethex+0x182>
 80061e0:	4b65      	ldr	r3, [pc, #404]	; (8006378 <__gethex+0x308>)
 80061e2:	4602      	mov	r2, r0
 80061e4:	21de      	movs	r1, #222	; 0xde
 80061e6:	4865      	ldr	r0, [pc, #404]	; (800637c <__gethex+0x30c>)
 80061e8:	f001 f97e 	bl	80074e8 <__assert_func>
 80061ec:	3101      	adds	r1, #1
 80061ee:	105b      	asrs	r3, r3, #1
 80061f0:	e7ee      	b.n	80061d0 <__gethex+0x160>
 80061f2:	f100 0914 	add.w	r9, r0, #20
 80061f6:	f04f 0b00 	mov.w	fp, #0
 80061fa:	f1ca 0301 	rsb	r3, sl, #1
 80061fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8006202:	f8cd b000 	str.w	fp, [sp]
 8006206:	9306      	str	r3, [sp, #24]
 8006208:	42b7      	cmp	r7, r6
 800620a:	d340      	bcc.n	800628e <__gethex+0x21e>
 800620c:	9802      	ldr	r0, [sp, #8]
 800620e:	9b00      	ldr	r3, [sp, #0]
 8006210:	f840 3b04 	str.w	r3, [r0], #4
 8006214:	eba0 0009 	sub.w	r0, r0, r9
 8006218:	1080      	asrs	r0, r0, #2
 800621a:	0146      	lsls	r6, r0, #5
 800621c:	6120      	str	r0, [r4, #16]
 800621e:	4618      	mov	r0, r3
 8006220:	f000 fb50 	bl	80068c4 <__hi0bits>
 8006224:	1a30      	subs	r0, r6, r0
 8006226:	f8d8 6000 	ldr.w	r6, [r8]
 800622a:	42b0      	cmp	r0, r6
 800622c:	dd63      	ble.n	80062f6 <__gethex+0x286>
 800622e:	1b87      	subs	r7, r0, r6
 8006230:	4639      	mov	r1, r7
 8006232:	4620      	mov	r0, r4
 8006234:	f000 feea 	bl	800700c <__any_on>
 8006238:	4682      	mov	sl, r0
 800623a:	b1a8      	cbz	r0, 8006268 <__gethex+0x1f8>
 800623c:	1e7b      	subs	r3, r7, #1
 800623e:	1159      	asrs	r1, r3, #5
 8006240:	f003 021f 	and.w	r2, r3, #31
 8006244:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006248:	f04f 0a01 	mov.w	sl, #1
 800624c:	fa0a f202 	lsl.w	r2, sl, r2
 8006250:	420a      	tst	r2, r1
 8006252:	d009      	beq.n	8006268 <__gethex+0x1f8>
 8006254:	4553      	cmp	r3, sl
 8006256:	dd05      	ble.n	8006264 <__gethex+0x1f4>
 8006258:	1eb9      	subs	r1, r7, #2
 800625a:	4620      	mov	r0, r4
 800625c:	f000 fed6 	bl	800700c <__any_on>
 8006260:	2800      	cmp	r0, #0
 8006262:	d145      	bne.n	80062f0 <__gethex+0x280>
 8006264:	f04f 0a02 	mov.w	sl, #2
 8006268:	4639      	mov	r1, r7
 800626a:	4620      	mov	r0, r4
 800626c:	f7ff fe98 	bl	8005fa0 <rshift>
 8006270:	443d      	add	r5, r7
 8006272:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006276:	42ab      	cmp	r3, r5
 8006278:	da4c      	bge.n	8006314 <__gethex+0x2a4>
 800627a:	ee18 0a10 	vmov	r0, s16
 800627e:	4621      	mov	r1, r4
 8006280:	f000 fa6a 	bl	8006758 <_Bfree>
 8006284:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006286:	2300      	movs	r3, #0
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	27a3      	movs	r7, #163	; 0xa3
 800628c:	e785      	b.n	800619a <__gethex+0x12a>
 800628e:	1e73      	subs	r3, r6, #1
 8006290:	9a05      	ldr	r2, [sp, #20]
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006298:	4293      	cmp	r3, r2
 800629a:	d019      	beq.n	80062d0 <__gethex+0x260>
 800629c:	f1bb 0f20 	cmp.w	fp, #32
 80062a0:	d107      	bne.n	80062b2 <__gethex+0x242>
 80062a2:	9b02      	ldr	r3, [sp, #8]
 80062a4:	9a00      	ldr	r2, [sp, #0]
 80062a6:	f843 2b04 	str.w	r2, [r3], #4
 80062aa:	9302      	str	r3, [sp, #8]
 80062ac:	2300      	movs	r3, #0
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	469b      	mov	fp, r3
 80062b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80062b6:	f7ff fec5 	bl	8006044 <__hexdig_fun>
 80062ba:	9b00      	ldr	r3, [sp, #0]
 80062bc:	f000 000f 	and.w	r0, r0, #15
 80062c0:	fa00 f00b 	lsl.w	r0, r0, fp
 80062c4:	4303      	orrs	r3, r0
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	f10b 0b04 	add.w	fp, fp, #4
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	e00d      	b.n	80062ec <__gethex+0x27c>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	9a06      	ldr	r2, [sp, #24]
 80062d4:	4413      	add	r3, r2
 80062d6:	42bb      	cmp	r3, r7
 80062d8:	d3e0      	bcc.n	800629c <__gethex+0x22c>
 80062da:	4618      	mov	r0, r3
 80062dc:	9901      	ldr	r1, [sp, #4]
 80062de:	9307      	str	r3, [sp, #28]
 80062e0:	4652      	mov	r2, sl
 80062e2:	f001 f8e1 	bl	80074a8 <strncmp>
 80062e6:	9b07      	ldr	r3, [sp, #28]
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d1d7      	bne.n	800629c <__gethex+0x22c>
 80062ec:	461e      	mov	r6, r3
 80062ee:	e78b      	b.n	8006208 <__gethex+0x198>
 80062f0:	f04f 0a03 	mov.w	sl, #3
 80062f4:	e7b8      	b.n	8006268 <__gethex+0x1f8>
 80062f6:	da0a      	bge.n	800630e <__gethex+0x29e>
 80062f8:	1a37      	subs	r7, r6, r0
 80062fa:	4621      	mov	r1, r4
 80062fc:	ee18 0a10 	vmov	r0, s16
 8006300:	463a      	mov	r2, r7
 8006302:	f000 fc45 	bl	8006b90 <__lshift>
 8006306:	1bed      	subs	r5, r5, r7
 8006308:	4604      	mov	r4, r0
 800630a:	f100 0914 	add.w	r9, r0, #20
 800630e:	f04f 0a00 	mov.w	sl, #0
 8006312:	e7ae      	b.n	8006272 <__gethex+0x202>
 8006314:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006318:	42a8      	cmp	r0, r5
 800631a:	dd72      	ble.n	8006402 <__gethex+0x392>
 800631c:	1b45      	subs	r5, r0, r5
 800631e:	42ae      	cmp	r6, r5
 8006320:	dc36      	bgt.n	8006390 <__gethex+0x320>
 8006322:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d02a      	beq.n	8006380 <__gethex+0x310>
 800632a:	2b03      	cmp	r3, #3
 800632c:	d02c      	beq.n	8006388 <__gethex+0x318>
 800632e:	2b01      	cmp	r3, #1
 8006330:	d115      	bne.n	800635e <__gethex+0x2ee>
 8006332:	42ae      	cmp	r6, r5
 8006334:	d113      	bne.n	800635e <__gethex+0x2ee>
 8006336:	2e01      	cmp	r6, #1
 8006338:	d10b      	bne.n	8006352 <__gethex+0x2e2>
 800633a:	9a04      	ldr	r2, [sp, #16]
 800633c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	2301      	movs	r3, #1
 8006344:	6123      	str	r3, [r4, #16]
 8006346:	f8c9 3000 	str.w	r3, [r9]
 800634a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800634c:	2762      	movs	r7, #98	; 0x62
 800634e:	601c      	str	r4, [r3, #0]
 8006350:	e723      	b.n	800619a <__gethex+0x12a>
 8006352:	1e71      	subs	r1, r6, #1
 8006354:	4620      	mov	r0, r4
 8006356:	f000 fe59 	bl	800700c <__any_on>
 800635a:	2800      	cmp	r0, #0
 800635c:	d1ed      	bne.n	800633a <__gethex+0x2ca>
 800635e:	ee18 0a10 	vmov	r0, s16
 8006362:	4621      	mov	r1, r4
 8006364:	f000 f9f8 	bl	8006758 <_Bfree>
 8006368:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800636a:	2300      	movs	r3, #0
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	2750      	movs	r7, #80	; 0x50
 8006370:	e713      	b.n	800619a <__gethex+0x12a>
 8006372:	bf00      	nop
 8006374:	08008930 	.word	0x08008930
 8006378:	080088b4 	.word	0x080088b4
 800637c:	080088c5 	.word	0x080088c5
 8006380:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1eb      	bne.n	800635e <__gethex+0x2ee>
 8006386:	e7d8      	b.n	800633a <__gethex+0x2ca>
 8006388:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1d5      	bne.n	800633a <__gethex+0x2ca>
 800638e:	e7e6      	b.n	800635e <__gethex+0x2ee>
 8006390:	1e6f      	subs	r7, r5, #1
 8006392:	f1ba 0f00 	cmp.w	sl, #0
 8006396:	d131      	bne.n	80063fc <__gethex+0x38c>
 8006398:	b127      	cbz	r7, 80063a4 <__gethex+0x334>
 800639a:	4639      	mov	r1, r7
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fe35 	bl	800700c <__any_on>
 80063a2:	4682      	mov	sl, r0
 80063a4:	117b      	asrs	r3, r7, #5
 80063a6:	2101      	movs	r1, #1
 80063a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80063ac:	f007 071f 	and.w	r7, r7, #31
 80063b0:	fa01 f707 	lsl.w	r7, r1, r7
 80063b4:	421f      	tst	r7, r3
 80063b6:	4629      	mov	r1, r5
 80063b8:	4620      	mov	r0, r4
 80063ba:	bf18      	it	ne
 80063bc:	f04a 0a02 	orrne.w	sl, sl, #2
 80063c0:	1b76      	subs	r6, r6, r5
 80063c2:	f7ff fded 	bl	8005fa0 <rshift>
 80063c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80063ca:	2702      	movs	r7, #2
 80063cc:	f1ba 0f00 	cmp.w	sl, #0
 80063d0:	d048      	beq.n	8006464 <__gethex+0x3f4>
 80063d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d015      	beq.n	8006406 <__gethex+0x396>
 80063da:	2b03      	cmp	r3, #3
 80063dc:	d017      	beq.n	800640e <__gethex+0x39e>
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d109      	bne.n	80063f6 <__gethex+0x386>
 80063e2:	f01a 0f02 	tst.w	sl, #2
 80063e6:	d006      	beq.n	80063f6 <__gethex+0x386>
 80063e8:	f8d9 0000 	ldr.w	r0, [r9]
 80063ec:	ea4a 0a00 	orr.w	sl, sl, r0
 80063f0:	f01a 0f01 	tst.w	sl, #1
 80063f4:	d10e      	bne.n	8006414 <__gethex+0x3a4>
 80063f6:	f047 0710 	orr.w	r7, r7, #16
 80063fa:	e033      	b.n	8006464 <__gethex+0x3f4>
 80063fc:	f04f 0a01 	mov.w	sl, #1
 8006400:	e7d0      	b.n	80063a4 <__gethex+0x334>
 8006402:	2701      	movs	r7, #1
 8006404:	e7e2      	b.n	80063cc <__gethex+0x35c>
 8006406:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006408:	f1c3 0301 	rsb	r3, r3, #1
 800640c:	9315      	str	r3, [sp, #84]	; 0x54
 800640e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006410:	2b00      	cmp	r3, #0
 8006412:	d0f0      	beq.n	80063f6 <__gethex+0x386>
 8006414:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006418:	f104 0314 	add.w	r3, r4, #20
 800641c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006420:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006424:	f04f 0c00 	mov.w	ip, #0
 8006428:	4618      	mov	r0, r3
 800642a:	f853 2b04 	ldr.w	r2, [r3], #4
 800642e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8006432:	d01c      	beq.n	800646e <__gethex+0x3fe>
 8006434:	3201      	adds	r2, #1
 8006436:	6002      	str	r2, [r0, #0]
 8006438:	2f02      	cmp	r7, #2
 800643a:	f104 0314 	add.w	r3, r4, #20
 800643e:	d13f      	bne.n	80064c0 <__gethex+0x450>
 8006440:	f8d8 2000 	ldr.w	r2, [r8]
 8006444:	3a01      	subs	r2, #1
 8006446:	42b2      	cmp	r2, r6
 8006448:	d10a      	bne.n	8006460 <__gethex+0x3f0>
 800644a:	1171      	asrs	r1, r6, #5
 800644c:	2201      	movs	r2, #1
 800644e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006452:	f006 061f 	and.w	r6, r6, #31
 8006456:	fa02 f606 	lsl.w	r6, r2, r6
 800645a:	421e      	tst	r6, r3
 800645c:	bf18      	it	ne
 800645e:	4617      	movne	r7, r2
 8006460:	f047 0720 	orr.w	r7, r7, #32
 8006464:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006466:	601c      	str	r4, [r3, #0]
 8006468:	9b04      	ldr	r3, [sp, #16]
 800646a:	601d      	str	r5, [r3, #0]
 800646c:	e695      	b.n	800619a <__gethex+0x12a>
 800646e:	4299      	cmp	r1, r3
 8006470:	f843 cc04 	str.w	ip, [r3, #-4]
 8006474:	d8d8      	bhi.n	8006428 <__gethex+0x3b8>
 8006476:	68a3      	ldr	r3, [r4, #8]
 8006478:	459b      	cmp	fp, r3
 800647a:	db19      	blt.n	80064b0 <__gethex+0x440>
 800647c:	6861      	ldr	r1, [r4, #4]
 800647e:	ee18 0a10 	vmov	r0, s16
 8006482:	3101      	adds	r1, #1
 8006484:	f000 f928 	bl	80066d8 <_Balloc>
 8006488:	4681      	mov	r9, r0
 800648a:	b918      	cbnz	r0, 8006494 <__gethex+0x424>
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <__gethex+0x488>)
 800648e:	4602      	mov	r2, r0
 8006490:	2184      	movs	r1, #132	; 0x84
 8006492:	e6a8      	b.n	80061e6 <__gethex+0x176>
 8006494:	6922      	ldr	r2, [r4, #16]
 8006496:	3202      	adds	r2, #2
 8006498:	f104 010c 	add.w	r1, r4, #12
 800649c:	0092      	lsls	r2, r2, #2
 800649e:	300c      	adds	r0, #12
 80064a0:	f000 f90c 	bl	80066bc <memcpy>
 80064a4:	4621      	mov	r1, r4
 80064a6:	ee18 0a10 	vmov	r0, s16
 80064aa:	f000 f955 	bl	8006758 <_Bfree>
 80064ae:	464c      	mov	r4, r9
 80064b0:	6923      	ldr	r3, [r4, #16]
 80064b2:	1c5a      	adds	r2, r3, #1
 80064b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064b8:	6122      	str	r2, [r4, #16]
 80064ba:	2201      	movs	r2, #1
 80064bc:	615a      	str	r2, [r3, #20]
 80064be:	e7bb      	b.n	8006438 <__gethex+0x3c8>
 80064c0:	6922      	ldr	r2, [r4, #16]
 80064c2:	455a      	cmp	r2, fp
 80064c4:	dd0b      	ble.n	80064de <__gethex+0x46e>
 80064c6:	2101      	movs	r1, #1
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7ff fd69 	bl	8005fa0 <rshift>
 80064ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80064d2:	3501      	adds	r5, #1
 80064d4:	42ab      	cmp	r3, r5
 80064d6:	f6ff aed0 	blt.w	800627a <__gethex+0x20a>
 80064da:	2701      	movs	r7, #1
 80064dc:	e7c0      	b.n	8006460 <__gethex+0x3f0>
 80064de:	f016 061f 	ands.w	r6, r6, #31
 80064e2:	d0fa      	beq.n	80064da <__gethex+0x46a>
 80064e4:	449a      	add	sl, r3
 80064e6:	f1c6 0620 	rsb	r6, r6, #32
 80064ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80064ee:	f000 f9e9 	bl	80068c4 <__hi0bits>
 80064f2:	42b0      	cmp	r0, r6
 80064f4:	dbe7      	blt.n	80064c6 <__gethex+0x456>
 80064f6:	e7f0      	b.n	80064da <__gethex+0x46a>
 80064f8:	080088b4 	.word	0x080088b4

080064fc <L_shift>:
 80064fc:	f1c2 0208 	rsb	r2, r2, #8
 8006500:	0092      	lsls	r2, r2, #2
 8006502:	b570      	push	{r4, r5, r6, lr}
 8006504:	f1c2 0620 	rsb	r6, r2, #32
 8006508:	6843      	ldr	r3, [r0, #4]
 800650a:	6804      	ldr	r4, [r0, #0]
 800650c:	fa03 f506 	lsl.w	r5, r3, r6
 8006510:	432c      	orrs	r4, r5
 8006512:	40d3      	lsrs	r3, r2
 8006514:	6004      	str	r4, [r0, #0]
 8006516:	f840 3f04 	str.w	r3, [r0, #4]!
 800651a:	4288      	cmp	r0, r1
 800651c:	d3f4      	bcc.n	8006508 <L_shift+0xc>
 800651e:	bd70      	pop	{r4, r5, r6, pc}

08006520 <__match>:
 8006520:	b530      	push	{r4, r5, lr}
 8006522:	6803      	ldr	r3, [r0, #0]
 8006524:	3301      	adds	r3, #1
 8006526:	f811 4b01 	ldrb.w	r4, [r1], #1
 800652a:	b914      	cbnz	r4, 8006532 <__match+0x12>
 800652c:	6003      	str	r3, [r0, #0]
 800652e:	2001      	movs	r0, #1
 8006530:	bd30      	pop	{r4, r5, pc}
 8006532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006536:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800653a:	2d19      	cmp	r5, #25
 800653c:	bf98      	it	ls
 800653e:	3220      	addls	r2, #32
 8006540:	42a2      	cmp	r2, r4
 8006542:	d0f0      	beq.n	8006526 <__match+0x6>
 8006544:	2000      	movs	r0, #0
 8006546:	e7f3      	b.n	8006530 <__match+0x10>

08006548 <__hexnan>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	680b      	ldr	r3, [r1, #0]
 800654e:	6801      	ldr	r1, [r0, #0]
 8006550:	115e      	asrs	r6, r3, #5
 8006552:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006556:	f013 031f 	ands.w	r3, r3, #31
 800655a:	b087      	sub	sp, #28
 800655c:	bf18      	it	ne
 800655e:	3604      	addne	r6, #4
 8006560:	2500      	movs	r5, #0
 8006562:	1f37      	subs	r7, r6, #4
 8006564:	4682      	mov	sl, r0
 8006566:	4690      	mov	r8, r2
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	f846 5c04 	str.w	r5, [r6, #-4]
 800656e:	46b9      	mov	r9, r7
 8006570:	463c      	mov	r4, r7
 8006572:	9502      	str	r5, [sp, #8]
 8006574:	46ab      	mov	fp, r5
 8006576:	784a      	ldrb	r2, [r1, #1]
 8006578:	1c4b      	adds	r3, r1, #1
 800657a:	9303      	str	r3, [sp, #12]
 800657c:	b342      	cbz	r2, 80065d0 <__hexnan+0x88>
 800657e:	4610      	mov	r0, r2
 8006580:	9105      	str	r1, [sp, #20]
 8006582:	9204      	str	r2, [sp, #16]
 8006584:	f7ff fd5e 	bl	8006044 <__hexdig_fun>
 8006588:	2800      	cmp	r0, #0
 800658a:	d14f      	bne.n	800662c <__hexnan+0xe4>
 800658c:	9a04      	ldr	r2, [sp, #16]
 800658e:	9905      	ldr	r1, [sp, #20]
 8006590:	2a20      	cmp	r2, #32
 8006592:	d818      	bhi.n	80065c6 <__hexnan+0x7e>
 8006594:	9b02      	ldr	r3, [sp, #8]
 8006596:	459b      	cmp	fp, r3
 8006598:	dd13      	ble.n	80065c2 <__hexnan+0x7a>
 800659a:	454c      	cmp	r4, r9
 800659c:	d206      	bcs.n	80065ac <__hexnan+0x64>
 800659e:	2d07      	cmp	r5, #7
 80065a0:	dc04      	bgt.n	80065ac <__hexnan+0x64>
 80065a2:	462a      	mov	r2, r5
 80065a4:	4649      	mov	r1, r9
 80065a6:	4620      	mov	r0, r4
 80065a8:	f7ff ffa8 	bl	80064fc <L_shift>
 80065ac:	4544      	cmp	r4, r8
 80065ae:	d950      	bls.n	8006652 <__hexnan+0x10a>
 80065b0:	2300      	movs	r3, #0
 80065b2:	f1a4 0904 	sub.w	r9, r4, #4
 80065b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80065ba:	f8cd b008 	str.w	fp, [sp, #8]
 80065be:	464c      	mov	r4, r9
 80065c0:	461d      	mov	r5, r3
 80065c2:	9903      	ldr	r1, [sp, #12]
 80065c4:	e7d7      	b.n	8006576 <__hexnan+0x2e>
 80065c6:	2a29      	cmp	r2, #41	; 0x29
 80065c8:	d156      	bne.n	8006678 <__hexnan+0x130>
 80065ca:	3102      	adds	r1, #2
 80065cc:	f8ca 1000 	str.w	r1, [sl]
 80065d0:	f1bb 0f00 	cmp.w	fp, #0
 80065d4:	d050      	beq.n	8006678 <__hexnan+0x130>
 80065d6:	454c      	cmp	r4, r9
 80065d8:	d206      	bcs.n	80065e8 <__hexnan+0xa0>
 80065da:	2d07      	cmp	r5, #7
 80065dc:	dc04      	bgt.n	80065e8 <__hexnan+0xa0>
 80065de:	462a      	mov	r2, r5
 80065e0:	4649      	mov	r1, r9
 80065e2:	4620      	mov	r0, r4
 80065e4:	f7ff ff8a 	bl	80064fc <L_shift>
 80065e8:	4544      	cmp	r4, r8
 80065ea:	d934      	bls.n	8006656 <__hexnan+0x10e>
 80065ec:	f1a8 0204 	sub.w	r2, r8, #4
 80065f0:	4623      	mov	r3, r4
 80065f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80065f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80065fa:	429f      	cmp	r7, r3
 80065fc:	d2f9      	bcs.n	80065f2 <__hexnan+0xaa>
 80065fe:	1b3b      	subs	r3, r7, r4
 8006600:	f023 0303 	bic.w	r3, r3, #3
 8006604:	3304      	adds	r3, #4
 8006606:	3401      	adds	r4, #1
 8006608:	3e03      	subs	r6, #3
 800660a:	42b4      	cmp	r4, r6
 800660c:	bf88      	it	hi
 800660e:	2304      	movhi	r3, #4
 8006610:	4443      	add	r3, r8
 8006612:	2200      	movs	r2, #0
 8006614:	f843 2b04 	str.w	r2, [r3], #4
 8006618:	429f      	cmp	r7, r3
 800661a:	d2fb      	bcs.n	8006614 <__hexnan+0xcc>
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	b91b      	cbnz	r3, 8006628 <__hexnan+0xe0>
 8006620:	4547      	cmp	r7, r8
 8006622:	d127      	bne.n	8006674 <__hexnan+0x12c>
 8006624:	2301      	movs	r3, #1
 8006626:	603b      	str	r3, [r7, #0]
 8006628:	2005      	movs	r0, #5
 800662a:	e026      	b.n	800667a <__hexnan+0x132>
 800662c:	3501      	adds	r5, #1
 800662e:	2d08      	cmp	r5, #8
 8006630:	f10b 0b01 	add.w	fp, fp, #1
 8006634:	dd06      	ble.n	8006644 <__hexnan+0xfc>
 8006636:	4544      	cmp	r4, r8
 8006638:	d9c3      	bls.n	80065c2 <__hexnan+0x7a>
 800663a:	2300      	movs	r3, #0
 800663c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006640:	2501      	movs	r5, #1
 8006642:	3c04      	subs	r4, #4
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	f000 000f 	and.w	r0, r0, #15
 800664a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800664e:	6022      	str	r2, [r4, #0]
 8006650:	e7b7      	b.n	80065c2 <__hexnan+0x7a>
 8006652:	2508      	movs	r5, #8
 8006654:	e7b5      	b.n	80065c2 <__hexnan+0x7a>
 8006656:	9b01      	ldr	r3, [sp, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0df      	beq.n	800661c <__hexnan+0xd4>
 800665c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006660:	f1c3 0320 	rsb	r3, r3, #32
 8006664:	fa22 f303 	lsr.w	r3, r2, r3
 8006668:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800666c:	401a      	ands	r2, r3
 800666e:	f846 2c04 	str.w	r2, [r6, #-4]
 8006672:	e7d3      	b.n	800661c <__hexnan+0xd4>
 8006674:	3f04      	subs	r7, #4
 8006676:	e7d1      	b.n	800661c <__hexnan+0xd4>
 8006678:	2004      	movs	r0, #4
 800667a:	b007      	add	sp, #28
 800667c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006680 <_localeconv_r>:
 8006680:	4800      	ldr	r0, [pc, #0]	; (8006684 <_localeconv_r+0x4>)
 8006682:	4770      	bx	lr
 8006684:	20000170 	.word	0x20000170

08006688 <malloc>:
 8006688:	4b02      	ldr	r3, [pc, #8]	; (8006694 <malloc+0xc>)
 800668a:	4601      	mov	r1, r0
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	f000 bd3d 	b.w	800710c <_malloc_r>
 8006692:	bf00      	nop
 8006694:	20000018 	.word	0x20000018

08006698 <__ascii_mbtowc>:
 8006698:	b082      	sub	sp, #8
 800669a:	b901      	cbnz	r1, 800669e <__ascii_mbtowc+0x6>
 800669c:	a901      	add	r1, sp, #4
 800669e:	b142      	cbz	r2, 80066b2 <__ascii_mbtowc+0x1a>
 80066a0:	b14b      	cbz	r3, 80066b6 <__ascii_mbtowc+0x1e>
 80066a2:	7813      	ldrb	r3, [r2, #0]
 80066a4:	600b      	str	r3, [r1, #0]
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	1e10      	subs	r0, r2, #0
 80066aa:	bf18      	it	ne
 80066ac:	2001      	movne	r0, #1
 80066ae:	b002      	add	sp, #8
 80066b0:	4770      	bx	lr
 80066b2:	4610      	mov	r0, r2
 80066b4:	e7fb      	b.n	80066ae <__ascii_mbtowc+0x16>
 80066b6:	f06f 0001 	mvn.w	r0, #1
 80066ba:	e7f8      	b.n	80066ae <__ascii_mbtowc+0x16>

080066bc <memcpy>:
 80066bc:	440a      	add	r2, r1
 80066be:	4291      	cmp	r1, r2
 80066c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80066c4:	d100      	bne.n	80066c8 <memcpy+0xc>
 80066c6:	4770      	bx	lr
 80066c8:	b510      	push	{r4, lr}
 80066ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d2:	4291      	cmp	r1, r2
 80066d4:	d1f9      	bne.n	80066ca <memcpy+0xe>
 80066d6:	bd10      	pop	{r4, pc}

080066d8 <_Balloc>:
 80066d8:	b570      	push	{r4, r5, r6, lr}
 80066da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80066dc:	4604      	mov	r4, r0
 80066de:	460d      	mov	r5, r1
 80066e0:	b976      	cbnz	r6, 8006700 <_Balloc+0x28>
 80066e2:	2010      	movs	r0, #16
 80066e4:	f7ff ffd0 	bl	8006688 <malloc>
 80066e8:	4602      	mov	r2, r0
 80066ea:	6260      	str	r0, [r4, #36]	; 0x24
 80066ec:	b920      	cbnz	r0, 80066f8 <_Balloc+0x20>
 80066ee:	4b18      	ldr	r3, [pc, #96]	; (8006750 <_Balloc+0x78>)
 80066f0:	4818      	ldr	r0, [pc, #96]	; (8006754 <_Balloc+0x7c>)
 80066f2:	2166      	movs	r1, #102	; 0x66
 80066f4:	f000 fef8 	bl	80074e8 <__assert_func>
 80066f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066fc:	6006      	str	r6, [r0, #0]
 80066fe:	60c6      	str	r6, [r0, #12]
 8006700:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006702:	68f3      	ldr	r3, [r6, #12]
 8006704:	b183      	cbz	r3, 8006728 <_Balloc+0x50>
 8006706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800670e:	b9b8      	cbnz	r0, 8006740 <_Balloc+0x68>
 8006710:	2101      	movs	r1, #1
 8006712:	fa01 f605 	lsl.w	r6, r1, r5
 8006716:	1d72      	adds	r2, r6, #5
 8006718:	0092      	lsls	r2, r2, #2
 800671a:	4620      	mov	r0, r4
 800671c:	f000 fc97 	bl	800704e <_calloc_r>
 8006720:	b160      	cbz	r0, 800673c <_Balloc+0x64>
 8006722:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006726:	e00e      	b.n	8006746 <_Balloc+0x6e>
 8006728:	2221      	movs	r2, #33	; 0x21
 800672a:	2104      	movs	r1, #4
 800672c:	4620      	mov	r0, r4
 800672e:	f000 fc8e 	bl	800704e <_calloc_r>
 8006732:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006734:	60f0      	str	r0, [r6, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1e4      	bne.n	8006706 <_Balloc+0x2e>
 800673c:	2000      	movs	r0, #0
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	6802      	ldr	r2, [r0, #0]
 8006742:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006746:	2300      	movs	r3, #0
 8006748:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800674c:	e7f7      	b.n	800673e <_Balloc+0x66>
 800674e:	bf00      	nop
 8006750:	0800883e 	.word	0x0800883e
 8006754:	08008944 	.word	0x08008944

08006758 <_Bfree>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800675c:	4605      	mov	r5, r0
 800675e:	460c      	mov	r4, r1
 8006760:	b976      	cbnz	r6, 8006780 <_Bfree+0x28>
 8006762:	2010      	movs	r0, #16
 8006764:	f7ff ff90 	bl	8006688 <malloc>
 8006768:	4602      	mov	r2, r0
 800676a:	6268      	str	r0, [r5, #36]	; 0x24
 800676c:	b920      	cbnz	r0, 8006778 <_Bfree+0x20>
 800676e:	4b09      	ldr	r3, [pc, #36]	; (8006794 <_Bfree+0x3c>)
 8006770:	4809      	ldr	r0, [pc, #36]	; (8006798 <_Bfree+0x40>)
 8006772:	218a      	movs	r1, #138	; 0x8a
 8006774:	f000 feb8 	bl	80074e8 <__assert_func>
 8006778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800677c:	6006      	str	r6, [r0, #0]
 800677e:	60c6      	str	r6, [r0, #12]
 8006780:	b13c      	cbz	r4, 8006792 <_Bfree+0x3a>
 8006782:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006784:	6862      	ldr	r2, [r4, #4]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800678c:	6021      	str	r1, [r4, #0]
 800678e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006792:	bd70      	pop	{r4, r5, r6, pc}
 8006794:	0800883e 	.word	0x0800883e
 8006798:	08008944 	.word	0x08008944

0800679c <__multadd>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	690e      	ldr	r6, [r1, #16]
 80067a2:	4607      	mov	r7, r0
 80067a4:	4698      	mov	r8, r3
 80067a6:	460c      	mov	r4, r1
 80067a8:	f101 0014 	add.w	r0, r1, #20
 80067ac:	2300      	movs	r3, #0
 80067ae:	6805      	ldr	r5, [r0, #0]
 80067b0:	b2a9      	uxth	r1, r5
 80067b2:	fb02 8101 	mla	r1, r2, r1, r8
 80067b6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80067ba:	0c2d      	lsrs	r5, r5, #16
 80067bc:	fb02 c505 	mla	r5, r2, r5, ip
 80067c0:	b289      	uxth	r1, r1
 80067c2:	3301      	adds	r3, #1
 80067c4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80067c8:	429e      	cmp	r6, r3
 80067ca:	f840 1b04 	str.w	r1, [r0], #4
 80067ce:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80067d2:	dcec      	bgt.n	80067ae <__multadd+0x12>
 80067d4:	f1b8 0f00 	cmp.w	r8, #0
 80067d8:	d022      	beq.n	8006820 <__multadd+0x84>
 80067da:	68a3      	ldr	r3, [r4, #8]
 80067dc:	42b3      	cmp	r3, r6
 80067de:	dc19      	bgt.n	8006814 <__multadd+0x78>
 80067e0:	6861      	ldr	r1, [r4, #4]
 80067e2:	4638      	mov	r0, r7
 80067e4:	3101      	adds	r1, #1
 80067e6:	f7ff ff77 	bl	80066d8 <_Balloc>
 80067ea:	4605      	mov	r5, r0
 80067ec:	b928      	cbnz	r0, 80067fa <__multadd+0x5e>
 80067ee:	4602      	mov	r2, r0
 80067f0:	4b0d      	ldr	r3, [pc, #52]	; (8006828 <__multadd+0x8c>)
 80067f2:	480e      	ldr	r0, [pc, #56]	; (800682c <__multadd+0x90>)
 80067f4:	21b5      	movs	r1, #181	; 0xb5
 80067f6:	f000 fe77 	bl	80074e8 <__assert_func>
 80067fa:	6922      	ldr	r2, [r4, #16]
 80067fc:	3202      	adds	r2, #2
 80067fe:	f104 010c 	add.w	r1, r4, #12
 8006802:	0092      	lsls	r2, r2, #2
 8006804:	300c      	adds	r0, #12
 8006806:	f7ff ff59 	bl	80066bc <memcpy>
 800680a:	4621      	mov	r1, r4
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ffa3 	bl	8006758 <_Bfree>
 8006812:	462c      	mov	r4, r5
 8006814:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006818:	3601      	adds	r6, #1
 800681a:	f8c3 8014 	str.w	r8, [r3, #20]
 800681e:	6126      	str	r6, [r4, #16]
 8006820:	4620      	mov	r0, r4
 8006822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006826:	bf00      	nop
 8006828:	080088b4 	.word	0x080088b4
 800682c:	08008944 	.word	0x08008944

08006830 <__s2b>:
 8006830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006834:	460c      	mov	r4, r1
 8006836:	4615      	mov	r5, r2
 8006838:	461f      	mov	r7, r3
 800683a:	2209      	movs	r2, #9
 800683c:	3308      	adds	r3, #8
 800683e:	4606      	mov	r6, r0
 8006840:	fb93 f3f2 	sdiv	r3, r3, r2
 8006844:	2100      	movs	r1, #0
 8006846:	2201      	movs	r2, #1
 8006848:	429a      	cmp	r2, r3
 800684a:	db09      	blt.n	8006860 <__s2b+0x30>
 800684c:	4630      	mov	r0, r6
 800684e:	f7ff ff43 	bl	80066d8 <_Balloc>
 8006852:	b940      	cbnz	r0, 8006866 <__s2b+0x36>
 8006854:	4602      	mov	r2, r0
 8006856:	4b19      	ldr	r3, [pc, #100]	; (80068bc <__s2b+0x8c>)
 8006858:	4819      	ldr	r0, [pc, #100]	; (80068c0 <__s2b+0x90>)
 800685a:	21ce      	movs	r1, #206	; 0xce
 800685c:	f000 fe44 	bl	80074e8 <__assert_func>
 8006860:	0052      	lsls	r2, r2, #1
 8006862:	3101      	adds	r1, #1
 8006864:	e7f0      	b.n	8006848 <__s2b+0x18>
 8006866:	9b08      	ldr	r3, [sp, #32]
 8006868:	6143      	str	r3, [r0, #20]
 800686a:	2d09      	cmp	r5, #9
 800686c:	f04f 0301 	mov.w	r3, #1
 8006870:	6103      	str	r3, [r0, #16]
 8006872:	dd16      	ble.n	80068a2 <__s2b+0x72>
 8006874:	f104 0909 	add.w	r9, r4, #9
 8006878:	46c8      	mov	r8, r9
 800687a:	442c      	add	r4, r5
 800687c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006880:	4601      	mov	r1, r0
 8006882:	3b30      	subs	r3, #48	; 0x30
 8006884:	220a      	movs	r2, #10
 8006886:	4630      	mov	r0, r6
 8006888:	f7ff ff88 	bl	800679c <__multadd>
 800688c:	45a0      	cmp	r8, r4
 800688e:	d1f5      	bne.n	800687c <__s2b+0x4c>
 8006890:	f1a5 0408 	sub.w	r4, r5, #8
 8006894:	444c      	add	r4, r9
 8006896:	1b2d      	subs	r5, r5, r4
 8006898:	1963      	adds	r3, r4, r5
 800689a:	42bb      	cmp	r3, r7
 800689c:	db04      	blt.n	80068a8 <__s2b+0x78>
 800689e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068a2:	340a      	adds	r4, #10
 80068a4:	2509      	movs	r5, #9
 80068a6:	e7f6      	b.n	8006896 <__s2b+0x66>
 80068a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068ac:	4601      	mov	r1, r0
 80068ae:	3b30      	subs	r3, #48	; 0x30
 80068b0:	220a      	movs	r2, #10
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7ff ff72 	bl	800679c <__multadd>
 80068b8:	e7ee      	b.n	8006898 <__s2b+0x68>
 80068ba:	bf00      	nop
 80068bc:	080088b4 	.word	0x080088b4
 80068c0:	08008944 	.word	0x08008944

080068c4 <__hi0bits>:
 80068c4:	0c03      	lsrs	r3, r0, #16
 80068c6:	041b      	lsls	r3, r3, #16
 80068c8:	b9d3      	cbnz	r3, 8006900 <__hi0bits+0x3c>
 80068ca:	0400      	lsls	r0, r0, #16
 80068cc:	2310      	movs	r3, #16
 80068ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80068d2:	bf04      	itt	eq
 80068d4:	0200      	lsleq	r0, r0, #8
 80068d6:	3308      	addeq	r3, #8
 80068d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80068dc:	bf04      	itt	eq
 80068de:	0100      	lsleq	r0, r0, #4
 80068e0:	3304      	addeq	r3, #4
 80068e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80068e6:	bf04      	itt	eq
 80068e8:	0080      	lsleq	r0, r0, #2
 80068ea:	3302      	addeq	r3, #2
 80068ec:	2800      	cmp	r0, #0
 80068ee:	db05      	blt.n	80068fc <__hi0bits+0x38>
 80068f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80068f4:	f103 0301 	add.w	r3, r3, #1
 80068f8:	bf08      	it	eq
 80068fa:	2320      	moveq	r3, #32
 80068fc:	4618      	mov	r0, r3
 80068fe:	4770      	bx	lr
 8006900:	2300      	movs	r3, #0
 8006902:	e7e4      	b.n	80068ce <__hi0bits+0xa>

08006904 <__lo0bits>:
 8006904:	6803      	ldr	r3, [r0, #0]
 8006906:	f013 0207 	ands.w	r2, r3, #7
 800690a:	4601      	mov	r1, r0
 800690c:	d00b      	beq.n	8006926 <__lo0bits+0x22>
 800690e:	07da      	lsls	r2, r3, #31
 8006910:	d424      	bmi.n	800695c <__lo0bits+0x58>
 8006912:	0798      	lsls	r0, r3, #30
 8006914:	bf49      	itett	mi
 8006916:	085b      	lsrmi	r3, r3, #1
 8006918:	089b      	lsrpl	r3, r3, #2
 800691a:	2001      	movmi	r0, #1
 800691c:	600b      	strmi	r3, [r1, #0]
 800691e:	bf5c      	itt	pl
 8006920:	600b      	strpl	r3, [r1, #0]
 8006922:	2002      	movpl	r0, #2
 8006924:	4770      	bx	lr
 8006926:	b298      	uxth	r0, r3
 8006928:	b9b0      	cbnz	r0, 8006958 <__lo0bits+0x54>
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	2010      	movs	r0, #16
 800692e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006932:	bf04      	itt	eq
 8006934:	0a1b      	lsreq	r3, r3, #8
 8006936:	3008      	addeq	r0, #8
 8006938:	071a      	lsls	r2, r3, #28
 800693a:	bf04      	itt	eq
 800693c:	091b      	lsreq	r3, r3, #4
 800693e:	3004      	addeq	r0, #4
 8006940:	079a      	lsls	r2, r3, #30
 8006942:	bf04      	itt	eq
 8006944:	089b      	lsreq	r3, r3, #2
 8006946:	3002      	addeq	r0, #2
 8006948:	07da      	lsls	r2, r3, #31
 800694a:	d403      	bmi.n	8006954 <__lo0bits+0x50>
 800694c:	085b      	lsrs	r3, r3, #1
 800694e:	f100 0001 	add.w	r0, r0, #1
 8006952:	d005      	beq.n	8006960 <__lo0bits+0x5c>
 8006954:	600b      	str	r3, [r1, #0]
 8006956:	4770      	bx	lr
 8006958:	4610      	mov	r0, r2
 800695a:	e7e8      	b.n	800692e <__lo0bits+0x2a>
 800695c:	2000      	movs	r0, #0
 800695e:	4770      	bx	lr
 8006960:	2020      	movs	r0, #32
 8006962:	4770      	bx	lr

08006964 <__i2b>:
 8006964:	b510      	push	{r4, lr}
 8006966:	460c      	mov	r4, r1
 8006968:	2101      	movs	r1, #1
 800696a:	f7ff feb5 	bl	80066d8 <_Balloc>
 800696e:	4602      	mov	r2, r0
 8006970:	b928      	cbnz	r0, 800697e <__i2b+0x1a>
 8006972:	4b05      	ldr	r3, [pc, #20]	; (8006988 <__i2b+0x24>)
 8006974:	4805      	ldr	r0, [pc, #20]	; (800698c <__i2b+0x28>)
 8006976:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800697a:	f000 fdb5 	bl	80074e8 <__assert_func>
 800697e:	2301      	movs	r3, #1
 8006980:	6144      	str	r4, [r0, #20]
 8006982:	6103      	str	r3, [r0, #16]
 8006984:	bd10      	pop	{r4, pc}
 8006986:	bf00      	nop
 8006988:	080088b4 	.word	0x080088b4
 800698c:	08008944 	.word	0x08008944

08006990 <__multiply>:
 8006990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006994:	4614      	mov	r4, r2
 8006996:	690a      	ldr	r2, [r1, #16]
 8006998:	6923      	ldr	r3, [r4, #16]
 800699a:	429a      	cmp	r2, r3
 800699c:	bfb8      	it	lt
 800699e:	460b      	movlt	r3, r1
 80069a0:	460d      	mov	r5, r1
 80069a2:	bfbc      	itt	lt
 80069a4:	4625      	movlt	r5, r4
 80069a6:	461c      	movlt	r4, r3
 80069a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80069ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80069b0:	68ab      	ldr	r3, [r5, #8]
 80069b2:	6869      	ldr	r1, [r5, #4]
 80069b4:	eb0a 0709 	add.w	r7, sl, r9
 80069b8:	42bb      	cmp	r3, r7
 80069ba:	b085      	sub	sp, #20
 80069bc:	bfb8      	it	lt
 80069be:	3101      	addlt	r1, #1
 80069c0:	f7ff fe8a 	bl	80066d8 <_Balloc>
 80069c4:	b930      	cbnz	r0, 80069d4 <__multiply+0x44>
 80069c6:	4602      	mov	r2, r0
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <__multiply+0x144>)
 80069ca:	4843      	ldr	r0, [pc, #268]	; (8006ad8 <__multiply+0x148>)
 80069cc:	f240 115d 	movw	r1, #349	; 0x15d
 80069d0:	f000 fd8a 	bl	80074e8 <__assert_func>
 80069d4:	f100 0614 	add.w	r6, r0, #20
 80069d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80069dc:	4633      	mov	r3, r6
 80069de:	2200      	movs	r2, #0
 80069e0:	4543      	cmp	r3, r8
 80069e2:	d31e      	bcc.n	8006a22 <__multiply+0x92>
 80069e4:	f105 0c14 	add.w	ip, r5, #20
 80069e8:	f104 0314 	add.w	r3, r4, #20
 80069ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80069f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80069f4:	9202      	str	r2, [sp, #8]
 80069f6:	ebac 0205 	sub.w	r2, ip, r5
 80069fa:	3a15      	subs	r2, #21
 80069fc:	f022 0203 	bic.w	r2, r2, #3
 8006a00:	3204      	adds	r2, #4
 8006a02:	f105 0115 	add.w	r1, r5, #21
 8006a06:	458c      	cmp	ip, r1
 8006a08:	bf38      	it	cc
 8006a0a:	2204      	movcc	r2, #4
 8006a0c:	9201      	str	r2, [sp, #4]
 8006a0e:	9a02      	ldr	r2, [sp, #8]
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d808      	bhi.n	8006a28 <__multiply+0x98>
 8006a16:	2f00      	cmp	r7, #0
 8006a18:	dc55      	bgt.n	8006ac6 <__multiply+0x136>
 8006a1a:	6107      	str	r7, [r0, #16]
 8006a1c:	b005      	add	sp, #20
 8006a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a22:	f843 2b04 	str.w	r2, [r3], #4
 8006a26:	e7db      	b.n	80069e0 <__multiply+0x50>
 8006a28:	f8b3 a000 	ldrh.w	sl, [r3]
 8006a2c:	f1ba 0f00 	cmp.w	sl, #0
 8006a30:	d020      	beq.n	8006a74 <__multiply+0xe4>
 8006a32:	f105 0e14 	add.w	lr, r5, #20
 8006a36:	46b1      	mov	r9, r6
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006a3e:	f8d9 b000 	ldr.w	fp, [r9]
 8006a42:	b2a1      	uxth	r1, r4
 8006a44:	fa1f fb8b 	uxth.w	fp, fp
 8006a48:	fb0a b101 	mla	r1, sl, r1, fp
 8006a4c:	4411      	add	r1, r2
 8006a4e:	f8d9 2000 	ldr.w	r2, [r9]
 8006a52:	0c24      	lsrs	r4, r4, #16
 8006a54:	0c12      	lsrs	r2, r2, #16
 8006a56:	fb0a 2404 	mla	r4, sl, r4, r2
 8006a5a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006a5e:	b289      	uxth	r1, r1
 8006a60:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006a64:	45f4      	cmp	ip, lr
 8006a66:	f849 1b04 	str.w	r1, [r9], #4
 8006a6a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006a6e:	d8e4      	bhi.n	8006a3a <__multiply+0xaa>
 8006a70:	9901      	ldr	r1, [sp, #4]
 8006a72:	5072      	str	r2, [r6, r1]
 8006a74:	9a03      	ldr	r2, [sp, #12]
 8006a76:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	f1b9 0f00 	cmp.w	r9, #0
 8006a80:	d01f      	beq.n	8006ac2 <__multiply+0x132>
 8006a82:	6834      	ldr	r4, [r6, #0]
 8006a84:	f105 0114 	add.w	r1, r5, #20
 8006a88:	46b6      	mov	lr, r6
 8006a8a:	f04f 0a00 	mov.w	sl, #0
 8006a8e:	880a      	ldrh	r2, [r1, #0]
 8006a90:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006a94:	fb09 b202 	mla	r2, r9, r2, fp
 8006a98:	4492      	add	sl, r2
 8006a9a:	b2a4      	uxth	r4, r4
 8006a9c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006aa0:	f84e 4b04 	str.w	r4, [lr], #4
 8006aa4:	f851 4b04 	ldr.w	r4, [r1], #4
 8006aa8:	f8be 2000 	ldrh.w	r2, [lr]
 8006aac:	0c24      	lsrs	r4, r4, #16
 8006aae:	fb09 2404 	mla	r4, r9, r4, r2
 8006ab2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006ab6:	458c      	cmp	ip, r1
 8006ab8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006abc:	d8e7      	bhi.n	8006a8e <__multiply+0xfe>
 8006abe:	9a01      	ldr	r2, [sp, #4]
 8006ac0:	50b4      	str	r4, [r6, r2]
 8006ac2:	3604      	adds	r6, #4
 8006ac4:	e7a3      	b.n	8006a0e <__multiply+0x7e>
 8006ac6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1a5      	bne.n	8006a1a <__multiply+0x8a>
 8006ace:	3f01      	subs	r7, #1
 8006ad0:	e7a1      	b.n	8006a16 <__multiply+0x86>
 8006ad2:	bf00      	nop
 8006ad4:	080088b4 	.word	0x080088b4
 8006ad8:	08008944 	.word	0x08008944

08006adc <__pow5mult>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4615      	mov	r5, r2
 8006ae2:	f012 0203 	ands.w	r2, r2, #3
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	460f      	mov	r7, r1
 8006aea:	d007      	beq.n	8006afc <__pow5mult+0x20>
 8006aec:	4c25      	ldr	r4, [pc, #148]	; (8006b84 <__pow5mult+0xa8>)
 8006aee:	3a01      	subs	r2, #1
 8006af0:	2300      	movs	r3, #0
 8006af2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006af6:	f7ff fe51 	bl	800679c <__multadd>
 8006afa:	4607      	mov	r7, r0
 8006afc:	10ad      	asrs	r5, r5, #2
 8006afe:	d03d      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b00:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b02:	b97c      	cbnz	r4, 8006b24 <__pow5mult+0x48>
 8006b04:	2010      	movs	r0, #16
 8006b06:	f7ff fdbf 	bl	8006688 <malloc>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	6270      	str	r0, [r6, #36]	; 0x24
 8006b0e:	b928      	cbnz	r0, 8006b1c <__pow5mult+0x40>
 8006b10:	4b1d      	ldr	r3, [pc, #116]	; (8006b88 <__pow5mult+0xac>)
 8006b12:	481e      	ldr	r0, [pc, #120]	; (8006b8c <__pow5mult+0xb0>)
 8006b14:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006b18:	f000 fce6 	bl	80074e8 <__assert_func>
 8006b1c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b20:	6004      	str	r4, [r0, #0]
 8006b22:	60c4      	str	r4, [r0, #12]
 8006b24:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b28:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b2c:	b94c      	cbnz	r4, 8006b42 <__pow5mult+0x66>
 8006b2e:	f240 2171 	movw	r1, #625	; 0x271
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ff16 	bl	8006964 <__i2b>
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b3e:	4604      	mov	r4, r0
 8006b40:	6003      	str	r3, [r0, #0]
 8006b42:	f04f 0900 	mov.w	r9, #0
 8006b46:	07eb      	lsls	r3, r5, #31
 8006b48:	d50a      	bpl.n	8006b60 <__pow5mult+0x84>
 8006b4a:	4639      	mov	r1, r7
 8006b4c:	4622      	mov	r2, r4
 8006b4e:	4630      	mov	r0, r6
 8006b50:	f7ff ff1e 	bl	8006990 <__multiply>
 8006b54:	4639      	mov	r1, r7
 8006b56:	4680      	mov	r8, r0
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f7ff fdfd 	bl	8006758 <_Bfree>
 8006b5e:	4647      	mov	r7, r8
 8006b60:	106d      	asrs	r5, r5, #1
 8006b62:	d00b      	beq.n	8006b7c <__pow5mult+0xa0>
 8006b64:	6820      	ldr	r0, [r4, #0]
 8006b66:	b938      	cbnz	r0, 8006b78 <__pow5mult+0x9c>
 8006b68:	4622      	mov	r2, r4
 8006b6a:	4621      	mov	r1, r4
 8006b6c:	4630      	mov	r0, r6
 8006b6e:	f7ff ff0f 	bl	8006990 <__multiply>
 8006b72:	6020      	str	r0, [r4, #0]
 8006b74:	f8c0 9000 	str.w	r9, [r0]
 8006b78:	4604      	mov	r4, r0
 8006b7a:	e7e4      	b.n	8006b46 <__pow5mult+0x6a>
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b82:	bf00      	nop
 8006b84:	08008a98 	.word	0x08008a98
 8006b88:	0800883e 	.word	0x0800883e
 8006b8c:	08008944 	.word	0x08008944

08006b90 <__lshift>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	460c      	mov	r4, r1
 8006b96:	6849      	ldr	r1, [r1, #4]
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b9e:	68a3      	ldr	r3, [r4, #8]
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4691      	mov	r9, r2
 8006ba4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ba8:	f108 0601 	add.w	r6, r8, #1
 8006bac:	42b3      	cmp	r3, r6
 8006bae:	db0b      	blt.n	8006bc8 <__lshift+0x38>
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f7ff fd91 	bl	80066d8 <_Balloc>
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	b948      	cbnz	r0, 8006bce <__lshift+0x3e>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <__lshift+0xd0>)
 8006bbe:	4829      	ldr	r0, [pc, #164]	; (8006c64 <__lshift+0xd4>)
 8006bc0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006bc4:	f000 fc90 	bl	80074e8 <__assert_func>
 8006bc8:	3101      	adds	r1, #1
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	e7ee      	b.n	8006bac <__lshift+0x1c>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	f100 0114 	add.w	r1, r0, #20
 8006bd4:	f100 0210 	add.w	r2, r0, #16
 8006bd8:	4618      	mov	r0, r3
 8006bda:	4553      	cmp	r3, sl
 8006bdc:	db33      	blt.n	8006c46 <__lshift+0xb6>
 8006bde:	6920      	ldr	r0, [r4, #16]
 8006be0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006be4:	f104 0314 	add.w	r3, r4, #20
 8006be8:	f019 091f 	ands.w	r9, r9, #31
 8006bec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006bf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006bf4:	d02b      	beq.n	8006c4e <__lshift+0xbe>
 8006bf6:	f1c9 0e20 	rsb	lr, r9, #32
 8006bfa:	468a      	mov	sl, r1
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	fa00 f009 	lsl.w	r0, r0, r9
 8006c04:	4302      	orrs	r2, r0
 8006c06:	f84a 2b04 	str.w	r2, [sl], #4
 8006c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0e:	459c      	cmp	ip, r3
 8006c10:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c14:	d8f3      	bhi.n	8006bfe <__lshift+0x6e>
 8006c16:	ebac 0304 	sub.w	r3, ip, r4
 8006c1a:	3b15      	subs	r3, #21
 8006c1c:	f023 0303 	bic.w	r3, r3, #3
 8006c20:	3304      	adds	r3, #4
 8006c22:	f104 0015 	add.w	r0, r4, #21
 8006c26:	4584      	cmp	ip, r0
 8006c28:	bf38      	it	cc
 8006c2a:	2304      	movcc	r3, #4
 8006c2c:	50ca      	str	r2, [r1, r3]
 8006c2e:	b10a      	cbz	r2, 8006c34 <__lshift+0xa4>
 8006c30:	f108 0602 	add.w	r6, r8, #2
 8006c34:	3e01      	subs	r6, #1
 8006c36:	4638      	mov	r0, r7
 8006c38:	612e      	str	r6, [r5, #16]
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f7ff fd8c 	bl	8006758 <_Bfree>
 8006c40:	4628      	mov	r0, r5
 8006c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c46:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	e7c5      	b.n	8006bda <__lshift+0x4a>
 8006c4e:	3904      	subs	r1, #4
 8006c50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c54:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c58:	459c      	cmp	ip, r3
 8006c5a:	d8f9      	bhi.n	8006c50 <__lshift+0xc0>
 8006c5c:	e7ea      	b.n	8006c34 <__lshift+0xa4>
 8006c5e:	bf00      	nop
 8006c60:	080088b4 	.word	0x080088b4
 8006c64:	08008944 	.word	0x08008944

08006c68 <__mcmp>:
 8006c68:	b530      	push	{r4, r5, lr}
 8006c6a:	6902      	ldr	r2, [r0, #16]
 8006c6c:	690c      	ldr	r4, [r1, #16]
 8006c6e:	1b12      	subs	r2, r2, r4
 8006c70:	d10e      	bne.n	8006c90 <__mcmp+0x28>
 8006c72:	f100 0314 	add.w	r3, r0, #20
 8006c76:	3114      	adds	r1, #20
 8006c78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c88:	42a5      	cmp	r5, r4
 8006c8a:	d003      	beq.n	8006c94 <__mcmp+0x2c>
 8006c8c:	d305      	bcc.n	8006c9a <__mcmp+0x32>
 8006c8e:	2201      	movs	r2, #1
 8006c90:	4610      	mov	r0, r2
 8006c92:	bd30      	pop	{r4, r5, pc}
 8006c94:	4283      	cmp	r3, r0
 8006c96:	d3f3      	bcc.n	8006c80 <__mcmp+0x18>
 8006c98:	e7fa      	b.n	8006c90 <__mcmp+0x28>
 8006c9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c9e:	e7f7      	b.n	8006c90 <__mcmp+0x28>

08006ca0 <__mdiff>:
 8006ca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	4611      	mov	r1, r2
 8006caa:	4620      	mov	r0, r4
 8006cac:	4617      	mov	r7, r2
 8006cae:	f7ff ffdb 	bl	8006c68 <__mcmp>
 8006cb2:	1e05      	subs	r5, r0, #0
 8006cb4:	d110      	bne.n	8006cd8 <__mdiff+0x38>
 8006cb6:	4629      	mov	r1, r5
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f7ff fd0d 	bl	80066d8 <_Balloc>
 8006cbe:	b930      	cbnz	r0, 8006cce <__mdiff+0x2e>
 8006cc0:	4b39      	ldr	r3, [pc, #228]	; (8006da8 <__mdiff+0x108>)
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	f240 2132 	movw	r1, #562	; 0x232
 8006cc8:	4838      	ldr	r0, [pc, #224]	; (8006dac <__mdiff+0x10c>)
 8006cca:	f000 fc0d 	bl	80074e8 <__assert_func>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd8:	bfa4      	itt	ge
 8006cda:	463b      	movge	r3, r7
 8006cdc:	4627      	movge	r7, r4
 8006cde:	4630      	mov	r0, r6
 8006ce0:	6879      	ldr	r1, [r7, #4]
 8006ce2:	bfa6      	itte	ge
 8006ce4:	461c      	movge	r4, r3
 8006ce6:	2500      	movge	r5, #0
 8006ce8:	2501      	movlt	r5, #1
 8006cea:	f7ff fcf5 	bl	80066d8 <_Balloc>
 8006cee:	b920      	cbnz	r0, 8006cfa <__mdiff+0x5a>
 8006cf0:	4b2d      	ldr	r3, [pc, #180]	; (8006da8 <__mdiff+0x108>)
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cf8:	e7e6      	b.n	8006cc8 <__mdiff+0x28>
 8006cfa:	693e      	ldr	r6, [r7, #16]
 8006cfc:	60c5      	str	r5, [r0, #12]
 8006cfe:	6925      	ldr	r5, [r4, #16]
 8006d00:	f107 0114 	add.w	r1, r7, #20
 8006d04:	f104 0914 	add.w	r9, r4, #20
 8006d08:	f100 0e14 	add.w	lr, r0, #20
 8006d0c:	f107 0210 	add.w	r2, r7, #16
 8006d10:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006d14:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006d18:	46f2      	mov	sl, lr
 8006d1a:	2700      	movs	r7, #0
 8006d1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006d20:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006d24:	fa1f f883 	uxth.w	r8, r3
 8006d28:	fa17 f78b 	uxtah	r7, r7, fp
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	eba7 0808 	sub.w	r8, r7, r8
 8006d32:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006d36:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006d3a:	fa1f f888 	uxth.w	r8, r8
 8006d3e:	141f      	asrs	r7, r3, #16
 8006d40:	454d      	cmp	r5, r9
 8006d42:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d46:	f84a 3b04 	str.w	r3, [sl], #4
 8006d4a:	d8e7      	bhi.n	8006d1c <__mdiff+0x7c>
 8006d4c:	1b2b      	subs	r3, r5, r4
 8006d4e:	3b15      	subs	r3, #21
 8006d50:	f023 0303 	bic.w	r3, r3, #3
 8006d54:	3304      	adds	r3, #4
 8006d56:	3415      	adds	r4, #21
 8006d58:	42a5      	cmp	r5, r4
 8006d5a:	bf38      	it	cc
 8006d5c:	2304      	movcc	r3, #4
 8006d5e:	4419      	add	r1, r3
 8006d60:	4473      	add	r3, lr
 8006d62:	469e      	mov	lr, r3
 8006d64:	460d      	mov	r5, r1
 8006d66:	4565      	cmp	r5, ip
 8006d68:	d30e      	bcc.n	8006d88 <__mdiff+0xe8>
 8006d6a:	f10c 0203 	add.w	r2, ip, #3
 8006d6e:	1a52      	subs	r2, r2, r1
 8006d70:	f022 0203 	bic.w	r2, r2, #3
 8006d74:	3903      	subs	r1, #3
 8006d76:	458c      	cmp	ip, r1
 8006d78:	bf38      	it	cc
 8006d7a:	2200      	movcc	r2, #0
 8006d7c:	441a      	add	r2, r3
 8006d7e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d82:	b17b      	cbz	r3, 8006da4 <__mdiff+0x104>
 8006d84:	6106      	str	r6, [r0, #16]
 8006d86:	e7a5      	b.n	8006cd4 <__mdiff+0x34>
 8006d88:	f855 8b04 	ldr.w	r8, [r5], #4
 8006d8c:	fa17 f488 	uxtah	r4, r7, r8
 8006d90:	1422      	asrs	r2, r4, #16
 8006d92:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006d96:	b2a4      	uxth	r4, r4
 8006d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006d9c:	f84e 4b04 	str.w	r4, [lr], #4
 8006da0:	1417      	asrs	r7, r2, #16
 8006da2:	e7e0      	b.n	8006d66 <__mdiff+0xc6>
 8006da4:	3e01      	subs	r6, #1
 8006da6:	e7ea      	b.n	8006d7e <__mdiff+0xde>
 8006da8:	080088b4 	.word	0x080088b4
 8006dac:	08008944 	.word	0x08008944

08006db0 <__ulp>:
 8006db0:	b082      	sub	sp, #8
 8006db2:	ed8d 0b00 	vstr	d0, [sp]
 8006db6:	9b01      	ldr	r3, [sp, #4]
 8006db8:	4912      	ldr	r1, [pc, #72]	; (8006e04 <__ulp+0x54>)
 8006dba:	4019      	ands	r1, r3
 8006dbc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	dd05      	ble.n	8006dd0 <__ulp+0x20>
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	ec43 2b10 	vmov	d0, r2, r3
 8006dcc:	b002      	add	sp, #8
 8006dce:	4770      	bx	lr
 8006dd0:	4249      	negs	r1, r1
 8006dd2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8006dd6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	da04      	bge.n	8006dee <__ulp+0x3e>
 8006de4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006de8:	fa41 f300 	asr.w	r3, r1, r0
 8006dec:	e7ec      	b.n	8006dc8 <__ulp+0x18>
 8006dee:	f1a0 0114 	sub.w	r1, r0, #20
 8006df2:	291e      	cmp	r1, #30
 8006df4:	bfda      	itte	le
 8006df6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8006dfa:	fa20 f101 	lsrle.w	r1, r0, r1
 8006dfe:	2101      	movgt	r1, #1
 8006e00:	460a      	mov	r2, r1
 8006e02:	e7e1      	b.n	8006dc8 <__ulp+0x18>
 8006e04:	7ff00000 	.word	0x7ff00000

08006e08 <__b2d>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	6905      	ldr	r5, [r0, #16]
 8006e0c:	f100 0714 	add.w	r7, r0, #20
 8006e10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006e14:	1f2e      	subs	r6, r5, #4
 8006e16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f7ff fd52 	bl	80068c4 <__hi0bits>
 8006e20:	f1c0 0320 	rsb	r3, r0, #32
 8006e24:	280a      	cmp	r0, #10
 8006e26:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8006ea4 <__b2d+0x9c>
 8006e2a:	600b      	str	r3, [r1, #0]
 8006e2c:	dc14      	bgt.n	8006e58 <__b2d+0x50>
 8006e2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006e32:	fa24 f10e 	lsr.w	r1, r4, lr
 8006e36:	42b7      	cmp	r7, r6
 8006e38:	ea41 030c 	orr.w	r3, r1, ip
 8006e3c:	bf34      	ite	cc
 8006e3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006e42:	2100      	movcs	r1, #0
 8006e44:	3015      	adds	r0, #21
 8006e46:	fa04 f000 	lsl.w	r0, r4, r0
 8006e4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8006e4e:	ea40 0201 	orr.w	r2, r0, r1
 8006e52:	ec43 2b10 	vmov	d0, r2, r3
 8006e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e58:	42b7      	cmp	r7, r6
 8006e5a:	bf3a      	itte	cc
 8006e5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006e60:	f1a5 0608 	subcc.w	r6, r5, #8
 8006e64:	2100      	movcs	r1, #0
 8006e66:	380b      	subs	r0, #11
 8006e68:	d017      	beq.n	8006e9a <__b2d+0x92>
 8006e6a:	f1c0 0c20 	rsb	ip, r0, #32
 8006e6e:	fa04 f500 	lsl.w	r5, r4, r0
 8006e72:	42be      	cmp	r6, r7
 8006e74:	fa21 f40c 	lsr.w	r4, r1, ip
 8006e78:	ea45 0504 	orr.w	r5, r5, r4
 8006e7c:	bf8c      	ite	hi
 8006e7e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006e82:	2400      	movls	r4, #0
 8006e84:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8006e88:	fa01 f000 	lsl.w	r0, r1, r0
 8006e8c:	fa24 f40c 	lsr.w	r4, r4, ip
 8006e90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e94:	ea40 0204 	orr.w	r2, r0, r4
 8006e98:	e7db      	b.n	8006e52 <__b2d+0x4a>
 8006e9a:	ea44 030c 	orr.w	r3, r4, ip
 8006e9e:	460a      	mov	r2, r1
 8006ea0:	e7d7      	b.n	8006e52 <__b2d+0x4a>
 8006ea2:	bf00      	nop
 8006ea4:	3ff00000 	.word	0x3ff00000

08006ea8 <__d2b>:
 8006ea8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006eac:	4689      	mov	r9, r1
 8006eae:	2101      	movs	r1, #1
 8006eb0:	ec57 6b10 	vmov	r6, r7, d0
 8006eb4:	4690      	mov	r8, r2
 8006eb6:	f7ff fc0f 	bl	80066d8 <_Balloc>
 8006eba:	4604      	mov	r4, r0
 8006ebc:	b930      	cbnz	r0, 8006ecc <__d2b+0x24>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <__d2b+0xb0>)
 8006ec2:	4826      	ldr	r0, [pc, #152]	; (8006f5c <__d2b+0xb4>)
 8006ec4:	f240 310a 	movw	r1, #778	; 0x30a
 8006ec8:	f000 fb0e 	bl	80074e8 <__assert_func>
 8006ecc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006ed0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006ed4:	bb35      	cbnz	r5, 8006f24 <__d2b+0x7c>
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	d028      	beq.n	8006f2e <__d2b+0x86>
 8006edc:	4668      	mov	r0, sp
 8006ede:	9600      	str	r6, [sp, #0]
 8006ee0:	f7ff fd10 	bl	8006904 <__lo0bits>
 8006ee4:	9900      	ldr	r1, [sp, #0]
 8006ee6:	b300      	cbz	r0, 8006f2a <__d2b+0x82>
 8006ee8:	9a01      	ldr	r2, [sp, #4]
 8006eea:	f1c0 0320 	rsb	r3, r0, #32
 8006eee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef2:	430b      	orrs	r3, r1
 8006ef4:	40c2      	lsrs	r2, r0
 8006ef6:	6163      	str	r3, [r4, #20]
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	9b01      	ldr	r3, [sp, #4]
 8006efc:	61a3      	str	r3, [r4, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	bf14      	ite	ne
 8006f02:	2202      	movne	r2, #2
 8006f04:	2201      	moveq	r2, #1
 8006f06:	6122      	str	r2, [r4, #16]
 8006f08:	b1d5      	cbz	r5, 8006f40 <__d2b+0x98>
 8006f0a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006f0e:	4405      	add	r5, r0
 8006f10:	f8c9 5000 	str.w	r5, [r9]
 8006f14:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f18:	f8c8 0000 	str.w	r0, [r8]
 8006f1c:	4620      	mov	r0, r4
 8006f1e:	b003      	add	sp, #12
 8006f20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f28:	e7d5      	b.n	8006ed6 <__d2b+0x2e>
 8006f2a:	6161      	str	r1, [r4, #20]
 8006f2c:	e7e5      	b.n	8006efa <__d2b+0x52>
 8006f2e:	a801      	add	r0, sp, #4
 8006f30:	f7ff fce8 	bl	8006904 <__lo0bits>
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	6163      	str	r3, [r4, #20]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	6122      	str	r2, [r4, #16]
 8006f3c:	3020      	adds	r0, #32
 8006f3e:	e7e3      	b.n	8006f08 <__d2b+0x60>
 8006f40:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006f48:	f8c9 0000 	str.w	r0, [r9]
 8006f4c:	6918      	ldr	r0, [r3, #16]
 8006f4e:	f7ff fcb9 	bl	80068c4 <__hi0bits>
 8006f52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f56:	e7df      	b.n	8006f18 <__d2b+0x70>
 8006f58:	080088b4 	.word	0x080088b4
 8006f5c:	08008944 	.word	0x08008944

08006f60 <__ratio>:
 8006f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f64:	4688      	mov	r8, r1
 8006f66:	4669      	mov	r1, sp
 8006f68:	4681      	mov	r9, r0
 8006f6a:	f7ff ff4d 	bl	8006e08 <__b2d>
 8006f6e:	a901      	add	r1, sp, #4
 8006f70:	4640      	mov	r0, r8
 8006f72:	ec55 4b10 	vmov	r4, r5, d0
 8006f76:	f7ff ff47 	bl	8006e08 <__b2d>
 8006f7a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f7e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f82:	eba3 0c02 	sub.w	ip, r3, r2
 8006f86:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f8a:	1a9b      	subs	r3, r3, r2
 8006f8c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006f90:	ec51 0b10 	vmov	r0, r1, d0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bfd6      	itet	le
 8006f98:	460a      	movle	r2, r1
 8006f9a:	462a      	movgt	r2, r5
 8006f9c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fa0:	468b      	mov	fp, r1
 8006fa2:	462f      	mov	r7, r5
 8006fa4:	bfd4      	ite	le
 8006fa6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006faa:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fae:	4620      	mov	r0, r4
 8006fb0:	ee10 2a10 	vmov	r2, s0
 8006fb4:	465b      	mov	r3, fp
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	f7f9 fc48 	bl	800084c <__aeabi_ddiv>
 8006fbc:	ec41 0b10 	vmov	d0, r0, r1
 8006fc0:	b003      	add	sp, #12
 8006fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fc6 <__copybits>:
 8006fc6:	3901      	subs	r1, #1
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	1149      	asrs	r1, r1, #5
 8006fcc:	6914      	ldr	r4, [r2, #16]
 8006fce:	3101      	adds	r1, #1
 8006fd0:	f102 0314 	add.w	r3, r2, #20
 8006fd4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006fd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006fdc:	1f05      	subs	r5, r0, #4
 8006fde:	42a3      	cmp	r3, r4
 8006fe0:	d30c      	bcc.n	8006ffc <__copybits+0x36>
 8006fe2:	1aa3      	subs	r3, r4, r2
 8006fe4:	3b11      	subs	r3, #17
 8006fe6:	f023 0303 	bic.w	r3, r3, #3
 8006fea:	3211      	adds	r2, #17
 8006fec:	42a2      	cmp	r2, r4
 8006fee:	bf88      	it	hi
 8006ff0:	2300      	movhi	r3, #0
 8006ff2:	4418      	add	r0, r3
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4288      	cmp	r0, r1
 8006ff8:	d305      	bcc.n	8007006 <__copybits+0x40>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f853 6b04 	ldr.w	r6, [r3], #4
 8007000:	f845 6f04 	str.w	r6, [r5, #4]!
 8007004:	e7eb      	b.n	8006fde <__copybits+0x18>
 8007006:	f840 3b04 	str.w	r3, [r0], #4
 800700a:	e7f4      	b.n	8006ff6 <__copybits+0x30>

0800700c <__any_on>:
 800700c:	f100 0214 	add.w	r2, r0, #20
 8007010:	6900      	ldr	r0, [r0, #16]
 8007012:	114b      	asrs	r3, r1, #5
 8007014:	4298      	cmp	r0, r3
 8007016:	b510      	push	{r4, lr}
 8007018:	db11      	blt.n	800703e <__any_on+0x32>
 800701a:	dd0a      	ble.n	8007032 <__any_on+0x26>
 800701c:	f011 011f 	ands.w	r1, r1, #31
 8007020:	d007      	beq.n	8007032 <__any_on+0x26>
 8007022:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007026:	fa24 f001 	lsr.w	r0, r4, r1
 800702a:	fa00 f101 	lsl.w	r1, r0, r1
 800702e:	428c      	cmp	r4, r1
 8007030:	d10b      	bne.n	800704a <__any_on+0x3e>
 8007032:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007036:	4293      	cmp	r3, r2
 8007038:	d803      	bhi.n	8007042 <__any_on+0x36>
 800703a:	2000      	movs	r0, #0
 800703c:	bd10      	pop	{r4, pc}
 800703e:	4603      	mov	r3, r0
 8007040:	e7f7      	b.n	8007032 <__any_on+0x26>
 8007042:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007046:	2900      	cmp	r1, #0
 8007048:	d0f5      	beq.n	8007036 <__any_on+0x2a>
 800704a:	2001      	movs	r0, #1
 800704c:	e7f6      	b.n	800703c <__any_on+0x30>

0800704e <_calloc_r>:
 800704e:	b513      	push	{r0, r1, r4, lr}
 8007050:	434a      	muls	r2, r1
 8007052:	4611      	mov	r1, r2
 8007054:	9201      	str	r2, [sp, #4]
 8007056:	f000 f859 	bl	800710c <_malloc_r>
 800705a:	4604      	mov	r4, r0
 800705c:	b118      	cbz	r0, 8007066 <_calloc_r+0x18>
 800705e:	9a01      	ldr	r2, [sp, #4]
 8007060:	2100      	movs	r1, #0
 8007062:	f7fc fbc9 	bl	80037f8 <memset>
 8007066:	4620      	mov	r0, r4
 8007068:	b002      	add	sp, #8
 800706a:	bd10      	pop	{r4, pc}

0800706c <_free_r>:
 800706c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800706e:	2900      	cmp	r1, #0
 8007070:	d048      	beq.n	8007104 <_free_r+0x98>
 8007072:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007076:	9001      	str	r0, [sp, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f1a1 0404 	sub.w	r4, r1, #4
 800707e:	bfb8      	it	lt
 8007080:	18e4      	addlt	r4, r4, r3
 8007082:	f000 fa7b 	bl	800757c <__malloc_lock>
 8007086:	4a20      	ldr	r2, [pc, #128]	; (8007108 <_free_r+0x9c>)
 8007088:	9801      	ldr	r0, [sp, #4]
 800708a:	6813      	ldr	r3, [r2, #0]
 800708c:	4615      	mov	r5, r2
 800708e:	b933      	cbnz	r3, 800709e <_free_r+0x32>
 8007090:	6063      	str	r3, [r4, #4]
 8007092:	6014      	str	r4, [r2, #0]
 8007094:	b003      	add	sp, #12
 8007096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800709a:	f000 ba75 	b.w	8007588 <__malloc_unlock>
 800709e:	42a3      	cmp	r3, r4
 80070a0:	d90b      	bls.n	80070ba <_free_r+0x4e>
 80070a2:	6821      	ldr	r1, [r4, #0]
 80070a4:	1862      	adds	r2, r4, r1
 80070a6:	4293      	cmp	r3, r2
 80070a8:	bf04      	itt	eq
 80070aa:	681a      	ldreq	r2, [r3, #0]
 80070ac:	685b      	ldreq	r3, [r3, #4]
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	bf04      	itt	eq
 80070b2:	1852      	addeq	r2, r2, r1
 80070b4:	6022      	streq	r2, [r4, #0]
 80070b6:	602c      	str	r4, [r5, #0]
 80070b8:	e7ec      	b.n	8007094 <_free_r+0x28>
 80070ba:	461a      	mov	r2, r3
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	b10b      	cbz	r3, 80070c4 <_free_r+0x58>
 80070c0:	42a3      	cmp	r3, r4
 80070c2:	d9fa      	bls.n	80070ba <_free_r+0x4e>
 80070c4:	6811      	ldr	r1, [r2, #0]
 80070c6:	1855      	adds	r5, r2, r1
 80070c8:	42a5      	cmp	r5, r4
 80070ca:	d10b      	bne.n	80070e4 <_free_r+0x78>
 80070cc:	6824      	ldr	r4, [r4, #0]
 80070ce:	4421      	add	r1, r4
 80070d0:	1854      	adds	r4, r2, r1
 80070d2:	42a3      	cmp	r3, r4
 80070d4:	6011      	str	r1, [r2, #0]
 80070d6:	d1dd      	bne.n	8007094 <_free_r+0x28>
 80070d8:	681c      	ldr	r4, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	6053      	str	r3, [r2, #4]
 80070de:	4421      	add	r1, r4
 80070e0:	6011      	str	r1, [r2, #0]
 80070e2:	e7d7      	b.n	8007094 <_free_r+0x28>
 80070e4:	d902      	bls.n	80070ec <_free_r+0x80>
 80070e6:	230c      	movs	r3, #12
 80070e8:	6003      	str	r3, [r0, #0]
 80070ea:	e7d3      	b.n	8007094 <_free_r+0x28>
 80070ec:	6825      	ldr	r5, [r4, #0]
 80070ee:	1961      	adds	r1, r4, r5
 80070f0:	428b      	cmp	r3, r1
 80070f2:	bf04      	itt	eq
 80070f4:	6819      	ldreq	r1, [r3, #0]
 80070f6:	685b      	ldreq	r3, [r3, #4]
 80070f8:	6063      	str	r3, [r4, #4]
 80070fa:	bf04      	itt	eq
 80070fc:	1949      	addeq	r1, r1, r5
 80070fe:	6021      	streq	r1, [r4, #0]
 8007100:	6054      	str	r4, [r2, #4]
 8007102:	e7c7      	b.n	8007094 <_free_r+0x28>
 8007104:	b003      	add	sp, #12
 8007106:	bd30      	pop	{r4, r5, pc}
 8007108:	20000418 	.word	0x20000418

0800710c <_malloc_r>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	1ccd      	adds	r5, r1, #3
 8007110:	f025 0503 	bic.w	r5, r5, #3
 8007114:	3508      	adds	r5, #8
 8007116:	2d0c      	cmp	r5, #12
 8007118:	bf38      	it	cc
 800711a:	250c      	movcc	r5, #12
 800711c:	2d00      	cmp	r5, #0
 800711e:	4606      	mov	r6, r0
 8007120:	db01      	blt.n	8007126 <_malloc_r+0x1a>
 8007122:	42a9      	cmp	r1, r5
 8007124:	d903      	bls.n	800712e <_malloc_r+0x22>
 8007126:	230c      	movs	r3, #12
 8007128:	6033      	str	r3, [r6, #0]
 800712a:	2000      	movs	r0, #0
 800712c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712e:	f000 fa25 	bl	800757c <__malloc_lock>
 8007132:	4921      	ldr	r1, [pc, #132]	; (80071b8 <_malloc_r+0xac>)
 8007134:	680a      	ldr	r2, [r1, #0]
 8007136:	4614      	mov	r4, r2
 8007138:	b99c      	cbnz	r4, 8007162 <_malloc_r+0x56>
 800713a:	4f20      	ldr	r7, [pc, #128]	; (80071bc <_malloc_r+0xb0>)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	b923      	cbnz	r3, 800714a <_malloc_r+0x3e>
 8007140:	4621      	mov	r1, r4
 8007142:	4630      	mov	r0, r6
 8007144:	f000 f9a0 	bl	8007488 <_sbrk_r>
 8007148:	6038      	str	r0, [r7, #0]
 800714a:	4629      	mov	r1, r5
 800714c:	4630      	mov	r0, r6
 800714e:	f000 f99b 	bl	8007488 <_sbrk_r>
 8007152:	1c43      	adds	r3, r0, #1
 8007154:	d123      	bne.n	800719e <_malloc_r+0x92>
 8007156:	230c      	movs	r3, #12
 8007158:	6033      	str	r3, [r6, #0]
 800715a:	4630      	mov	r0, r6
 800715c:	f000 fa14 	bl	8007588 <__malloc_unlock>
 8007160:	e7e3      	b.n	800712a <_malloc_r+0x1e>
 8007162:	6823      	ldr	r3, [r4, #0]
 8007164:	1b5b      	subs	r3, r3, r5
 8007166:	d417      	bmi.n	8007198 <_malloc_r+0x8c>
 8007168:	2b0b      	cmp	r3, #11
 800716a:	d903      	bls.n	8007174 <_malloc_r+0x68>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	441c      	add	r4, r3
 8007170:	6025      	str	r5, [r4, #0]
 8007172:	e004      	b.n	800717e <_malloc_r+0x72>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	42a2      	cmp	r2, r4
 8007178:	bf0c      	ite	eq
 800717a:	600b      	streq	r3, [r1, #0]
 800717c:	6053      	strne	r3, [r2, #4]
 800717e:	4630      	mov	r0, r6
 8007180:	f000 fa02 	bl	8007588 <__malloc_unlock>
 8007184:	f104 000b 	add.w	r0, r4, #11
 8007188:	1d23      	adds	r3, r4, #4
 800718a:	f020 0007 	bic.w	r0, r0, #7
 800718e:	1ac2      	subs	r2, r0, r3
 8007190:	d0cc      	beq.n	800712c <_malloc_r+0x20>
 8007192:	1a1b      	subs	r3, r3, r0
 8007194:	50a3      	str	r3, [r4, r2]
 8007196:	e7c9      	b.n	800712c <_malloc_r+0x20>
 8007198:	4622      	mov	r2, r4
 800719a:	6864      	ldr	r4, [r4, #4]
 800719c:	e7cc      	b.n	8007138 <_malloc_r+0x2c>
 800719e:	1cc4      	adds	r4, r0, #3
 80071a0:	f024 0403 	bic.w	r4, r4, #3
 80071a4:	42a0      	cmp	r0, r4
 80071a6:	d0e3      	beq.n	8007170 <_malloc_r+0x64>
 80071a8:	1a21      	subs	r1, r4, r0
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f96c 	bl	8007488 <_sbrk_r>
 80071b0:	3001      	adds	r0, #1
 80071b2:	d1dd      	bne.n	8007170 <_malloc_r+0x64>
 80071b4:	e7cf      	b.n	8007156 <_malloc_r+0x4a>
 80071b6:	bf00      	nop
 80071b8:	20000418 	.word	0x20000418
 80071bc:	2000041c 	.word	0x2000041c

080071c0 <__ssputs_r>:
 80071c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071c4:	688e      	ldr	r6, [r1, #8]
 80071c6:	429e      	cmp	r6, r3
 80071c8:	4682      	mov	sl, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	4690      	mov	r8, r2
 80071ce:	461f      	mov	r7, r3
 80071d0:	d838      	bhi.n	8007244 <__ssputs_r+0x84>
 80071d2:	898a      	ldrh	r2, [r1, #12]
 80071d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071d8:	d032      	beq.n	8007240 <__ssputs_r+0x80>
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	6909      	ldr	r1, [r1, #16]
 80071de:	eba5 0901 	sub.w	r9, r5, r1
 80071e2:	6965      	ldr	r5, [r4, #20]
 80071e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071ec:	3301      	adds	r3, #1
 80071ee:	444b      	add	r3, r9
 80071f0:	106d      	asrs	r5, r5, #1
 80071f2:	429d      	cmp	r5, r3
 80071f4:	bf38      	it	cc
 80071f6:	461d      	movcc	r5, r3
 80071f8:	0553      	lsls	r3, r2, #21
 80071fa:	d531      	bpl.n	8007260 <__ssputs_r+0xa0>
 80071fc:	4629      	mov	r1, r5
 80071fe:	f7ff ff85 	bl	800710c <_malloc_r>
 8007202:	4606      	mov	r6, r0
 8007204:	b950      	cbnz	r0, 800721c <__ssputs_r+0x5c>
 8007206:	230c      	movs	r3, #12
 8007208:	f8ca 3000 	str.w	r3, [sl]
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007212:	81a3      	strh	r3, [r4, #12]
 8007214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800721c:	6921      	ldr	r1, [r4, #16]
 800721e:	464a      	mov	r2, r9
 8007220:	f7ff fa4c 	bl	80066bc <memcpy>
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800722a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722e:	81a3      	strh	r3, [r4, #12]
 8007230:	6126      	str	r6, [r4, #16]
 8007232:	6165      	str	r5, [r4, #20]
 8007234:	444e      	add	r6, r9
 8007236:	eba5 0509 	sub.w	r5, r5, r9
 800723a:	6026      	str	r6, [r4, #0]
 800723c:	60a5      	str	r5, [r4, #8]
 800723e:	463e      	mov	r6, r7
 8007240:	42be      	cmp	r6, r7
 8007242:	d900      	bls.n	8007246 <__ssputs_r+0x86>
 8007244:	463e      	mov	r6, r7
 8007246:	4632      	mov	r2, r6
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	4641      	mov	r1, r8
 800724c:	f000 f97c 	bl	8007548 <memmove>
 8007250:	68a3      	ldr	r3, [r4, #8]
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	1b9b      	subs	r3, r3, r6
 8007256:	4432      	add	r2, r6
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	6022      	str	r2, [r4, #0]
 800725c:	2000      	movs	r0, #0
 800725e:	e7db      	b.n	8007218 <__ssputs_r+0x58>
 8007260:	462a      	mov	r2, r5
 8007262:	f000 f997 	bl	8007594 <_realloc_r>
 8007266:	4606      	mov	r6, r0
 8007268:	2800      	cmp	r0, #0
 800726a:	d1e1      	bne.n	8007230 <__ssputs_r+0x70>
 800726c:	6921      	ldr	r1, [r4, #16]
 800726e:	4650      	mov	r0, sl
 8007270:	f7ff fefc 	bl	800706c <_free_r>
 8007274:	e7c7      	b.n	8007206 <__ssputs_r+0x46>
	...

08007278 <_svfiprintf_r>:
 8007278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800727c:	4698      	mov	r8, r3
 800727e:	898b      	ldrh	r3, [r1, #12]
 8007280:	061b      	lsls	r3, r3, #24
 8007282:	b09d      	sub	sp, #116	; 0x74
 8007284:	4607      	mov	r7, r0
 8007286:	460d      	mov	r5, r1
 8007288:	4614      	mov	r4, r2
 800728a:	d50e      	bpl.n	80072aa <_svfiprintf_r+0x32>
 800728c:	690b      	ldr	r3, [r1, #16]
 800728e:	b963      	cbnz	r3, 80072aa <_svfiprintf_r+0x32>
 8007290:	2140      	movs	r1, #64	; 0x40
 8007292:	f7ff ff3b 	bl	800710c <_malloc_r>
 8007296:	6028      	str	r0, [r5, #0]
 8007298:	6128      	str	r0, [r5, #16]
 800729a:	b920      	cbnz	r0, 80072a6 <_svfiprintf_r+0x2e>
 800729c:	230c      	movs	r3, #12
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072a4:	e0d1      	b.n	800744a <_svfiprintf_r+0x1d2>
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	616b      	str	r3, [r5, #20]
 80072aa:	2300      	movs	r3, #0
 80072ac:	9309      	str	r3, [sp, #36]	; 0x24
 80072ae:	2320      	movs	r3, #32
 80072b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072b8:	2330      	movs	r3, #48	; 0x30
 80072ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007464 <_svfiprintf_r+0x1ec>
 80072be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c2:	f04f 0901 	mov.w	r9, #1
 80072c6:	4623      	mov	r3, r4
 80072c8:	469a      	mov	sl, r3
 80072ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ce:	b10a      	cbz	r2, 80072d4 <_svfiprintf_r+0x5c>
 80072d0:	2a25      	cmp	r2, #37	; 0x25
 80072d2:	d1f9      	bne.n	80072c8 <_svfiprintf_r+0x50>
 80072d4:	ebba 0b04 	subs.w	fp, sl, r4
 80072d8:	d00b      	beq.n	80072f2 <_svfiprintf_r+0x7a>
 80072da:	465b      	mov	r3, fp
 80072dc:	4622      	mov	r2, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7ff ff6d 	bl	80071c0 <__ssputs_r>
 80072e6:	3001      	adds	r0, #1
 80072e8:	f000 80aa 	beq.w	8007440 <_svfiprintf_r+0x1c8>
 80072ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ee:	445a      	add	r2, fp
 80072f0:	9209      	str	r2, [sp, #36]	; 0x24
 80072f2:	f89a 3000 	ldrb.w	r3, [sl]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80a2 	beq.w	8007440 <_svfiprintf_r+0x1c8>
 80072fc:	2300      	movs	r3, #0
 80072fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007306:	f10a 0a01 	add.w	sl, sl, #1
 800730a:	9304      	str	r3, [sp, #16]
 800730c:	9307      	str	r3, [sp, #28]
 800730e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007312:	931a      	str	r3, [sp, #104]	; 0x68
 8007314:	4654      	mov	r4, sl
 8007316:	2205      	movs	r2, #5
 8007318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731c:	4851      	ldr	r0, [pc, #324]	; (8007464 <_svfiprintf_r+0x1ec>)
 800731e:	f7f8 ff5f 	bl	80001e0 <memchr>
 8007322:	9a04      	ldr	r2, [sp, #16]
 8007324:	b9d8      	cbnz	r0, 800735e <_svfiprintf_r+0xe6>
 8007326:	06d0      	lsls	r0, r2, #27
 8007328:	bf44      	itt	mi
 800732a:	2320      	movmi	r3, #32
 800732c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007330:	0711      	lsls	r1, r2, #28
 8007332:	bf44      	itt	mi
 8007334:	232b      	movmi	r3, #43	; 0x2b
 8007336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733a:	f89a 3000 	ldrb.w	r3, [sl]
 800733e:	2b2a      	cmp	r3, #42	; 0x2a
 8007340:	d015      	beq.n	800736e <_svfiprintf_r+0xf6>
 8007342:	9a07      	ldr	r2, [sp, #28]
 8007344:	4654      	mov	r4, sl
 8007346:	2000      	movs	r0, #0
 8007348:	f04f 0c0a 	mov.w	ip, #10
 800734c:	4621      	mov	r1, r4
 800734e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007352:	3b30      	subs	r3, #48	; 0x30
 8007354:	2b09      	cmp	r3, #9
 8007356:	d94e      	bls.n	80073f6 <_svfiprintf_r+0x17e>
 8007358:	b1b0      	cbz	r0, 8007388 <_svfiprintf_r+0x110>
 800735a:	9207      	str	r2, [sp, #28]
 800735c:	e014      	b.n	8007388 <_svfiprintf_r+0x110>
 800735e:	eba0 0308 	sub.w	r3, r0, r8
 8007362:	fa09 f303 	lsl.w	r3, r9, r3
 8007366:	4313      	orrs	r3, r2
 8007368:	9304      	str	r3, [sp, #16]
 800736a:	46a2      	mov	sl, r4
 800736c:	e7d2      	b.n	8007314 <_svfiprintf_r+0x9c>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	1d19      	adds	r1, r3, #4
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	9103      	str	r1, [sp, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	bfbb      	ittet	lt
 800737a:	425b      	neglt	r3, r3
 800737c:	f042 0202 	orrlt.w	r2, r2, #2
 8007380:	9307      	strge	r3, [sp, #28]
 8007382:	9307      	strlt	r3, [sp, #28]
 8007384:	bfb8      	it	lt
 8007386:	9204      	strlt	r2, [sp, #16]
 8007388:	7823      	ldrb	r3, [r4, #0]
 800738a:	2b2e      	cmp	r3, #46	; 0x2e
 800738c:	d10c      	bne.n	80073a8 <_svfiprintf_r+0x130>
 800738e:	7863      	ldrb	r3, [r4, #1]
 8007390:	2b2a      	cmp	r3, #42	; 0x2a
 8007392:	d135      	bne.n	8007400 <_svfiprintf_r+0x188>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	1d1a      	adds	r2, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9203      	str	r2, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfb8      	it	lt
 80073a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073a4:	3402      	adds	r4, #2
 80073a6:	9305      	str	r3, [sp, #20]
 80073a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007474 <_svfiprintf_r+0x1fc>
 80073ac:	7821      	ldrb	r1, [r4, #0]
 80073ae:	2203      	movs	r2, #3
 80073b0:	4650      	mov	r0, sl
 80073b2:	f7f8 ff15 	bl	80001e0 <memchr>
 80073b6:	b140      	cbz	r0, 80073ca <_svfiprintf_r+0x152>
 80073b8:	2340      	movs	r3, #64	; 0x40
 80073ba:	eba0 000a 	sub.w	r0, r0, sl
 80073be:	fa03 f000 	lsl.w	r0, r3, r0
 80073c2:	9b04      	ldr	r3, [sp, #16]
 80073c4:	4303      	orrs	r3, r0
 80073c6:	3401      	adds	r4, #1
 80073c8:	9304      	str	r3, [sp, #16]
 80073ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ce:	4826      	ldr	r0, [pc, #152]	; (8007468 <_svfiprintf_r+0x1f0>)
 80073d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d4:	2206      	movs	r2, #6
 80073d6:	f7f8 ff03 	bl	80001e0 <memchr>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d038      	beq.n	8007450 <_svfiprintf_r+0x1d8>
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <_svfiprintf_r+0x1f4>)
 80073e0:	bb1b      	cbnz	r3, 800742a <_svfiprintf_r+0x1b2>
 80073e2:	9b03      	ldr	r3, [sp, #12]
 80073e4:	3307      	adds	r3, #7
 80073e6:	f023 0307 	bic.w	r3, r3, #7
 80073ea:	3308      	adds	r3, #8
 80073ec:	9303      	str	r3, [sp, #12]
 80073ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f0:	4433      	add	r3, r6
 80073f2:	9309      	str	r3, [sp, #36]	; 0x24
 80073f4:	e767      	b.n	80072c6 <_svfiprintf_r+0x4e>
 80073f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fa:	460c      	mov	r4, r1
 80073fc:	2001      	movs	r0, #1
 80073fe:	e7a5      	b.n	800734c <_svfiprintf_r+0xd4>
 8007400:	2300      	movs	r3, #0
 8007402:	3401      	adds	r4, #1
 8007404:	9305      	str	r3, [sp, #20]
 8007406:	4619      	mov	r1, r3
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	4620      	mov	r0, r4
 800740e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007412:	3a30      	subs	r2, #48	; 0x30
 8007414:	2a09      	cmp	r2, #9
 8007416:	d903      	bls.n	8007420 <_svfiprintf_r+0x1a8>
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0c5      	beq.n	80073a8 <_svfiprintf_r+0x130>
 800741c:	9105      	str	r1, [sp, #20]
 800741e:	e7c3      	b.n	80073a8 <_svfiprintf_r+0x130>
 8007420:	fb0c 2101 	mla	r1, ip, r1, r2
 8007424:	4604      	mov	r4, r0
 8007426:	2301      	movs	r3, #1
 8007428:	e7f0      	b.n	800740c <_svfiprintf_r+0x194>
 800742a:	ab03      	add	r3, sp, #12
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	462a      	mov	r2, r5
 8007430:	4b0f      	ldr	r3, [pc, #60]	; (8007470 <_svfiprintf_r+0x1f8>)
 8007432:	a904      	add	r1, sp, #16
 8007434:	4638      	mov	r0, r7
 8007436:	f7fc fa87 	bl	8003948 <_printf_float>
 800743a:	1c42      	adds	r2, r0, #1
 800743c:	4606      	mov	r6, r0
 800743e:	d1d6      	bne.n	80073ee <_svfiprintf_r+0x176>
 8007440:	89ab      	ldrh	r3, [r5, #12]
 8007442:	065b      	lsls	r3, r3, #25
 8007444:	f53f af2c 	bmi.w	80072a0 <_svfiprintf_r+0x28>
 8007448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744a:	b01d      	add	sp, #116	; 0x74
 800744c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007450:	ab03      	add	r3, sp, #12
 8007452:	9300      	str	r3, [sp, #0]
 8007454:	462a      	mov	r2, r5
 8007456:	4b06      	ldr	r3, [pc, #24]	; (8007470 <_svfiprintf_r+0x1f8>)
 8007458:	a904      	add	r1, sp, #16
 800745a:	4638      	mov	r0, r7
 800745c:	f7fc fd18 	bl	8003e90 <_printf_i>
 8007460:	e7eb      	b.n	800743a <_svfiprintf_r+0x1c2>
 8007462:	bf00      	nop
 8007464:	08008aa4 	.word	0x08008aa4
 8007468:	08008aae 	.word	0x08008aae
 800746c:	08003949 	.word	0x08003949
 8007470:	080071c1 	.word	0x080071c1
 8007474:	08008aaa 	.word	0x08008aaa

08007478 <nan>:
 8007478:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007480 <nan+0x8>
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	00000000 	.word	0x00000000
 8007484:	7ff80000 	.word	0x7ff80000

08007488 <_sbrk_r>:
 8007488:	b538      	push	{r3, r4, r5, lr}
 800748a:	4d06      	ldr	r5, [pc, #24]	; (80074a4 <_sbrk_r+0x1c>)
 800748c:	2300      	movs	r3, #0
 800748e:	4604      	mov	r4, r0
 8007490:	4608      	mov	r0, r1
 8007492:	602b      	str	r3, [r5, #0]
 8007494:	f7fa fd4a 	bl	8001f2c <_sbrk>
 8007498:	1c43      	adds	r3, r0, #1
 800749a:	d102      	bne.n	80074a2 <_sbrk_r+0x1a>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	b103      	cbz	r3, 80074a2 <_sbrk_r+0x1a>
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	bd38      	pop	{r3, r4, r5, pc}
 80074a4:	200005d4 	.word	0x200005d4

080074a8 <strncmp>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	b16a      	cbz	r2, 80074c8 <strncmp+0x20>
 80074ac:	3901      	subs	r1, #1
 80074ae:	1884      	adds	r4, r0, r2
 80074b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80074b4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d103      	bne.n	80074c4 <strncmp+0x1c>
 80074bc:	42a0      	cmp	r0, r4
 80074be:	d001      	beq.n	80074c4 <strncmp+0x1c>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1f5      	bne.n	80074b0 <strncmp+0x8>
 80074c4:	1a98      	subs	r0, r3, r2
 80074c6:	bd10      	pop	{r4, pc}
 80074c8:	4610      	mov	r0, r2
 80074ca:	e7fc      	b.n	80074c6 <strncmp+0x1e>

080074cc <__ascii_wctomb>:
 80074cc:	b149      	cbz	r1, 80074e2 <__ascii_wctomb+0x16>
 80074ce:	2aff      	cmp	r2, #255	; 0xff
 80074d0:	bf85      	ittet	hi
 80074d2:	238a      	movhi	r3, #138	; 0x8a
 80074d4:	6003      	strhi	r3, [r0, #0]
 80074d6:	700a      	strbls	r2, [r1, #0]
 80074d8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80074dc:	bf98      	it	ls
 80074de:	2001      	movls	r0, #1
 80074e0:	4770      	bx	lr
 80074e2:	4608      	mov	r0, r1
 80074e4:	4770      	bx	lr
	...

080074e8 <__assert_func>:
 80074e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ea:	4614      	mov	r4, r2
 80074ec:	461a      	mov	r2, r3
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <__assert_func+0x2c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4605      	mov	r5, r0
 80074f4:	68d8      	ldr	r0, [r3, #12]
 80074f6:	b14c      	cbz	r4, 800750c <__assert_func+0x24>
 80074f8:	4b07      	ldr	r3, [pc, #28]	; (8007518 <__assert_func+0x30>)
 80074fa:	9100      	str	r1, [sp, #0]
 80074fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007500:	4906      	ldr	r1, [pc, #24]	; (800751c <__assert_func+0x34>)
 8007502:	462b      	mov	r3, r5
 8007504:	f000 f80e 	bl	8007524 <fiprintf>
 8007508:	f000 fa84 	bl	8007a14 <abort>
 800750c:	4b04      	ldr	r3, [pc, #16]	; (8007520 <__assert_func+0x38>)
 800750e:	461c      	mov	r4, r3
 8007510:	e7f3      	b.n	80074fa <__assert_func+0x12>
 8007512:	bf00      	nop
 8007514:	20000018 	.word	0x20000018
 8007518:	08008ab5 	.word	0x08008ab5
 800751c:	08008ac2 	.word	0x08008ac2
 8007520:	08008af0 	.word	0x08008af0

08007524 <fiprintf>:
 8007524:	b40e      	push	{r1, r2, r3}
 8007526:	b503      	push	{r0, r1, lr}
 8007528:	4601      	mov	r1, r0
 800752a:	ab03      	add	r3, sp, #12
 800752c:	4805      	ldr	r0, [pc, #20]	; (8007544 <fiprintf+0x20>)
 800752e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007532:	6800      	ldr	r0, [r0, #0]
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	f000 f87d 	bl	8007634 <_vfiprintf_r>
 800753a:	b002      	add	sp, #8
 800753c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007540:	b003      	add	sp, #12
 8007542:	4770      	bx	lr
 8007544:	20000018 	.word	0x20000018

08007548 <memmove>:
 8007548:	4288      	cmp	r0, r1
 800754a:	b510      	push	{r4, lr}
 800754c:	eb01 0402 	add.w	r4, r1, r2
 8007550:	d902      	bls.n	8007558 <memmove+0x10>
 8007552:	4284      	cmp	r4, r0
 8007554:	4623      	mov	r3, r4
 8007556:	d807      	bhi.n	8007568 <memmove+0x20>
 8007558:	1e43      	subs	r3, r0, #1
 800755a:	42a1      	cmp	r1, r4
 800755c:	d008      	beq.n	8007570 <memmove+0x28>
 800755e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007562:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007566:	e7f8      	b.n	800755a <memmove+0x12>
 8007568:	4402      	add	r2, r0
 800756a:	4601      	mov	r1, r0
 800756c:	428a      	cmp	r2, r1
 800756e:	d100      	bne.n	8007572 <memmove+0x2a>
 8007570:	bd10      	pop	{r4, pc}
 8007572:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007576:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800757a:	e7f7      	b.n	800756c <memmove+0x24>

0800757c <__malloc_lock>:
 800757c:	4801      	ldr	r0, [pc, #4]	; (8007584 <__malloc_lock+0x8>)
 800757e:	f000 bc09 	b.w	8007d94 <__retarget_lock_acquire_recursive>
 8007582:	bf00      	nop
 8007584:	200005dc 	.word	0x200005dc

08007588 <__malloc_unlock>:
 8007588:	4801      	ldr	r0, [pc, #4]	; (8007590 <__malloc_unlock+0x8>)
 800758a:	f000 bc04 	b.w	8007d96 <__retarget_lock_release_recursive>
 800758e:	bf00      	nop
 8007590:	200005dc 	.word	0x200005dc

08007594 <_realloc_r>:
 8007594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007596:	4607      	mov	r7, r0
 8007598:	4614      	mov	r4, r2
 800759a:	460e      	mov	r6, r1
 800759c:	b921      	cbnz	r1, 80075a8 <_realloc_r+0x14>
 800759e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80075a2:	4611      	mov	r1, r2
 80075a4:	f7ff bdb2 	b.w	800710c <_malloc_r>
 80075a8:	b922      	cbnz	r2, 80075b4 <_realloc_r+0x20>
 80075aa:	f7ff fd5f 	bl	800706c <_free_r>
 80075ae:	4625      	mov	r5, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b4:	f000 fc54 	bl	8007e60 <_malloc_usable_size_r>
 80075b8:	42a0      	cmp	r0, r4
 80075ba:	d20f      	bcs.n	80075dc <_realloc_r+0x48>
 80075bc:	4621      	mov	r1, r4
 80075be:	4638      	mov	r0, r7
 80075c0:	f7ff fda4 	bl	800710c <_malloc_r>
 80075c4:	4605      	mov	r5, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d0f2      	beq.n	80075b0 <_realloc_r+0x1c>
 80075ca:	4631      	mov	r1, r6
 80075cc:	4622      	mov	r2, r4
 80075ce:	f7ff f875 	bl	80066bc <memcpy>
 80075d2:	4631      	mov	r1, r6
 80075d4:	4638      	mov	r0, r7
 80075d6:	f7ff fd49 	bl	800706c <_free_r>
 80075da:	e7e9      	b.n	80075b0 <_realloc_r+0x1c>
 80075dc:	4635      	mov	r5, r6
 80075de:	e7e7      	b.n	80075b0 <_realloc_r+0x1c>

080075e0 <__sfputc_r>:
 80075e0:	6893      	ldr	r3, [r2, #8]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	b410      	push	{r4}
 80075e8:	6093      	str	r3, [r2, #8]
 80075ea:	da08      	bge.n	80075fe <__sfputc_r+0x1e>
 80075ec:	6994      	ldr	r4, [r2, #24]
 80075ee:	42a3      	cmp	r3, r4
 80075f0:	db01      	blt.n	80075f6 <__sfputc_r+0x16>
 80075f2:	290a      	cmp	r1, #10
 80075f4:	d103      	bne.n	80075fe <__sfputc_r+0x1e>
 80075f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075fa:	f000 b94b 	b.w	8007894 <__swbuf_r>
 80075fe:	6813      	ldr	r3, [r2, #0]
 8007600:	1c58      	adds	r0, r3, #1
 8007602:	6010      	str	r0, [r2, #0]
 8007604:	7019      	strb	r1, [r3, #0]
 8007606:	4608      	mov	r0, r1
 8007608:	f85d 4b04 	ldr.w	r4, [sp], #4
 800760c:	4770      	bx	lr

0800760e <__sfputs_r>:
 800760e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007610:	4606      	mov	r6, r0
 8007612:	460f      	mov	r7, r1
 8007614:	4614      	mov	r4, r2
 8007616:	18d5      	adds	r5, r2, r3
 8007618:	42ac      	cmp	r4, r5
 800761a:	d101      	bne.n	8007620 <__sfputs_r+0x12>
 800761c:	2000      	movs	r0, #0
 800761e:	e007      	b.n	8007630 <__sfputs_r+0x22>
 8007620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007624:	463a      	mov	r2, r7
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ffda 	bl	80075e0 <__sfputc_r>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d1f3      	bne.n	8007618 <__sfputs_r+0xa>
 8007630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007634 <_vfiprintf_r>:
 8007634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007638:	460d      	mov	r5, r1
 800763a:	b09d      	sub	sp, #116	; 0x74
 800763c:	4614      	mov	r4, r2
 800763e:	4698      	mov	r8, r3
 8007640:	4606      	mov	r6, r0
 8007642:	b118      	cbz	r0, 800764c <_vfiprintf_r+0x18>
 8007644:	6983      	ldr	r3, [r0, #24]
 8007646:	b90b      	cbnz	r3, 800764c <_vfiprintf_r+0x18>
 8007648:	f000 fb06 	bl	8007c58 <__sinit>
 800764c:	4b89      	ldr	r3, [pc, #548]	; (8007874 <_vfiprintf_r+0x240>)
 800764e:	429d      	cmp	r5, r3
 8007650:	d11b      	bne.n	800768a <_vfiprintf_r+0x56>
 8007652:	6875      	ldr	r5, [r6, #4]
 8007654:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007656:	07d9      	lsls	r1, r3, #31
 8007658:	d405      	bmi.n	8007666 <_vfiprintf_r+0x32>
 800765a:	89ab      	ldrh	r3, [r5, #12]
 800765c:	059a      	lsls	r2, r3, #22
 800765e:	d402      	bmi.n	8007666 <_vfiprintf_r+0x32>
 8007660:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007662:	f000 fb97 	bl	8007d94 <__retarget_lock_acquire_recursive>
 8007666:	89ab      	ldrh	r3, [r5, #12]
 8007668:	071b      	lsls	r3, r3, #28
 800766a:	d501      	bpl.n	8007670 <_vfiprintf_r+0x3c>
 800766c:	692b      	ldr	r3, [r5, #16]
 800766e:	b9eb      	cbnz	r3, 80076ac <_vfiprintf_r+0x78>
 8007670:	4629      	mov	r1, r5
 8007672:	4630      	mov	r0, r6
 8007674:	f000 f960 	bl	8007938 <__swsetup_r>
 8007678:	b1c0      	cbz	r0, 80076ac <_vfiprintf_r+0x78>
 800767a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800767c:	07dc      	lsls	r4, r3, #31
 800767e:	d50e      	bpl.n	800769e <_vfiprintf_r+0x6a>
 8007680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007684:	b01d      	add	sp, #116	; 0x74
 8007686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768a:	4b7b      	ldr	r3, [pc, #492]	; (8007878 <_vfiprintf_r+0x244>)
 800768c:	429d      	cmp	r5, r3
 800768e:	d101      	bne.n	8007694 <_vfiprintf_r+0x60>
 8007690:	68b5      	ldr	r5, [r6, #8]
 8007692:	e7df      	b.n	8007654 <_vfiprintf_r+0x20>
 8007694:	4b79      	ldr	r3, [pc, #484]	; (800787c <_vfiprintf_r+0x248>)
 8007696:	429d      	cmp	r5, r3
 8007698:	bf08      	it	eq
 800769a:	68f5      	ldreq	r5, [r6, #12]
 800769c:	e7da      	b.n	8007654 <_vfiprintf_r+0x20>
 800769e:	89ab      	ldrh	r3, [r5, #12]
 80076a0:	0598      	lsls	r0, r3, #22
 80076a2:	d4ed      	bmi.n	8007680 <_vfiprintf_r+0x4c>
 80076a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076a6:	f000 fb76 	bl	8007d96 <__retarget_lock_release_recursive>
 80076aa:	e7e9      	b.n	8007680 <_vfiprintf_r+0x4c>
 80076ac:	2300      	movs	r3, #0
 80076ae:	9309      	str	r3, [sp, #36]	; 0x24
 80076b0:	2320      	movs	r3, #32
 80076b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80076b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ba:	2330      	movs	r3, #48	; 0x30
 80076bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007880 <_vfiprintf_r+0x24c>
 80076c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076c4:	f04f 0901 	mov.w	r9, #1
 80076c8:	4623      	mov	r3, r4
 80076ca:	469a      	mov	sl, r3
 80076cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076d0:	b10a      	cbz	r2, 80076d6 <_vfiprintf_r+0xa2>
 80076d2:	2a25      	cmp	r2, #37	; 0x25
 80076d4:	d1f9      	bne.n	80076ca <_vfiprintf_r+0x96>
 80076d6:	ebba 0b04 	subs.w	fp, sl, r4
 80076da:	d00b      	beq.n	80076f4 <_vfiprintf_r+0xc0>
 80076dc:	465b      	mov	r3, fp
 80076de:	4622      	mov	r2, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	4630      	mov	r0, r6
 80076e4:	f7ff ff93 	bl	800760e <__sfputs_r>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f000 80aa 	beq.w	8007842 <_vfiprintf_r+0x20e>
 80076ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076f0:	445a      	add	r2, fp
 80076f2:	9209      	str	r2, [sp, #36]	; 0x24
 80076f4:	f89a 3000 	ldrb.w	r3, [sl]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f000 80a2 	beq.w	8007842 <_vfiprintf_r+0x20e>
 80076fe:	2300      	movs	r3, #0
 8007700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007704:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007708:	f10a 0a01 	add.w	sl, sl, #1
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007714:	931a      	str	r3, [sp, #104]	; 0x68
 8007716:	4654      	mov	r4, sl
 8007718:	2205      	movs	r2, #5
 800771a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800771e:	4858      	ldr	r0, [pc, #352]	; (8007880 <_vfiprintf_r+0x24c>)
 8007720:	f7f8 fd5e 	bl	80001e0 <memchr>
 8007724:	9a04      	ldr	r2, [sp, #16]
 8007726:	b9d8      	cbnz	r0, 8007760 <_vfiprintf_r+0x12c>
 8007728:	06d1      	lsls	r1, r2, #27
 800772a:	bf44      	itt	mi
 800772c:	2320      	movmi	r3, #32
 800772e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007732:	0713      	lsls	r3, r2, #28
 8007734:	bf44      	itt	mi
 8007736:	232b      	movmi	r3, #43	; 0x2b
 8007738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800773c:	f89a 3000 	ldrb.w	r3, [sl]
 8007740:	2b2a      	cmp	r3, #42	; 0x2a
 8007742:	d015      	beq.n	8007770 <_vfiprintf_r+0x13c>
 8007744:	9a07      	ldr	r2, [sp, #28]
 8007746:	4654      	mov	r4, sl
 8007748:	2000      	movs	r0, #0
 800774a:	f04f 0c0a 	mov.w	ip, #10
 800774e:	4621      	mov	r1, r4
 8007750:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007754:	3b30      	subs	r3, #48	; 0x30
 8007756:	2b09      	cmp	r3, #9
 8007758:	d94e      	bls.n	80077f8 <_vfiprintf_r+0x1c4>
 800775a:	b1b0      	cbz	r0, 800778a <_vfiprintf_r+0x156>
 800775c:	9207      	str	r2, [sp, #28]
 800775e:	e014      	b.n	800778a <_vfiprintf_r+0x156>
 8007760:	eba0 0308 	sub.w	r3, r0, r8
 8007764:	fa09 f303 	lsl.w	r3, r9, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	46a2      	mov	sl, r4
 800776e:	e7d2      	b.n	8007716 <_vfiprintf_r+0xe2>
 8007770:	9b03      	ldr	r3, [sp, #12]
 8007772:	1d19      	adds	r1, r3, #4
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	9103      	str	r1, [sp, #12]
 8007778:	2b00      	cmp	r3, #0
 800777a:	bfbb      	ittet	lt
 800777c:	425b      	neglt	r3, r3
 800777e:	f042 0202 	orrlt.w	r2, r2, #2
 8007782:	9307      	strge	r3, [sp, #28]
 8007784:	9307      	strlt	r3, [sp, #28]
 8007786:	bfb8      	it	lt
 8007788:	9204      	strlt	r2, [sp, #16]
 800778a:	7823      	ldrb	r3, [r4, #0]
 800778c:	2b2e      	cmp	r3, #46	; 0x2e
 800778e:	d10c      	bne.n	80077aa <_vfiprintf_r+0x176>
 8007790:	7863      	ldrb	r3, [r4, #1]
 8007792:	2b2a      	cmp	r3, #42	; 0x2a
 8007794:	d135      	bne.n	8007802 <_vfiprintf_r+0x1ce>
 8007796:	9b03      	ldr	r3, [sp, #12]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	9203      	str	r2, [sp, #12]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	bfb8      	it	lt
 80077a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80077a6:	3402      	adds	r4, #2
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007890 <_vfiprintf_r+0x25c>
 80077ae:	7821      	ldrb	r1, [r4, #0]
 80077b0:	2203      	movs	r2, #3
 80077b2:	4650      	mov	r0, sl
 80077b4:	f7f8 fd14 	bl	80001e0 <memchr>
 80077b8:	b140      	cbz	r0, 80077cc <_vfiprintf_r+0x198>
 80077ba:	2340      	movs	r3, #64	; 0x40
 80077bc:	eba0 000a 	sub.w	r0, r0, sl
 80077c0:	fa03 f000 	lsl.w	r0, r3, r0
 80077c4:	9b04      	ldr	r3, [sp, #16]
 80077c6:	4303      	orrs	r3, r0
 80077c8:	3401      	adds	r4, #1
 80077ca:	9304      	str	r3, [sp, #16]
 80077cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d0:	482c      	ldr	r0, [pc, #176]	; (8007884 <_vfiprintf_r+0x250>)
 80077d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077d6:	2206      	movs	r2, #6
 80077d8:	f7f8 fd02 	bl	80001e0 <memchr>
 80077dc:	2800      	cmp	r0, #0
 80077de:	d03f      	beq.n	8007860 <_vfiprintf_r+0x22c>
 80077e0:	4b29      	ldr	r3, [pc, #164]	; (8007888 <_vfiprintf_r+0x254>)
 80077e2:	bb1b      	cbnz	r3, 800782c <_vfiprintf_r+0x1f8>
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	3307      	adds	r3, #7
 80077e8:	f023 0307 	bic.w	r3, r3, #7
 80077ec:	3308      	adds	r3, #8
 80077ee:	9303      	str	r3, [sp, #12]
 80077f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f2:	443b      	add	r3, r7
 80077f4:	9309      	str	r3, [sp, #36]	; 0x24
 80077f6:	e767      	b.n	80076c8 <_vfiprintf_r+0x94>
 80077f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80077fc:	460c      	mov	r4, r1
 80077fe:	2001      	movs	r0, #1
 8007800:	e7a5      	b.n	800774e <_vfiprintf_r+0x11a>
 8007802:	2300      	movs	r3, #0
 8007804:	3401      	adds	r4, #1
 8007806:	9305      	str	r3, [sp, #20]
 8007808:	4619      	mov	r1, r3
 800780a:	f04f 0c0a 	mov.w	ip, #10
 800780e:	4620      	mov	r0, r4
 8007810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007814:	3a30      	subs	r2, #48	; 0x30
 8007816:	2a09      	cmp	r2, #9
 8007818:	d903      	bls.n	8007822 <_vfiprintf_r+0x1ee>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d0c5      	beq.n	80077aa <_vfiprintf_r+0x176>
 800781e:	9105      	str	r1, [sp, #20]
 8007820:	e7c3      	b.n	80077aa <_vfiprintf_r+0x176>
 8007822:	fb0c 2101 	mla	r1, ip, r1, r2
 8007826:	4604      	mov	r4, r0
 8007828:	2301      	movs	r3, #1
 800782a:	e7f0      	b.n	800780e <_vfiprintf_r+0x1da>
 800782c:	ab03      	add	r3, sp, #12
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	462a      	mov	r2, r5
 8007832:	4b16      	ldr	r3, [pc, #88]	; (800788c <_vfiprintf_r+0x258>)
 8007834:	a904      	add	r1, sp, #16
 8007836:	4630      	mov	r0, r6
 8007838:	f7fc f886 	bl	8003948 <_printf_float>
 800783c:	4607      	mov	r7, r0
 800783e:	1c78      	adds	r0, r7, #1
 8007840:	d1d6      	bne.n	80077f0 <_vfiprintf_r+0x1bc>
 8007842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007844:	07d9      	lsls	r1, r3, #31
 8007846:	d405      	bmi.n	8007854 <_vfiprintf_r+0x220>
 8007848:	89ab      	ldrh	r3, [r5, #12]
 800784a:	059a      	lsls	r2, r3, #22
 800784c:	d402      	bmi.n	8007854 <_vfiprintf_r+0x220>
 800784e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007850:	f000 faa1 	bl	8007d96 <__retarget_lock_release_recursive>
 8007854:	89ab      	ldrh	r3, [r5, #12]
 8007856:	065b      	lsls	r3, r3, #25
 8007858:	f53f af12 	bmi.w	8007680 <_vfiprintf_r+0x4c>
 800785c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800785e:	e711      	b.n	8007684 <_vfiprintf_r+0x50>
 8007860:	ab03      	add	r3, sp, #12
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	462a      	mov	r2, r5
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <_vfiprintf_r+0x258>)
 8007868:	a904      	add	r1, sp, #16
 800786a:	4630      	mov	r0, r6
 800786c:	f7fc fb10 	bl	8003e90 <_printf_i>
 8007870:	e7e4      	b.n	800783c <_vfiprintf_r+0x208>
 8007872:	bf00      	nop
 8007874:	08008b14 	.word	0x08008b14
 8007878:	08008b34 	.word	0x08008b34
 800787c:	08008af4 	.word	0x08008af4
 8007880:	08008aa4 	.word	0x08008aa4
 8007884:	08008aae 	.word	0x08008aae
 8007888:	08003949 	.word	0x08003949
 800788c:	0800760f 	.word	0x0800760f
 8007890:	08008aaa 	.word	0x08008aaa

08007894 <__swbuf_r>:
 8007894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007896:	460e      	mov	r6, r1
 8007898:	4614      	mov	r4, r2
 800789a:	4605      	mov	r5, r0
 800789c:	b118      	cbz	r0, 80078a6 <__swbuf_r+0x12>
 800789e:	6983      	ldr	r3, [r0, #24]
 80078a0:	b90b      	cbnz	r3, 80078a6 <__swbuf_r+0x12>
 80078a2:	f000 f9d9 	bl	8007c58 <__sinit>
 80078a6:	4b21      	ldr	r3, [pc, #132]	; (800792c <__swbuf_r+0x98>)
 80078a8:	429c      	cmp	r4, r3
 80078aa:	d12b      	bne.n	8007904 <__swbuf_r+0x70>
 80078ac:	686c      	ldr	r4, [r5, #4]
 80078ae:	69a3      	ldr	r3, [r4, #24]
 80078b0:	60a3      	str	r3, [r4, #8]
 80078b2:	89a3      	ldrh	r3, [r4, #12]
 80078b4:	071a      	lsls	r2, r3, #28
 80078b6:	d52f      	bpl.n	8007918 <__swbuf_r+0x84>
 80078b8:	6923      	ldr	r3, [r4, #16]
 80078ba:	b36b      	cbz	r3, 8007918 <__swbuf_r+0x84>
 80078bc:	6923      	ldr	r3, [r4, #16]
 80078be:	6820      	ldr	r0, [r4, #0]
 80078c0:	1ac0      	subs	r0, r0, r3
 80078c2:	6963      	ldr	r3, [r4, #20]
 80078c4:	b2f6      	uxtb	r6, r6
 80078c6:	4283      	cmp	r3, r0
 80078c8:	4637      	mov	r7, r6
 80078ca:	dc04      	bgt.n	80078d6 <__swbuf_r+0x42>
 80078cc:	4621      	mov	r1, r4
 80078ce:	4628      	mov	r0, r5
 80078d0:	f000 f92e 	bl	8007b30 <_fflush_r>
 80078d4:	bb30      	cbnz	r0, 8007924 <__swbuf_r+0x90>
 80078d6:	68a3      	ldr	r3, [r4, #8]
 80078d8:	3b01      	subs	r3, #1
 80078da:	60a3      	str	r3, [r4, #8]
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	6022      	str	r2, [r4, #0]
 80078e2:	701e      	strb	r6, [r3, #0]
 80078e4:	6963      	ldr	r3, [r4, #20]
 80078e6:	3001      	adds	r0, #1
 80078e8:	4283      	cmp	r3, r0
 80078ea:	d004      	beq.n	80078f6 <__swbuf_r+0x62>
 80078ec:	89a3      	ldrh	r3, [r4, #12]
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d506      	bpl.n	8007900 <__swbuf_r+0x6c>
 80078f2:	2e0a      	cmp	r6, #10
 80078f4:	d104      	bne.n	8007900 <__swbuf_r+0x6c>
 80078f6:	4621      	mov	r1, r4
 80078f8:	4628      	mov	r0, r5
 80078fa:	f000 f919 	bl	8007b30 <_fflush_r>
 80078fe:	b988      	cbnz	r0, 8007924 <__swbuf_r+0x90>
 8007900:	4638      	mov	r0, r7
 8007902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007904:	4b0a      	ldr	r3, [pc, #40]	; (8007930 <__swbuf_r+0x9c>)
 8007906:	429c      	cmp	r4, r3
 8007908:	d101      	bne.n	800790e <__swbuf_r+0x7a>
 800790a:	68ac      	ldr	r4, [r5, #8]
 800790c:	e7cf      	b.n	80078ae <__swbuf_r+0x1a>
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <__swbuf_r+0xa0>)
 8007910:	429c      	cmp	r4, r3
 8007912:	bf08      	it	eq
 8007914:	68ec      	ldreq	r4, [r5, #12]
 8007916:	e7ca      	b.n	80078ae <__swbuf_r+0x1a>
 8007918:	4621      	mov	r1, r4
 800791a:	4628      	mov	r0, r5
 800791c:	f000 f80c 	bl	8007938 <__swsetup_r>
 8007920:	2800      	cmp	r0, #0
 8007922:	d0cb      	beq.n	80078bc <__swbuf_r+0x28>
 8007924:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007928:	e7ea      	b.n	8007900 <__swbuf_r+0x6c>
 800792a:	bf00      	nop
 800792c:	08008b14 	.word	0x08008b14
 8007930:	08008b34 	.word	0x08008b34
 8007934:	08008af4 	.word	0x08008af4

08007938 <__swsetup_r>:
 8007938:	4b32      	ldr	r3, [pc, #200]	; (8007a04 <__swsetup_r+0xcc>)
 800793a:	b570      	push	{r4, r5, r6, lr}
 800793c:	681d      	ldr	r5, [r3, #0]
 800793e:	4606      	mov	r6, r0
 8007940:	460c      	mov	r4, r1
 8007942:	b125      	cbz	r5, 800794e <__swsetup_r+0x16>
 8007944:	69ab      	ldr	r3, [r5, #24]
 8007946:	b913      	cbnz	r3, 800794e <__swsetup_r+0x16>
 8007948:	4628      	mov	r0, r5
 800794a:	f000 f985 	bl	8007c58 <__sinit>
 800794e:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <__swsetup_r+0xd0>)
 8007950:	429c      	cmp	r4, r3
 8007952:	d10f      	bne.n	8007974 <__swsetup_r+0x3c>
 8007954:	686c      	ldr	r4, [r5, #4]
 8007956:	89a3      	ldrh	r3, [r4, #12]
 8007958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800795c:	0719      	lsls	r1, r3, #28
 800795e:	d42c      	bmi.n	80079ba <__swsetup_r+0x82>
 8007960:	06dd      	lsls	r5, r3, #27
 8007962:	d411      	bmi.n	8007988 <__swsetup_r+0x50>
 8007964:	2309      	movs	r3, #9
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800796c:	81a3      	strh	r3, [r4, #12]
 800796e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007972:	e03e      	b.n	80079f2 <__swsetup_r+0xba>
 8007974:	4b25      	ldr	r3, [pc, #148]	; (8007a0c <__swsetup_r+0xd4>)
 8007976:	429c      	cmp	r4, r3
 8007978:	d101      	bne.n	800797e <__swsetup_r+0x46>
 800797a:	68ac      	ldr	r4, [r5, #8]
 800797c:	e7eb      	b.n	8007956 <__swsetup_r+0x1e>
 800797e:	4b24      	ldr	r3, [pc, #144]	; (8007a10 <__swsetup_r+0xd8>)
 8007980:	429c      	cmp	r4, r3
 8007982:	bf08      	it	eq
 8007984:	68ec      	ldreq	r4, [r5, #12]
 8007986:	e7e6      	b.n	8007956 <__swsetup_r+0x1e>
 8007988:	0758      	lsls	r0, r3, #29
 800798a:	d512      	bpl.n	80079b2 <__swsetup_r+0x7a>
 800798c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800798e:	b141      	cbz	r1, 80079a2 <__swsetup_r+0x6a>
 8007990:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007994:	4299      	cmp	r1, r3
 8007996:	d002      	beq.n	800799e <__swsetup_r+0x66>
 8007998:	4630      	mov	r0, r6
 800799a:	f7ff fb67 	bl	800706c <_free_r>
 800799e:	2300      	movs	r3, #0
 80079a0:	6363      	str	r3, [r4, #52]	; 0x34
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80079a8:	81a3      	strh	r3, [r4, #12]
 80079aa:	2300      	movs	r3, #0
 80079ac:	6063      	str	r3, [r4, #4]
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f043 0308 	orr.w	r3, r3, #8
 80079b8:	81a3      	strh	r3, [r4, #12]
 80079ba:	6923      	ldr	r3, [r4, #16]
 80079bc:	b94b      	cbnz	r3, 80079d2 <__swsetup_r+0x9a>
 80079be:	89a3      	ldrh	r3, [r4, #12]
 80079c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079c8:	d003      	beq.n	80079d2 <__swsetup_r+0x9a>
 80079ca:	4621      	mov	r1, r4
 80079cc:	4630      	mov	r0, r6
 80079ce:	f000 fa07 	bl	8007de0 <__smakebuf_r>
 80079d2:	89a0      	ldrh	r0, [r4, #12]
 80079d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079d8:	f010 0301 	ands.w	r3, r0, #1
 80079dc:	d00a      	beq.n	80079f4 <__swsetup_r+0xbc>
 80079de:	2300      	movs	r3, #0
 80079e0:	60a3      	str	r3, [r4, #8]
 80079e2:	6963      	ldr	r3, [r4, #20]
 80079e4:	425b      	negs	r3, r3
 80079e6:	61a3      	str	r3, [r4, #24]
 80079e8:	6923      	ldr	r3, [r4, #16]
 80079ea:	b943      	cbnz	r3, 80079fe <__swsetup_r+0xc6>
 80079ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079f0:	d1ba      	bne.n	8007968 <__swsetup_r+0x30>
 80079f2:	bd70      	pop	{r4, r5, r6, pc}
 80079f4:	0781      	lsls	r1, r0, #30
 80079f6:	bf58      	it	pl
 80079f8:	6963      	ldrpl	r3, [r4, #20]
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	e7f4      	b.n	80079e8 <__swsetup_r+0xb0>
 80079fe:	2000      	movs	r0, #0
 8007a00:	e7f7      	b.n	80079f2 <__swsetup_r+0xba>
 8007a02:	bf00      	nop
 8007a04:	20000018 	.word	0x20000018
 8007a08:	08008b14 	.word	0x08008b14
 8007a0c:	08008b34 	.word	0x08008b34
 8007a10:	08008af4 	.word	0x08008af4

08007a14 <abort>:
 8007a14:	b508      	push	{r3, lr}
 8007a16:	2006      	movs	r0, #6
 8007a18:	f000 fa52 	bl	8007ec0 <raise>
 8007a1c:	2001      	movs	r0, #1
 8007a1e:	f7fa fa55 	bl	8001ecc <_exit>
	...

08007a24 <__sflush_r>:
 8007a24:	898a      	ldrh	r2, [r1, #12]
 8007a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a2a:	4605      	mov	r5, r0
 8007a2c:	0710      	lsls	r0, r2, #28
 8007a2e:	460c      	mov	r4, r1
 8007a30:	d458      	bmi.n	8007ae4 <__sflush_r+0xc0>
 8007a32:	684b      	ldr	r3, [r1, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	dc05      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc02      	bgt.n	8007a44 <__sflush_r+0x20>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d0f9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a50:	682f      	ldr	r7, [r5, #0]
 8007a52:	602b      	str	r3, [r5, #0]
 8007a54:	d032      	beq.n	8007abc <__sflush_r+0x98>
 8007a56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a58:	89a3      	ldrh	r3, [r4, #12]
 8007a5a:	075a      	lsls	r2, r3, #29
 8007a5c:	d505      	bpl.n	8007a6a <__sflush_r+0x46>
 8007a5e:	6863      	ldr	r3, [r4, #4]
 8007a60:	1ac0      	subs	r0, r0, r3
 8007a62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a64:	b10b      	cbz	r3, 8007a6a <__sflush_r+0x46>
 8007a66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a68:	1ac0      	subs	r0, r0, r3
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	d106      	bne.n	8007a8a <__sflush_r+0x66>
 8007a7c:	6829      	ldr	r1, [r5, #0]
 8007a7e:	291d      	cmp	r1, #29
 8007a80:	d82c      	bhi.n	8007adc <__sflush_r+0xb8>
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <__sflush_r+0x108>)
 8007a84:	40ca      	lsrs	r2, r1
 8007a86:	07d6      	lsls	r6, r2, #31
 8007a88:	d528      	bpl.n	8007adc <__sflush_r+0xb8>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6062      	str	r2, [r4, #4]
 8007a8e:	04d9      	lsls	r1, r3, #19
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	6022      	str	r2, [r4, #0]
 8007a94:	d504      	bpl.n	8007aa0 <__sflush_r+0x7c>
 8007a96:	1c42      	adds	r2, r0, #1
 8007a98:	d101      	bne.n	8007a9e <__sflush_r+0x7a>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b903      	cbnz	r3, 8007aa0 <__sflush_r+0x7c>
 8007a9e:	6560      	str	r0, [r4, #84]	; 0x54
 8007aa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa2:	602f      	str	r7, [r5, #0]
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d0ca      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__sflush_r+0x92>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f7ff fadb 	bl	800706c <_free_r>
 8007ab6:	2000      	movs	r0, #0
 8007ab8:	6360      	str	r0, [r4, #52]	; 0x34
 8007aba:	e7c1      	b.n	8007a40 <__sflush_r+0x1c>
 8007abc:	6a21      	ldr	r1, [r4, #32]
 8007abe:	2301      	movs	r3, #1
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	47b0      	blx	r6
 8007ac4:	1c41      	adds	r1, r0, #1
 8007ac6:	d1c7      	bne.n	8007a58 <__sflush_r+0x34>
 8007ac8:	682b      	ldr	r3, [r5, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0c4      	beq.n	8007a58 <__sflush_r+0x34>
 8007ace:	2b1d      	cmp	r3, #29
 8007ad0:	d001      	beq.n	8007ad6 <__sflush_r+0xb2>
 8007ad2:	2b16      	cmp	r3, #22
 8007ad4:	d101      	bne.n	8007ada <__sflush_r+0xb6>
 8007ad6:	602f      	str	r7, [r5, #0]
 8007ad8:	e7b1      	b.n	8007a3e <__sflush_r+0x1a>
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	e7ad      	b.n	8007a40 <__sflush_r+0x1c>
 8007ae4:	690f      	ldr	r7, [r1, #16]
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	d0a9      	beq.n	8007a3e <__sflush_r+0x1a>
 8007aea:	0793      	lsls	r3, r2, #30
 8007aec:	680e      	ldr	r6, [r1, #0]
 8007aee:	bf08      	it	eq
 8007af0:	694b      	ldreq	r3, [r1, #20]
 8007af2:	600f      	str	r7, [r1, #0]
 8007af4:	bf18      	it	ne
 8007af6:	2300      	movne	r3, #0
 8007af8:	eba6 0807 	sub.w	r8, r6, r7
 8007afc:	608b      	str	r3, [r1, #8]
 8007afe:	f1b8 0f00 	cmp.w	r8, #0
 8007b02:	dd9c      	ble.n	8007a3e <__sflush_r+0x1a>
 8007b04:	6a21      	ldr	r1, [r4, #32]
 8007b06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b08:	4643      	mov	r3, r8
 8007b0a:	463a      	mov	r2, r7
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	47b0      	blx	r6
 8007b10:	2800      	cmp	r0, #0
 8007b12:	dc06      	bgt.n	8007b22 <__sflush_r+0xfe>
 8007b14:	89a3      	ldrh	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b20:	e78e      	b.n	8007a40 <__sflush_r+0x1c>
 8007b22:	4407      	add	r7, r0
 8007b24:	eba8 0800 	sub.w	r8, r8, r0
 8007b28:	e7e9      	b.n	8007afe <__sflush_r+0xda>
 8007b2a:	bf00      	nop
 8007b2c:	20400001 	.word	0x20400001

08007b30 <_fflush_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b913      	cbnz	r3, 8007b40 <_fflush_r+0x10>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	b118      	cbz	r0, 8007b4a <_fflush_r+0x1a>
 8007b42:	6983      	ldr	r3, [r0, #24]
 8007b44:	b90b      	cbnz	r3, 8007b4a <_fflush_r+0x1a>
 8007b46:	f000 f887 	bl	8007c58 <__sinit>
 8007b4a:	4b14      	ldr	r3, [pc, #80]	; (8007b9c <_fflush_r+0x6c>)
 8007b4c:	429c      	cmp	r4, r3
 8007b4e:	d11b      	bne.n	8007b88 <_fflush_r+0x58>
 8007b50:	686c      	ldr	r4, [r5, #4]
 8007b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d0ef      	beq.n	8007b3a <_fflush_r+0xa>
 8007b5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b5c:	07d0      	lsls	r0, r2, #31
 8007b5e:	d404      	bmi.n	8007b6a <_fflush_r+0x3a>
 8007b60:	0599      	lsls	r1, r3, #22
 8007b62:	d402      	bmi.n	8007b6a <_fflush_r+0x3a>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f000 f915 	bl	8007d94 <__retarget_lock_acquire_recursive>
 8007b6a:	4628      	mov	r0, r5
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	f7ff ff59 	bl	8007a24 <__sflush_r>
 8007b72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b74:	07da      	lsls	r2, r3, #31
 8007b76:	4605      	mov	r5, r0
 8007b78:	d4e0      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b7a:	89a3      	ldrh	r3, [r4, #12]
 8007b7c:	059b      	lsls	r3, r3, #22
 8007b7e:	d4dd      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b82:	f000 f908 	bl	8007d96 <__retarget_lock_release_recursive>
 8007b86:	e7d9      	b.n	8007b3c <_fflush_r+0xc>
 8007b88:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <_fflush_r+0x70>)
 8007b8a:	429c      	cmp	r4, r3
 8007b8c:	d101      	bne.n	8007b92 <_fflush_r+0x62>
 8007b8e:	68ac      	ldr	r4, [r5, #8]
 8007b90:	e7df      	b.n	8007b52 <_fflush_r+0x22>
 8007b92:	4b04      	ldr	r3, [pc, #16]	; (8007ba4 <_fflush_r+0x74>)
 8007b94:	429c      	cmp	r4, r3
 8007b96:	bf08      	it	eq
 8007b98:	68ec      	ldreq	r4, [r5, #12]
 8007b9a:	e7da      	b.n	8007b52 <_fflush_r+0x22>
 8007b9c:	08008b14 	.word	0x08008b14
 8007ba0:	08008b34 	.word	0x08008b34
 8007ba4:	08008af4 	.word	0x08008af4

08007ba8 <std>:
 8007ba8:	2300      	movs	r3, #0
 8007baa:	b510      	push	{r4, lr}
 8007bac:	4604      	mov	r4, r0
 8007bae:	e9c0 3300 	strd	r3, r3, [r0]
 8007bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bb6:	6083      	str	r3, [r0, #8]
 8007bb8:	8181      	strh	r1, [r0, #12]
 8007bba:	6643      	str	r3, [r0, #100]	; 0x64
 8007bbc:	81c2      	strh	r2, [r0, #14]
 8007bbe:	6183      	str	r3, [r0, #24]
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	2208      	movs	r2, #8
 8007bc4:	305c      	adds	r0, #92	; 0x5c
 8007bc6:	f7fb fe17 	bl	80037f8 <memset>
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <std+0x38>)
 8007bcc:	6263      	str	r3, [r4, #36]	; 0x24
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <std+0x3c>)
 8007bd0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bd2:	4b05      	ldr	r3, [pc, #20]	; (8007be8 <std+0x40>)
 8007bd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bd6:	4b05      	ldr	r3, [pc, #20]	; (8007bec <std+0x44>)
 8007bd8:	6224      	str	r4, [r4, #32]
 8007bda:	6323      	str	r3, [r4, #48]	; 0x30
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	bf00      	nop
 8007be0:	08007ef9 	.word	0x08007ef9
 8007be4:	08007f1b 	.word	0x08007f1b
 8007be8:	08007f53 	.word	0x08007f53
 8007bec:	08007f77 	.word	0x08007f77

08007bf0 <_cleanup_r>:
 8007bf0:	4901      	ldr	r1, [pc, #4]	; (8007bf8 <_cleanup_r+0x8>)
 8007bf2:	f000 b8af 	b.w	8007d54 <_fwalk_reent>
 8007bf6:	bf00      	nop
 8007bf8:	08007b31 	.word	0x08007b31

08007bfc <__sfmoreglue>:
 8007bfc:	b570      	push	{r4, r5, r6, lr}
 8007bfe:	1e4a      	subs	r2, r1, #1
 8007c00:	2568      	movs	r5, #104	; 0x68
 8007c02:	4355      	muls	r5, r2
 8007c04:	460e      	mov	r6, r1
 8007c06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c0a:	f7ff fa7f 	bl	800710c <_malloc_r>
 8007c0e:	4604      	mov	r4, r0
 8007c10:	b140      	cbz	r0, 8007c24 <__sfmoreglue+0x28>
 8007c12:	2100      	movs	r1, #0
 8007c14:	e9c0 1600 	strd	r1, r6, [r0]
 8007c18:	300c      	adds	r0, #12
 8007c1a:	60a0      	str	r0, [r4, #8]
 8007c1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c20:	f7fb fdea 	bl	80037f8 <memset>
 8007c24:	4620      	mov	r0, r4
 8007c26:	bd70      	pop	{r4, r5, r6, pc}

08007c28 <__sfp_lock_acquire>:
 8007c28:	4801      	ldr	r0, [pc, #4]	; (8007c30 <__sfp_lock_acquire+0x8>)
 8007c2a:	f000 b8b3 	b.w	8007d94 <__retarget_lock_acquire_recursive>
 8007c2e:	bf00      	nop
 8007c30:	200005e0 	.word	0x200005e0

08007c34 <__sfp_lock_release>:
 8007c34:	4801      	ldr	r0, [pc, #4]	; (8007c3c <__sfp_lock_release+0x8>)
 8007c36:	f000 b8ae 	b.w	8007d96 <__retarget_lock_release_recursive>
 8007c3a:	bf00      	nop
 8007c3c:	200005e0 	.word	0x200005e0

08007c40 <__sinit_lock_acquire>:
 8007c40:	4801      	ldr	r0, [pc, #4]	; (8007c48 <__sinit_lock_acquire+0x8>)
 8007c42:	f000 b8a7 	b.w	8007d94 <__retarget_lock_acquire_recursive>
 8007c46:	bf00      	nop
 8007c48:	200005db 	.word	0x200005db

08007c4c <__sinit_lock_release>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	; (8007c54 <__sinit_lock_release+0x8>)
 8007c4e:	f000 b8a2 	b.w	8007d96 <__retarget_lock_release_recursive>
 8007c52:	bf00      	nop
 8007c54:	200005db 	.word	0x200005db

08007c58 <__sinit>:
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	f7ff fff0 	bl	8007c40 <__sinit_lock_acquire>
 8007c60:	69a3      	ldr	r3, [r4, #24]
 8007c62:	b11b      	cbz	r3, 8007c6c <__sinit+0x14>
 8007c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c68:	f7ff bff0 	b.w	8007c4c <__sinit_lock_release>
 8007c6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c70:	6523      	str	r3, [r4, #80]	; 0x50
 8007c72:	4b13      	ldr	r3, [pc, #76]	; (8007cc0 <__sinit+0x68>)
 8007c74:	4a13      	ldr	r2, [pc, #76]	; (8007cc4 <__sinit+0x6c>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c7a:	42a3      	cmp	r3, r4
 8007c7c:	bf04      	itt	eq
 8007c7e:	2301      	moveq	r3, #1
 8007c80:	61a3      	streq	r3, [r4, #24]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f820 	bl	8007cc8 <__sfp>
 8007c88:	6060      	str	r0, [r4, #4]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f81c 	bl	8007cc8 <__sfp>
 8007c90:	60a0      	str	r0, [r4, #8]
 8007c92:	4620      	mov	r0, r4
 8007c94:	f000 f818 	bl	8007cc8 <__sfp>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	60e0      	str	r0, [r4, #12]
 8007c9c:	2104      	movs	r1, #4
 8007c9e:	6860      	ldr	r0, [r4, #4]
 8007ca0:	f7ff ff82 	bl	8007ba8 <std>
 8007ca4:	68a0      	ldr	r0, [r4, #8]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	2109      	movs	r1, #9
 8007caa:	f7ff ff7d 	bl	8007ba8 <std>
 8007cae:	68e0      	ldr	r0, [r4, #12]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	2112      	movs	r1, #18
 8007cb4:	f7ff ff78 	bl	8007ba8 <std>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	61a3      	str	r3, [r4, #24]
 8007cbc:	e7d2      	b.n	8007c64 <__sinit+0xc>
 8007cbe:	bf00      	nop
 8007cc0:	080086a0 	.word	0x080086a0
 8007cc4:	08007bf1 	.word	0x08007bf1

08007cc8 <__sfp>:
 8007cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cca:	4607      	mov	r7, r0
 8007ccc:	f7ff ffac 	bl	8007c28 <__sfp_lock_acquire>
 8007cd0:	4b1e      	ldr	r3, [pc, #120]	; (8007d4c <__sfp+0x84>)
 8007cd2:	681e      	ldr	r6, [r3, #0]
 8007cd4:	69b3      	ldr	r3, [r6, #24]
 8007cd6:	b913      	cbnz	r3, 8007cde <__sfp+0x16>
 8007cd8:	4630      	mov	r0, r6
 8007cda:	f7ff ffbd 	bl	8007c58 <__sinit>
 8007cde:	3648      	adds	r6, #72	; 0x48
 8007ce0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ce4:	3b01      	subs	r3, #1
 8007ce6:	d503      	bpl.n	8007cf0 <__sfp+0x28>
 8007ce8:	6833      	ldr	r3, [r6, #0]
 8007cea:	b30b      	cbz	r3, 8007d30 <__sfp+0x68>
 8007cec:	6836      	ldr	r6, [r6, #0]
 8007cee:	e7f7      	b.n	8007ce0 <__sfp+0x18>
 8007cf0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cf4:	b9d5      	cbnz	r5, 8007d2c <__sfp+0x64>
 8007cf6:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <__sfp+0x88>)
 8007cf8:	60e3      	str	r3, [r4, #12]
 8007cfa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cfe:	6665      	str	r5, [r4, #100]	; 0x64
 8007d00:	f000 f847 	bl	8007d92 <__retarget_lock_init_recursive>
 8007d04:	f7ff ff96 	bl	8007c34 <__sfp_lock_release>
 8007d08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d10:	6025      	str	r5, [r4, #0]
 8007d12:	61a5      	str	r5, [r4, #24]
 8007d14:	2208      	movs	r2, #8
 8007d16:	4629      	mov	r1, r5
 8007d18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d1c:	f7fb fd6c 	bl	80037f8 <memset>
 8007d20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d28:	4620      	mov	r0, r4
 8007d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d2c:	3468      	adds	r4, #104	; 0x68
 8007d2e:	e7d9      	b.n	8007ce4 <__sfp+0x1c>
 8007d30:	2104      	movs	r1, #4
 8007d32:	4638      	mov	r0, r7
 8007d34:	f7ff ff62 	bl	8007bfc <__sfmoreglue>
 8007d38:	4604      	mov	r4, r0
 8007d3a:	6030      	str	r0, [r6, #0]
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d1d5      	bne.n	8007cec <__sfp+0x24>
 8007d40:	f7ff ff78 	bl	8007c34 <__sfp_lock_release>
 8007d44:	230c      	movs	r3, #12
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	e7ee      	b.n	8007d28 <__sfp+0x60>
 8007d4a:	bf00      	nop
 8007d4c:	080086a0 	.word	0x080086a0
 8007d50:	ffff0001 	.word	0xffff0001

08007d54 <_fwalk_reent>:
 8007d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d58:	4606      	mov	r6, r0
 8007d5a:	4688      	mov	r8, r1
 8007d5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d60:	2700      	movs	r7, #0
 8007d62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d66:	f1b9 0901 	subs.w	r9, r9, #1
 8007d6a:	d505      	bpl.n	8007d78 <_fwalk_reent+0x24>
 8007d6c:	6824      	ldr	r4, [r4, #0]
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	d1f7      	bne.n	8007d62 <_fwalk_reent+0xe>
 8007d72:	4638      	mov	r0, r7
 8007d74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d78:	89ab      	ldrh	r3, [r5, #12]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d907      	bls.n	8007d8e <_fwalk_reent+0x3a>
 8007d7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d82:	3301      	adds	r3, #1
 8007d84:	d003      	beq.n	8007d8e <_fwalk_reent+0x3a>
 8007d86:	4629      	mov	r1, r5
 8007d88:	4630      	mov	r0, r6
 8007d8a:	47c0      	blx	r8
 8007d8c:	4307      	orrs	r7, r0
 8007d8e:	3568      	adds	r5, #104	; 0x68
 8007d90:	e7e9      	b.n	8007d66 <_fwalk_reent+0x12>

08007d92 <__retarget_lock_init_recursive>:
 8007d92:	4770      	bx	lr

08007d94 <__retarget_lock_acquire_recursive>:
 8007d94:	4770      	bx	lr

08007d96 <__retarget_lock_release_recursive>:
 8007d96:	4770      	bx	lr

08007d98 <__swhatbuf_r>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	460e      	mov	r6, r1
 8007d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da0:	2900      	cmp	r1, #0
 8007da2:	b096      	sub	sp, #88	; 0x58
 8007da4:	4614      	mov	r4, r2
 8007da6:	461d      	mov	r5, r3
 8007da8:	da07      	bge.n	8007dba <__swhatbuf_r+0x22>
 8007daa:	2300      	movs	r3, #0
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	89b3      	ldrh	r3, [r6, #12]
 8007db0:	061a      	lsls	r2, r3, #24
 8007db2:	d410      	bmi.n	8007dd6 <__swhatbuf_r+0x3e>
 8007db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db8:	e00e      	b.n	8007dd8 <__swhatbuf_r+0x40>
 8007dba:	466a      	mov	r2, sp
 8007dbc:	f000 f902 	bl	8007fc4 <_fstat_r>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	dbf2      	blt.n	8007daa <__swhatbuf_r+0x12>
 8007dc4:	9a01      	ldr	r2, [sp, #4]
 8007dc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dce:	425a      	negs	r2, r3
 8007dd0:	415a      	adcs	r2, r3
 8007dd2:	602a      	str	r2, [r5, #0]
 8007dd4:	e7ee      	b.n	8007db4 <__swhatbuf_r+0x1c>
 8007dd6:	2340      	movs	r3, #64	; 0x40
 8007dd8:	2000      	movs	r0, #0
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	b016      	add	sp, #88	; 0x58
 8007dde:	bd70      	pop	{r4, r5, r6, pc}

08007de0 <__smakebuf_r>:
 8007de0:	898b      	ldrh	r3, [r1, #12]
 8007de2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007de4:	079d      	lsls	r5, r3, #30
 8007de6:	4606      	mov	r6, r0
 8007de8:	460c      	mov	r4, r1
 8007dea:	d507      	bpl.n	8007dfc <__smakebuf_r+0x1c>
 8007dec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007df0:	6023      	str	r3, [r4, #0]
 8007df2:	6123      	str	r3, [r4, #16]
 8007df4:	2301      	movs	r3, #1
 8007df6:	6163      	str	r3, [r4, #20]
 8007df8:	b002      	add	sp, #8
 8007dfa:	bd70      	pop	{r4, r5, r6, pc}
 8007dfc:	ab01      	add	r3, sp, #4
 8007dfe:	466a      	mov	r2, sp
 8007e00:	f7ff ffca 	bl	8007d98 <__swhatbuf_r>
 8007e04:	9900      	ldr	r1, [sp, #0]
 8007e06:	4605      	mov	r5, r0
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f7ff f97f 	bl	800710c <_malloc_r>
 8007e0e:	b948      	cbnz	r0, 8007e24 <__smakebuf_r+0x44>
 8007e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e14:	059a      	lsls	r2, r3, #22
 8007e16:	d4ef      	bmi.n	8007df8 <__smakebuf_r+0x18>
 8007e18:	f023 0303 	bic.w	r3, r3, #3
 8007e1c:	f043 0302 	orr.w	r3, r3, #2
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	e7e3      	b.n	8007dec <__smakebuf_r+0xc>
 8007e24:	4b0d      	ldr	r3, [pc, #52]	; (8007e5c <__smakebuf_r+0x7c>)
 8007e26:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	6020      	str	r0, [r4, #0]
 8007e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	9b00      	ldr	r3, [sp, #0]
 8007e34:	6163      	str	r3, [r4, #20]
 8007e36:	9b01      	ldr	r3, [sp, #4]
 8007e38:	6120      	str	r0, [r4, #16]
 8007e3a:	b15b      	cbz	r3, 8007e54 <__smakebuf_r+0x74>
 8007e3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e40:	4630      	mov	r0, r6
 8007e42:	f000 f8d1 	bl	8007fe8 <_isatty_r>
 8007e46:	b128      	cbz	r0, 8007e54 <__smakebuf_r+0x74>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	f023 0303 	bic.w	r3, r3, #3
 8007e4e:	f043 0301 	orr.w	r3, r3, #1
 8007e52:	81a3      	strh	r3, [r4, #12]
 8007e54:	89a0      	ldrh	r0, [r4, #12]
 8007e56:	4305      	orrs	r5, r0
 8007e58:	81a5      	strh	r5, [r4, #12]
 8007e5a:	e7cd      	b.n	8007df8 <__smakebuf_r+0x18>
 8007e5c:	08007bf1 	.word	0x08007bf1

08007e60 <_malloc_usable_size_r>:
 8007e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e64:	1f18      	subs	r0, r3, #4
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bfbc      	itt	lt
 8007e6a:	580b      	ldrlt	r3, [r1, r0]
 8007e6c:	18c0      	addlt	r0, r0, r3
 8007e6e:	4770      	bx	lr

08007e70 <_raise_r>:
 8007e70:	291f      	cmp	r1, #31
 8007e72:	b538      	push	{r3, r4, r5, lr}
 8007e74:	4604      	mov	r4, r0
 8007e76:	460d      	mov	r5, r1
 8007e78:	d904      	bls.n	8007e84 <_raise_r+0x14>
 8007e7a:	2316      	movs	r3, #22
 8007e7c:	6003      	str	r3, [r0, #0]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e82:	bd38      	pop	{r3, r4, r5, pc}
 8007e84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e86:	b112      	cbz	r2, 8007e8e <_raise_r+0x1e>
 8007e88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e8c:	b94b      	cbnz	r3, 8007ea2 <_raise_r+0x32>
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f830 	bl	8007ef4 <_getpid_r>
 8007e94:	462a      	mov	r2, r5
 8007e96:	4601      	mov	r1, r0
 8007e98:	4620      	mov	r0, r4
 8007e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e9e:	f000 b817 	b.w	8007ed0 <_kill_r>
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d00a      	beq.n	8007ebc <_raise_r+0x4c>
 8007ea6:	1c59      	adds	r1, r3, #1
 8007ea8:	d103      	bne.n	8007eb2 <_raise_r+0x42>
 8007eaa:	2316      	movs	r3, #22
 8007eac:	6003      	str	r3, [r0, #0]
 8007eae:	2001      	movs	r0, #1
 8007eb0:	e7e7      	b.n	8007e82 <_raise_r+0x12>
 8007eb2:	2400      	movs	r4, #0
 8007eb4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007eb8:	4628      	mov	r0, r5
 8007eba:	4798      	blx	r3
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	e7e0      	b.n	8007e82 <_raise_r+0x12>

08007ec0 <raise>:
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <raise+0xc>)
 8007ec2:	4601      	mov	r1, r0
 8007ec4:	6818      	ldr	r0, [r3, #0]
 8007ec6:	f7ff bfd3 	b.w	8007e70 <_raise_r>
 8007eca:	bf00      	nop
 8007ecc:	20000018 	.word	0x20000018

08007ed0 <_kill_r>:
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4d07      	ldr	r5, [pc, #28]	; (8007ef0 <_kill_r+0x20>)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	4604      	mov	r4, r0
 8007ed8:	4608      	mov	r0, r1
 8007eda:	4611      	mov	r1, r2
 8007edc:	602b      	str	r3, [r5, #0]
 8007ede:	f7f9 ffed 	bl	8001ebc <_kill>
 8007ee2:	1c43      	adds	r3, r0, #1
 8007ee4:	d102      	bne.n	8007eec <_kill_r+0x1c>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b103      	cbz	r3, 8007eec <_kill_r+0x1c>
 8007eea:	6023      	str	r3, [r4, #0]
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
 8007eee:	bf00      	nop
 8007ef0:	200005d4 	.word	0x200005d4

08007ef4 <_getpid_r>:
 8007ef4:	f7f9 bfe0 	b.w	8001eb8 <_getpid>

08007ef8 <__sread>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	f000 f894 	bl	800802c <_read_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	bfab      	itete	ge
 8007f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f0c:	181b      	addge	r3, r3, r0
 8007f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f12:	bfac      	ite	ge
 8007f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f16:	81a3      	strhlt	r3, [r4, #12]
 8007f18:	bd10      	pop	{r4, pc}

08007f1a <__swrite>:
 8007f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	461f      	mov	r7, r3
 8007f20:	898b      	ldrh	r3, [r1, #12]
 8007f22:	05db      	lsls	r3, r3, #23
 8007f24:	4605      	mov	r5, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4616      	mov	r6, r2
 8007f2a:	d505      	bpl.n	8007f38 <__swrite+0x1e>
 8007f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f30:	2302      	movs	r3, #2
 8007f32:	2200      	movs	r2, #0
 8007f34:	f000 f868 	bl	8008008 <_lseek_r>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	4632      	mov	r2, r6
 8007f46:	463b      	mov	r3, r7
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	f000 b817 	b.w	8007f80 <_write_r>

08007f52 <__sseek>:
 8007f52:	b510      	push	{r4, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 f855 	bl	8008008 <_lseek_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	bf15      	itete	ne
 8007f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f6e:	81a3      	strheq	r3, [r4, #12]
 8007f70:	bf18      	it	ne
 8007f72:	81a3      	strhne	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__sclose>:
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 b813 	b.w	8007fa4 <_close_r>
	...

08007f80 <_write_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d07      	ldr	r5, [pc, #28]	; (8007fa0 <_write_r+0x20>)
 8007f84:	4604      	mov	r4, r0
 8007f86:	4608      	mov	r0, r1
 8007f88:	4611      	mov	r1, r2
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	602a      	str	r2, [r5, #0]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	f7f9 ffb2 	bl	8001ef8 <_write>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_write_r+0x1e>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_write_r+0x1e>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	200005d4 	.word	0x200005d4

08007fa4 <_close_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d06      	ldr	r5, [pc, #24]	; (8007fc0 <_close_r+0x1c>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7f9 ffb0 	bl	8001f14 <_close>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_close_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_close_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	200005d4 	.word	0x200005d4

08007fc4 <_fstat_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_fstat_r+0x20>)
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4604      	mov	r4, r0
 8007fcc:	4608      	mov	r0, r1
 8007fce:	4611      	mov	r1, r2
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	f7f9 ffa2 	bl	8001f1a <_fstat>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	d102      	bne.n	8007fe0 <_fstat_r+0x1c>
 8007fda:	682b      	ldr	r3, [r5, #0]
 8007fdc:	b103      	cbz	r3, 8007fe0 <_fstat_r+0x1c>
 8007fde:	6023      	str	r3, [r4, #0]
 8007fe0:	bd38      	pop	{r3, r4, r5, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200005d4 	.word	0x200005d4

08007fe8 <_isatty_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d06      	ldr	r5, [pc, #24]	; (8008004 <_isatty_r+0x1c>)
 8007fec:	2300      	movs	r3, #0
 8007fee:	4604      	mov	r4, r0
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	602b      	str	r3, [r5, #0]
 8007ff4:	f7f9 ff96 	bl	8001f24 <_isatty>
 8007ff8:	1c43      	adds	r3, r0, #1
 8007ffa:	d102      	bne.n	8008002 <_isatty_r+0x1a>
 8007ffc:	682b      	ldr	r3, [r5, #0]
 8007ffe:	b103      	cbz	r3, 8008002 <_isatty_r+0x1a>
 8008000:	6023      	str	r3, [r4, #0]
 8008002:	bd38      	pop	{r3, r4, r5, pc}
 8008004:	200005d4 	.word	0x200005d4

08008008 <_lseek_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d07      	ldr	r5, [pc, #28]	; (8008028 <_lseek_r+0x20>)
 800800c:	4604      	mov	r4, r0
 800800e:	4608      	mov	r0, r1
 8008010:	4611      	mov	r1, r2
 8008012:	2200      	movs	r2, #0
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7f9 ff86 	bl	8001f28 <_lseek>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_lseek_r+0x1e>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_lseek_r+0x1e>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	200005d4 	.word	0x200005d4

0800802c <_read_r>:
 800802c:	b538      	push	{r3, r4, r5, lr}
 800802e:	4d07      	ldr	r5, [pc, #28]	; (800804c <_read_r+0x20>)
 8008030:	4604      	mov	r4, r0
 8008032:	4608      	mov	r0, r1
 8008034:	4611      	mov	r1, r2
 8008036:	2200      	movs	r2, #0
 8008038:	602a      	str	r2, [r5, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	f7f9 ff4c 	bl	8001ed8 <_read>
 8008040:	1c43      	adds	r3, r0, #1
 8008042:	d102      	bne.n	800804a <_read_r+0x1e>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	b103      	cbz	r3, 800804a <_read_r+0x1e>
 8008048:	6023      	str	r3, [r4, #0]
 800804a:	bd38      	pop	{r3, r4, r5, pc}
 800804c:	200005d4 	.word	0x200005d4

08008050 <_init>:
 8008050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008052:	bf00      	nop
 8008054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008056:	bc08      	pop	{r3}
 8008058:	469e      	mov	lr, r3
 800805a:	4770      	bx	lr

0800805c <_fini>:
 800805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800805e:	bf00      	nop
 8008060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008062:	bc08      	pop	{r3}
 8008064:	469e      	mov	lr, r3
 8008066:	4770      	bx	lr
